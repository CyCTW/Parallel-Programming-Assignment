 Percent |	Source code & Disassembly of cg for cycles (4834 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000000bf0 <conj_grad>:
         :          conj_grad():
         :          double a[],
         :          double p[],
         :          double q[],
         :          double r[],
         :          double *rnorm)
         :          {
    0.00 :    bf0:       push   %r15
    0.00 :    bf2:       push   %r14
    0.00 :    bf4:       push   %r13
    0.00 :    bf6:       push   %r12
    0.00 :    bf8:       push   %rbp
    0.00 :    bf9:       push   %rbx
    0.00 :    bfa:       sub    $0xc8,%rsp
    0.00 :    c01:       mov    %rcx,0x18(%rsp)
         :          rho = 0.0;
         :
         :          //---------------------------------------------------------------------
         :          // Initialize the CG algorithm:
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    c06:       movslq 0x21edfb(%rip),%rcx        # 21fa08 <naa>
         :          {
    0.00 :    c0d:       mov    %rdi,0x40(%rsp)
    0.00 :    c12:       mov    %rdx,0xb8(%rsp)
    0.00 :    c1a:       mov    %r8,0x48(%rsp)
    0.00 :    c1f:       mov    0x100(%rsp),%r11
    0.00 :    c27:       mov    0x108(%rsp),%rbx
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    c2f:       test   %ecx,%ecx
    0.00 :    c31:       js     1545 <conj_grad+0x955>
    0.00 :    c37:       lea    0x10(%r11),%r8
    0.00 :    c3b:       lea    0x10(%r9),%rdi
    0.00 :    c3f:       lea    0x1(%rcx),%r13d
    0.00 :    c43:       mov    0x18(%rsp),%rax
    0.00 :    c48:       mov    %rdx,%r15
    0.00 :    c4b:       lea    0x10(%rdx),%r12
    0.00 :    c4f:       cmp    %r8,%r9
    0.00 :    c52:       setae  %bpl
    0.00 :    c56:       cmp    %rdi,%r11
    0.00 :    c59:       setae  %r10b
    0.00 :    c5d:       lea    0x10(%rax),%rdx
    0.00 :    c61:       lea    0x10(%rbx),%rax
    0.00 :    c65:       or     %ebp,%r10d
    0.00 :    c68:       cmp    $0x2e,%r13d
    0.00 :    c6c:       seta   %bpl
    0.00 :    c70:       mov    %r10d,%r14d
    0.00 :    c73:       and    %ebp,%r14d
    0.00 :    c76:       cmp    %rdi,0x18(%rsp)
    0.00 :    c7b:       setae  %bpl
    0.00 :    c7f:       cmp    %rdx,%r9
    0.00 :    c82:       setae  %r10b
    0.00 :    c86:       or     %ebp,%r10d
    0.00 :    c89:       and    %r10d,%r14d
    0.00 :    c8c:       cmp    %r8,0x18(%rsp)
    0.00 :    c91:       setae  %bpl
    0.00 :    c95:       cmp    %rdx,%r11
    0.00 :    c98:       setae  %r10b
    0.00 :    c9c:       or     %ebp,%r10d
    0.00 :    c9f:       and    %r10d,%r14d
    0.00 :    ca2:       cmp    %rax,0x18(%rsp)
    0.00 :    ca7:       setae  %bpl
    0.00 :    cab:       cmp    %rdx,%rbx
    0.00 :    cae:       setae  %r10b
    0.00 :    cb2:       or     %ebp,%r10d
    0.00 :    cb5:       and    %r10d,%r14d
    0.00 :    cb8:       cmp    %rax,%r9
    0.00 :    cbb:       setae  %bpl
    0.00 :    cbf:       cmp    %rdi,%rbx
    0.00 :    cc2:       setae  %r10b
    0.00 :    cc6:       or     %ebp,%r10d
    0.00 :    cc9:       and    %r10d,%r14d
    0.00 :    ccc:       cmp    %rax,%r11
    0.00 :    ccf:       setae  %bpl
    0.00 :    cd3:       cmp    %r8,%rbx
    0.00 :    cd6:       setae  %r10b
    0.00 :    cda:       or     %ebp,%r10d
    0.00 :    cdd:       and    %r10d,%r14d
    0.00 :    ce0:       cmp    %rdx,%r15
    0.00 :    ce3:       setae  %bpl
    0.00 :    ce7:       cmp    %r12,0x18(%rsp)
    0.00 :    cec:       setae  %r10b
    0.00 :    cf0:       or     %ebp,%r10d
    0.00 :    cf3:       and    %r10d,%r14d
    0.00 :    cf6:       cmp    %rdi,%r15
    0.00 :    cf9:       setae  %bpl
    0.00 :    cfd:       cmp    %r12,%r9
    0.00 :    d00:       setae  %r10b
    0.00 :    d04:       or     %ebp,%r10d
    0.00 :    d07:       and    %r10d,%r14d
    0.00 :    d0a:       cmp    %r8,%r15
    0.00 :    d0d:       setae  %bpl
    0.00 :    d11:       cmp    %r12,%r11
    0.00 :    d14:       setae  %r10b
    0.00 :    d18:       or     %ebp,%r10d
    0.00 :    d1b:       test   %r10b,%r14b
    0.00 :    d1e:       je     14ff <conj_grad+0x90f>
    0.00 :    d24:       cmp    %rax,%r15
    0.00 :    d27:       setae  %r10b
    0.00 :    d2b:       cmp    %r12,%rbx
    0.00 :    d2e:       setae  %bpl
    0.00 :    d32:       mov    %r10d,%r14d
    0.00 :    d35:       or     %bpl,%r14b
    0.00 :    d38:       je     14ff <conj_grad+0x90f>
    0.00 :    d3e:       mov    %r11,%r14
    0.00 :    d41:       movl   $0x0,0x10(%rsp)
    0.00 :    d49:       shr    $0x3,%r14
    0.00 :    d4d:       mov    %r14,%r10
    0.00 :    d50:       and    $0x1,%r10d
    0.00 :    d54:       je     d7f <conj_grad+0x18f>
         :          {
         :          q[j] = 0.0;
         :          z[j] = 0.0;
    0.00 :    d56:       mov    0x18(%rsp),%r14
         :          q[j] = 0.0;
    0.00 :    d5b:       movq   $0x0,(%r11)
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    d62:       movl   $0x1,0x10(%rsp)
         :          z[j] = 0.0;
    0.00 :    d6a:       movq   $0x0,(%r14)
         :          r[j] = x[j];
    0.00 :    d71:       movsd  (%r15),%xmm0
    0.00 :    d76:       movsd  %xmm0,(%rbx)
         :          p[j] = r[j];
    0.00 :    d7a:       movsd  %xmm0,(%r9)
    0.00 :    d7f:       mov    0x18(%rsp),%r15
    0.00 :    d84:       sub    %r10d,%r13d
    0.00 :    d87:       mov    %r10d,%r10d
    0.00 :    d8a:       mov    0xb8(%rsp),%r14
    0.00 :    d92:       shl    $0x3,%r10
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    d96:       xor    %ebp,%ebp
    0.00 :    d98:       mov    %r13d,0x20(%rsp)
    0.00 :    d9d:       shr    %r13d
    0.00 :    da0:       lea    (%r11,%r10,1),%r12
    0.00 :    da4:       mov    %r13d,(%rsp)
    0.00 :    da8:       lea    (%r15,%r10,1),%r13
    0.00 :    dac:       lea    (%rbx,%r10,1),%r15
    0.00 :    db0:       add    %r10,%r14
    0.00 :    db3:       add    %r9,%r10
         :          q[j] = 0.0;
    0.00 :    db6:       mov    %rax,0x28(%rsp)
    0.00 :    dbb:       mov    %r10,0x8(%rsp)
    0.00 :    dc0:       pxor   %xmm1,%xmm1
    0.00 :    dc4:       mov    0x8(%rsp),%rax
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    dc9:       xor    %r10d,%r10d
         :          q[j] = 0.0;
    0.02 :    dcc:       movaps %xmm1,(%r12,%r10,1)
    0.00 :    dd1:       add    $0x1,%ebp
         :          z[j] = 0.0;
    0.00 :    dd4:       movups %xmm1,0x0(%r13,%r10,1)
         :          r[j] = x[j];
    0.00 :    dda:       movupd (%r14,%r10,1),%xmm0
    0.00 :    de0:       movups %xmm0,(%r15,%r10,1)
         :          p[j] = r[j];
    0.00 :    de5:       movups %xmm0,(%rax,%r10,1)
    0.00 :    dea:       add    $0x10,%r10
    0.00 :    dee:       cmp    %ebp,(%rsp)
    0.00 :    df1:       ja     dcc <conj_grad+0x1dc>
    0.00 :    df3:       mov    0x20(%rsp),%r14d
    0.00 :    df8:       mov    0x10(%rsp),%r10d
    0.00 :    dfd:       mov    0x28(%rsp),%rax
    0.00 :    e02:       mov    %r14d,%ebp
    0.00 :    e05:       and    $0xfffffffe,%ebp
    0.00 :    e08:       add    %ebp,%r10d
    0.00 :    e0b:       cmp    %r14d,%ebp
    0.00 :    e0e:       je     e6e <conj_grad+0x27e>
         :          z[j] = 0.0;
    0.00 :    e10:       mov    0x18(%rsp),%r14
         :          r[j] = x[j];
    0.00 :    e15:       mov    0xb8(%rsp),%r15
         :          q[j] = 0.0;
    0.00 :    e1d:       movslq %r10d,%rbp
    0.00 :    e20:       movq   $0x0,(%r11,%rbp,8)
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    e28:       add    $0x1,%r10d
    0.00 :    e2c:       cmp    %r10d,%ecx
         :          z[j] = 0.0;
    0.00 :    e2f:       movq   $0x0,(%r14,%rbp,8)
         :          r[j] = x[j];
    0.00 :    e37:       movsd  (%r15,%rbp,8),%xmm0
    0.00 :    e3d:       movsd  %xmm0,(%rbx,%rbp,8)
         :          p[j] = r[j];
    0.00 :    e42:       movsd  %xmm0,(%r9,%rbp,8)
         :          for (j = 0; j < naa + 1; j++)
    0.00 :    e48:       jl     e6e <conj_grad+0x27e>
         :          q[j] = 0.0;
    0.00 :    e4a:       movslq %r10d,%rcx
    0.00 :    e4d:       movq   $0x0,(%r11,%rcx,8)
         :          z[j] = 0.0;
    0.00 :    e55:       movq   $0x0,(%r14,%rcx,8)
         :          r[j] = x[j];
    0.00 :    e5d:       movsd  (%r15,%rcx,8),%xmm0
    0.00 :    e63:       movsd  %xmm0,(%rbx,%rcx,8)
         :          p[j] = r[j];
    0.00 :    e68:       movsd  %xmm0,(%r9,%rcx,8)
         :
         :          //---------------------------------------------------------------------
         :          // rho = r.r
         :          // Now, obtain the norm of r: First, sum squares of r elements locally...
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :    e6e:       mov    0x21eba4(%rip),%ecx        # 21fa18 <lastcol>
    0.00 :    e74:       sub    0x2110a6(%rip),%ecx        # 211f20 <firstcol>
    0.00 :    e7a:       mov    %ecx,%r14d
    0.00 :    e7d:       mov    %ecx,(%rsp)
    0.00 :    e80:       js     1568 <conj_grad+0x978>
    0.00 :    e86:       movslq %r14d,%r10
         :          rho = 0.0;
    0.00 :    e89:       pxor   %xmm2,%xmm2
    0.00 :    e8d:       pxor   %xmm3,%xmm3
    0.00 :    e91:       lea    0x8(%rbx,%r10,8),%r10
    0.00 :    e96:       mov    %rbx,%rcx
         :          {
         :          rho = rho + r[j] * r[j];
    0.00 :    e99:       movsd  (%rcx),%xmm0
    0.00 :    e9d:       add    $0x8,%rcx
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :    ea1:       cmp    %r10,%rcx
         :          rho = rho + r[j] * r[j];
    0.00 :    ea4:       mulsd  %xmm0,%xmm0
    0.00 :    ea8:       addsd  %xmm0,%xmm3
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :    eac:       jne    e99 <conj_grad+0x2a9>
    0.00 :    eae:       mov    (%rsp),%r14d
         :          //       faster on the sp2 on 16 nodes than is the unrolled-by-2 version
         :          //       below.   On the Cray t3d, the reverse is true, i.e., the
         :          //       unrolled-by-two version is some 10% faster.
         :          //       The unrolled-by-8 version below is significantly faster
         :          //       on the Cray t3d - overall speed of code is 1.5 times faster.
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :    eb2:       mov    0x22c628(%rip),%ecx        # 22d4e0 <lastrow>
    0.00 :    eb8:       sub    0x203582(%rip),%ecx        # 204440 <firstrow>
    0.00 :    ebe:       cmp    %rax,%r9
    0.00 :    ec1:       movl   $0x19,0x34(%rsp)
    0.00 :    ec9:       setae  %bpl
    0.00 :    ecd:       cmp    %rdi,%rbx
    0.00 :    ed0:       lea    0x8(,%r14,8),%r15
    0.00 :    ed8:       lea    0x1(%r14),%r10d
    0.00 :    edc:       mov    %ecx,0x28(%rsp)
    0.00 :    ee0:       lea    0x4(,%rcx,4),%rcx
    0.00 :    ee8:       mov    %r15,0x20(%rsp)
    0.00 :    eed:       mov    0x18(%rsp),%r15
    0.00 :    ef2:       mov    %rcx,0x38(%rsp)
    0.00 :    ef7:       setae  %cl
    0.00 :    efa:       or     %ecx,%ebp
    0.00 :    efc:       cmp    %r8,%r15
    0.00 :    eff:       mov    %ebp,%r13d
    0.00 :    f02:       setae  %bpl
    0.00 :    f06:       cmp    %rdx,%r11
    0.00 :    f09:       mov    %r13b,0x8(%rsp)
    0.00 :    f0e:       setae  %cl
    0.00 :    f11:       or     %ecx,%ebp
    0.00 :    f13:       cmp    %rdi,%r15
    0.00 :    f16:       setae  %dil
    0.00 :    f1a:       cmp    %rdx,%r9
    0.00 :    f1d:       setae  %cl
    0.00 :    f20:       or     %edi,%ecx
    0.00 :    f22:       mov    %r15,%rdi
    0.00 :    f25:       and    %ecx,%ebp
    0.00 :    f27:       cmp    $0x7,%r10d
    0.00 :    f2b:       seta   %cl
    0.00 :    f2e:       and    %ecx,%ebp
    0.00 :    f30:       cmp    %rax,%r15
    0.00 :    f33:       setae  %cl
    0.00 :    f36:       cmp    %rdx,%rbx
    0.00 :    f39:       setae  %dl
    0.00 :    f3c:       or     %ecx,%edx
    0.00 :    f3e:       and    %ebp,%edx
    0.00 :    f40:       mov    %edx,%ecx
    0.00 :    f42:       and    %r13d,%ecx
    0.00 :    f45:       cmp    %rax,%r11
    0.00 :    f48:       setae  %dl
    0.00 :    f4b:       cmp    %r8,%rbx
    0.00 :    f4e:       setae  %al
    0.00 :    f51:       or     %edx,%eax
    0.00 :    f53:       and    %eax,%ecx
    0.00 :    f55:       mov    %r15,%rax
    0.00 :    f58:       shr    $0x3,%rax
    0.00 :    f5c:       mov    %cl,0x5a(%rsp)
    0.00 :    f60:       mov    %eax,%ecx
    0.00 :    f62:       mov    %r10d,%eax
    0.00 :    f65:       and    $0x1,%ecx
    0.00 :    f68:       sub    %ecx,%eax
    0.00 :    f6a:       mov    %ecx,%r13d
    0.00 :    f6d:       mov    %ecx,0x70(%rsp)
    0.00 :    f71:       mov    %eax,%edx
    0.00 :    f73:       mov    %eax,0x64(%rsp)
    0.00 :    f77:       and    $0xfffffffe,%eax
    0.00 :    f7a:       shl    $0x3,%r13
    0.00 :    f7e:       add    %eax,%ecx
    0.00 :    f80:       mov    %eax,0x5c(%rsp)
    0.00 :    f84:       lea    0x8(%rbx,%r14,8),%rax
    0.00 :    f89:       shr    %edx
    0.00 :    f8b:       lea    (%r15,%r13,1),%r12
    0.00 :    f8f:       lea    (%rbx,%r13,1),%rbp
    0.00 :    f93:       lea    (%r9,%r13,1),%r15
    0.00 :    f97:       add    %r11,%r13
    0.00 :    f9a:       cmp    $0x8,%r10d
    0.00 :    f9e:       mov    %rax,0x50(%rsp)
    0.00 :    fa3:       mov    %edx,0x60(%rsp)
    0.00 :    fa7:       seta   %al
    0.00 :    faa:       and    0x8(%rsp),%al
    0.00 :    fae:       mov    %r10d,%edx
    0.00 :    fb1:       mov    %ecx,0x84(%rsp)
    0.00 :    fb8:       mov    %al,0x5b(%rsp)
    0.00 :    fbc:       mov    %r9,%rax
    0.00 :    fbf:       shr    $0x3,%rax
    0.00 :    fc3:       mov    %eax,%r8d
    0.00 :    fc6:       and    $0x1,%r8d
    0.00 :    fca:       sub    %r8d,%edx
    0.00 :    fcd:       mov    %r8d,0x80(%rsp)
    0.00 :    fd5:       mov    %edx,%eax
    0.00 :    fd7:       mov    %edx,0x7c(%rsp)
    0.00 :    fdb:       and    $0xfffffffe,%edx
    0.00 :    fde:       shr    %eax
    0.00 :    fe0:       mov    %edx,0x74(%rsp)
    0.00 :    fe4:       mov    %eax,0x78(%rsp)
    0.00 :    fe8:       mov    %r8d,%eax
    0.00 :    feb:       shl    $0x3,%rax
    0.00 :    fef:       lea    (%rbx,%rax,1),%r14
    0.00 :    ff3:       add    %r9,%rax
    0.00 :    ff6:       mov    %rax,0x68(%rsp)
    0.00 :    ffb:       mov    %r8d,%eax
    0.00 :    ffe:       add    %edx,%eax
         :          //---------------------------------------------------------------------
         :          // p = r + beta*p
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
         :          {
         :          p[j] = r[j] + beta * p[j];
    0.00 :   1000:       movslq %eax,%rdx
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1003:       add    $0x1,%eax
    0.00 :   1006:       mov    %eax,0x94(%rsp)
         :          p[j] = r[j] + beta * p[j];
    0.00 :   100d:       cltq
    0.00 :   100f:       shl    $0x3,%rdx
    0.00 :   1013:       shl    $0x3,%rax
    0.00 :   1017:       mov    %rdx,0x88(%rsp)
    0.00 :   101f:       mov    %rax,0x98(%rsp)
    0.00 :   1027:       add    %r9,%rax
    0.00 :   102a:       mov    %rax,0xa0(%rsp)
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1032:       lea    0x1(%rcx),%eax
    0.00 :   1035:       mov    %eax,0x90(%rsp)
         :          z[j] = z[j] + alpha * p[j];
    0.00 :   103c:       cltq
    0.00 :   103e:       shl    $0x3,%rax
    0.00 :   1042:       add    %rax,%rdi
    0.00 :   1045:       mov    %rax,0xa8(%rsp)
    0.00 :   104d:       mov    %rdi,0xb0(%rsp)
    0.00 :   1055:       nopl   (%rax)
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   1058:       mov    0x28(%rsp),%edx
    0.00 :   105c:       xor    %r10d,%r10d
    0.00 :   105f:       test   %edx,%edx
    0.00 :   1061:       js     10fe <conj_grad+0x50e>
    0.00 :   1067:       mov    %rbp,0x8(%rsp)
    0.00 :   106c:       mov    %r12,0x10(%rsp)
    0.00 :   1071:       mov    %rbx,0x108(%rsp)
    0.00 :   1079:       mov    0x40(%rsp),%rbp
    0.00 :   107e:       mov    0x48(%rsp),%r12
    0.00 :   1083:       mov    0x38(%rsp),%rbx
    0.00 :   1088:       nopl   0x0(%rax,%rax,1)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.04 :   1090:       movslq (%rsi,%r10,1),%rax
    0.16 :   1094:       mov    0x4(%rsi,%r10,1),%edx
    0.02 :   1099:       cmp    %edx,%eax
    0.00 :   109b:       jge    1448 <conj_grad+0x858>
    0.00 :   10a1:       sub    $0x1,%edx
         :          sum = 0.0;
    0.00 :   10a4:       pxor   %xmm1,%xmm1
    0.21 :   10a8:       sub    %eax,%edx
    0.00 :   10aa:       lea    (%r12,%rax,8),%r8
    0.00 :   10ae:       lea    0x0(%rbp,%rax,4),%rdi
    0.00 :   10b3:       add    $0x1,%rdx
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.08 :   10b7:       xor    %eax,%eax
    0.00 :   10b9:       nopl   0x0(%rax)
         :          sum = sum + a[k] * p[colidx[k]];
    5.74 :   10c0:       movslq (%rdi,%rax,4),%rcx
    2.37 :   10c4:       movsd  (%r9,%rcx,8),%xmm0
   36.36 :   10ca:       mulsd  (%r8,%rax,8),%xmm0
    0.51 :   10d0:       add    $0x1,%rax
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.55 :   10d4:       cmp    %rdx,%rax
         :          sum = sum + a[k] * p[colidx[k]];
   47.54 :   10d7:       addsd  %xmm0,%xmm1
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.55 :   10db:       jne    10c0 <conj_grad+0x4d0>
         :          q[j] = sum;
    0.16 :   10dd:       movsd  %xmm1,(%r11,%r10,2)
    0.00 :   10e3:       add    $0x4,%r10
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   10e7:       cmp    %rbx,%r10
    0.00 :   10ea:       jne    1090 <conj_grad+0x4a0>
    0.00 :   10ec:       mov    0x8(%rsp),%rbp
    0.00 :   10f1:       mov    0x10(%rsp),%r12
    0.00 :   10f6:       mov    0x108(%rsp),%rbx
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   10fe:       mov    (%rsp),%r10d
    0.00 :   1102:       test   %r10d,%r10d
    0.00 :   1105:       js     14da <conj_grad+0x8ea>
         :          d = 0.0;
    0.00 :   110b:       pxor   %xmm1,%xmm1
    0.00 :   110f:       mov    0x20(%rsp),%rdx
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1114:       xor    %eax,%eax
    0.00 :   1116:       nopw   %cs:0x0(%rax,%rax,1)
         :          d = d + p[j] * q[j];
    0.00 :   1120:       movsd  (%r9,%rax,1),%xmm0
    0.06 :   1126:       mulsd  (%r11,%rax,1),%xmm0
    0.14 :   112c:       add    $0x8,%rax
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1130:       cmp    %rdx,%rax
         :          d = d + p[j] * q[j];
    0.37 :   1133:       addsd  %xmm0,%xmm1
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1137:       jne    1120 <conj_grad+0x530>
    0.00 :   1139:       cmpb   $0x0,0x5a(%rsp)
         :          alpha = rho / d;
    0.00 :   113e:       movapd %xmm3,%xmm5
    0.00 :   1142:       divsd  %xmm1,%xmm5
    0.00 :   1146:       je     1493 <conj_grad+0x8a3>
    0.00 :   114c:       mov    0x70(%rsp),%r8d
    0.00 :   1151:       test   %r8d,%r8d
    0.00 :   1154:       je     1181 <conj_grad+0x591>
         :          z[j] = z[j] + alpha * p[j];
    0.00 :   1156:       mov    0x18(%rsp),%rax
    0.00 :   115b:       movsd  (%r9),%xmm0
    0.00 :   1160:       mulsd  %xmm5,%xmm0
    0.00 :   1164:       addsd  (%rax),%xmm0
    0.00 :   1168:       movsd  %xmm0,(%rax)
         :          r[j] = r[j] - alpha * q[j];
    0.00 :   116c:       movsd  (%r11),%xmm1
    0.00 :   1171:       movsd  (%rbx),%xmm0
    0.00 :   1175:       mulsd  %xmm5,%xmm1
    0.00 :   1179:       subsd  %xmm1,%xmm0
    0.00 :   117d:       movsd  %xmm0,(%rbx)
    0.00 :   1181:       movapd %xmm5,%xmm4
         :          alpha = rho / d;
    0.00 :   1185:       mov    0x60(%rsp),%ecx
    0.00 :   1189:       xor    %eax,%eax
    0.00 :   118b:       xor    %edx,%edx
    0.00 :   118d:       unpcklpd %xmm4,%xmm4
    0.00 :   1191:       nopl   0x0(%rax)
         :          z[j] = z[j] + alpha * p[j];
    0.06 :   1198:       movupd (%r15,%rax,1),%xmm0
    0.00 :   119e:       add    $0x1,%edx
    0.00 :   11a1:       mulpd  %xmm4,%xmm0
    0.15 :   11a5:       addpd  (%r12,%rax,1),%xmm0
    0.04 :   11ab:       movaps %xmm0,(%r12,%rax,1)
         :          r[j] = r[j] - alpha * q[j];
    0.05 :   11b0:       movupd 0x0(%r13,%rax,1),%xmm1
    0.00 :   11b7:       mulpd  %xmm4,%xmm1
    0.17 :   11bb:       movupd 0x0(%rbp,%rax,1),%xmm0
    0.15 :   11c1:       subpd  %xmm1,%xmm0
    0.00 :   11c5:       movups %xmm0,0x0(%rbp,%rax,1)
    0.00 :   11ca:       add    $0x10,%rax
    0.00 :   11ce:       cmp    %edx,%ecx
    0.00 :   11d0:       ja     1198 <conj_grad+0x5a8>
    0.00 :   11d2:       mov    0x64(%rsp),%edi
    0.00 :   11d6:       cmp    %edi,0x5c(%rsp)
    0.00 :   11da:       je     126b <conj_grad+0x67b>
         :          z[j] = z[j] + alpha * p[j];
    0.00 :   11e0:       movslq 0x84(%rsp),%rdx
    0.00 :   11e8:       mov    0x18(%rsp),%rdi
    0.00 :   11ed:       movsd  (%r9,%rdx,8),%xmm0
    0.00 :   11f3:       lea    0x0(,%rdx,8),%rax
    0.00 :   11fb:       mulsd  %xmm5,%xmm0
    0.00 :   11ff:       lea    (%rdi,%rax,1),%rcx
         :          r[j] = r[j] - alpha * q[j];
    0.00 :   1203:       add    %rbx,%rax
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1206:       mov    (%rsp),%edi
    0.00 :   1209:       cmp    %edi,0x90(%rsp)
         :          z[j] = z[j] + alpha * p[j];
    0.00 :   1210:       addsd  (%rcx),%xmm0
    0.00 :   1214:       movsd  %xmm0,(%rcx)
         :          r[j] = r[j] - alpha * q[j];
    0.00 :   1218:       movsd  (%r11,%rdx,8),%xmm1
    0.00 :   121e:       movsd  (%rax),%xmm0
    0.00 :   1222:       mulsd  %xmm5,%xmm1
    0.00 :   1226:       subsd  %xmm1,%xmm0
    0.00 :   122a:       movsd  %xmm0,(%rax)
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   122e:       jg     126b <conj_grad+0x67b>
         :          z[j] = z[j] + alpha * p[j];
    0.00 :   1230:       mov    0xa8(%rsp),%rax
    0.00 :   1238:       mov    0xb0(%rsp),%rdi
    0.00 :   1240:       movsd  (%r9,%rax,1),%xmm0
    0.00 :   1246:       mulsd  %xmm5,%xmm0
    0.00 :   124a:       addsd  (%rdi),%xmm0
    0.00 :   124e:       movsd  %xmm0,(%rdi)
         :          r[j] = r[j] - alpha * q[j];
    0.00 :   1252:       mov    %rax,%rdi
    0.00 :   1255:       lea    (%rbx,%rax,1),%rax
    0.00 :   1259:       mulsd  (%r11,%rdi,1),%xmm5
    0.00 :   125f:       movsd  (%rax),%xmm0
    0.00 :   1263:       subsd  %xmm5,%xmm0
    0.00 :   1267:       movsd  %xmm0,(%rax)
         :          alpha = rho / d;
    0.00 :   126b:       pxor   %xmm1,%xmm1
    0.00 :   126f:       mov    0x50(%rsp),%rdx
    0.00 :   1274:       mov    %rbx,%rax
    0.00 :   1277:       nopw   0x0(%rax,%rax,1)
         :          rho = rho + r[j] * r[j];
    0.04 :   1280:       movsd  (%rax),%xmm0
    0.00 :   1284:       add    $0x8,%rax
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.22 :   1288:       cmp    %rdx,%rax
         :          rho = rho + r[j] * r[j];
    0.00 :   128b:       mulsd  %xmm0,%xmm0
    0.41 :   128f:       addsd  %xmm0,%xmm1
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1293:       jne    1280 <conj_grad+0x690>
         :          beta = rho / rho0;
    0.00 :   1295:       movapd %xmm1,%xmm7
    0.00 :   1299:       cmpb   $0x0,0x5b(%rsp)
    0.00 :   129e:       divsd  %xmm3,%xmm7
    0.00 :   12a2:       movapd %xmm7,%xmm3
    0.00 :   12a6:       je     1464 <conj_grad+0x874>
    0.00 :   12ac:       mov    0x80(%rsp),%edi
    0.00 :   12b3:       test   %edi,%edi
    0.00 :   12b5:       je     12c9 <conj_grad+0x6d9>
         :          p[j] = r[j] + beta * p[j];
    0.00 :   12b7:       movsd  (%r9),%xmm0
    0.00 :   12bc:       mulsd  %xmm3,%xmm0
    0.00 :   12c0:       addsd  (%rbx),%xmm0
    0.00 :   12c4:       movsd  %xmm0,(%r9)
    0.00 :   12c9:       movapd %xmm3,%xmm4
         :          beta = rho / rho0;
    0.00 :   12cd:       mov    0x68(%rsp),%rcx
    0.00 :   12d2:       mov    0x78(%rsp),%edi
    0.00 :   12d6:       xor    %eax,%eax
    0.00 :   12d8:       xor    %edx,%edx
    0.00 :   12da:       unpcklpd %xmm4,%xmm4
    0.00 :   12de:       xchg   %ax,%ax
         :          p[j] = r[j] + beta * p[j];
    0.02 :   12e0:       movapd (%rcx,%rax,1),%xmm0
    0.07 :   12e5:       add    $0x1,%edx
    0.00 :   12e8:       mulpd  %xmm4,%xmm0
    0.04 :   12ec:       movupd (%r14,%rax,1),%xmm6
    0.04 :   12f2:       addpd  %xmm6,%xmm0
    0.02 :   12f6:       movaps %xmm0,(%rcx,%rax,1)
    0.00 :   12fa:       add    $0x10,%rax
    0.02 :   12fe:       cmp    %edx,%edi
    0.02 :   1300:       ja     12e0 <conj_grad+0x6f0>
    0.00 :   1302:       mov    0x7c(%rsp),%edi
    0.00 :   1306:       cmp    %edi,0x74(%rsp)
    0.00 :   130a:       je     1352 <conj_grad+0x762>
    0.00 :   130c:       mov    0x88(%rsp),%rdi
    0.00 :   1314:       lea    (%r9,%rdi,1),%rax
    0.00 :   1318:       movsd  (%rax),%xmm0
    0.00 :   131c:       mulsd  %xmm3,%xmm0
    0.00 :   1320:       addsd  (%rbx,%rdi,1),%xmm0
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1325:       mov    (%rsp),%edi
    0.00 :   1328:       cmp    %edi,0x94(%rsp)
         :          p[j] = r[j] + beta * p[j];
    0.00 :   132f:       movsd  %xmm0,(%rax)
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1333:       jg     1352 <conj_grad+0x762>
         :          p[j] = r[j] + beta * p[j];
    0.00 :   1335:       mov    0xa0(%rsp),%rax
    0.00 :   133d:       mov    0x98(%rsp),%rdi
    0.00 :   1345:       mulsd  (%rax),%xmm3
    0.00 :   1349:       addsd  (%rbx,%rdi,1),%xmm3
    0.00 :   134e:       movsd  %xmm3,(%rax)
         :          rho = rho + r[j] * r[j];
    0.00 :   1352:       movapd %xmm1,%xmm3
         :          for (cgit = 1; cgit <= cgitmax; cgit++)
    0.00 :   1356:       subl   $0x1,0x34(%rsp)
    0.00 :   135b:       jne    1058 <conj_grad+0x468>
         :          // Compute residual norm explicitly:  ||r|| = ||x - A.z||
         :          // First, form A.z
         :          // The partition submatrix-vector multiply
         :          //---------------------------------------------------------------------
         :          sum = 0.0;
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   1361:       mov    0x28(%rsp),%ecx
    0.00 :   1365:       xor    %r8d,%r8d
    0.00 :   1368:       test   %ecx,%ecx
    0.00 :   136a:       js     13dc <conj_grad+0x7ec>
    0.00 :   136c:       mov    0x38(%rsp),%r11
    0.00 :   1371:       mov    0x40(%rsp),%rbp
    0.00 :   1376:       mov    0x18(%rsp),%r10
    0.00 :   137b:       mov    0x48(%rsp),%r12
         :          {
         :          d = 0.0;
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   1380:       movslq (%rsi,%r8,1),%rcx
    0.00 :   1384:       mov    0x4(%rsi,%r8,1),%eax
    0.00 :   1389:       cmp    %eax,%ecx
    0.00 :   138b:       jge    14e3 <conj_grad+0x8f3>
    0.00 :   1391:       sub    $0x1,%eax
         :          d = 0.0;
    0.00 :   1394:       pxor   %xmm1,%xmm1
    0.00 :   1398:       sub    %ecx,%eax
    0.00 :   139a:       lea    (%r12,%rcx,8),%r9
    0.00 :   139e:       lea    0x0(%rbp,%rcx,4),%rdi
    0.00 :   13a3:       lea    0x1(%rax),%rdx
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   13a7:       xor    %eax,%eax
    0.00 :   13a9:       nopl   0x0(%rax)
         :          {
         :          d = d + a[k] * z[colidx[k]];
    0.17 :   13b0:       movslq (%rdi,%rax,4),%rcx
    0.04 :   13b4:       movsd  (%r10,%rcx,8),%xmm0
    1.39 :   13ba:       mulsd  (%r9,%rax,8),%xmm0
    0.02 :   13c0:       add    $0x1,%rax
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.02 :   13c4:       cmp    %rdx,%rax
         :          d = d + a[k] * z[colidx[k]];
    1.91 :   13c7:       addsd  %xmm0,%xmm1
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   13cb:       jne    13b0 <conj_grad+0x7c0>
         :          }
         :          r[j] = d;
    0.00 :   13cd:       movsd  %xmm1,(%rbx,%r8,2)
    0.00 :   13d3:       add    $0x4,%r8
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   13d7:       cmp    %r11,%r8
    0.00 :   13da:       jne    1380 <conj_grad+0x790>
         :          }
         :
         :          //---------------------------------------------------------------------
         :          // At this point, r contains A.z
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   13dc:       mov    (%rsp),%eax
    0.00 :   13df:       test   %eax,%eax
    0.00 :   13e1:       js     155f <conj_grad+0x96f>
         :          sum = 0.0;
    0.00 :   13e7:       pxor   %xmm0,%xmm0
    0.00 :   13eb:       mov    0x20(%rsp),%rdx
    0.00 :   13f0:       mov    0xb8(%rsp),%rcx
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   13f8:       xor    %eax,%eax
         :          {
         :          d = x[j] - r[j];
    0.00 :   13fa:       movsd  (%rcx,%rax,1),%xmm1
    0.02 :   13ff:       subsd  (%rbx,%rax,1),%xmm1
    0.00 :   1404:       add    $0x8,%rax
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1408:       cmp    %rdx,%rax
         :          sum = sum + d * d;
    0.00 :   140b:       mulsd  %xmm1,%xmm1
    0.02 :   140f:       addsd  %xmm1,%xmm0
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1413:       jne    13fa <conj_grad+0x80a>
    0.00 :   1415:       ucomisd %xmm0,%xmm2
         :          }
         :
         :          *rnorm = sqrt(sum);
    0.00 :   1419:       sqrtsd %xmm0,%xmm1
    0.00 :   141d:       ja     1575 <conj_grad+0x985>
    0.00 :   1423:       mov    0x110(%rsp),%rax
    0.00 :   142b:       movsd  %xmm1,(%rax)
         :          }
    0.00 :   142f:       add    $0xc8,%rsp
    0.00 :   1436:       pop    %rbx
    0.00 :   1437:       pop    %rbp
    0.00 :   1438:       pop    %r12
    0.00 :   143a:       pop    %r13
    0.00 :   143c:       pop    %r14
    0.00 :   143e:       pop    %r15
    0.00 :   1440:       retq
    0.00 :   1441:       nopl   0x0(%rax)
         :          sum = 0.0;
    0.00 :   1448:       pxor   %xmm1,%xmm1
         :          q[j] = sum;
    0.00 :   144c:       movsd  %xmm1,(%r11,%r10,2)
    0.00 :   1452:       add    $0x4,%r10
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   1456:       cmp    %rbx,%r10
    0.00 :   1459:       jne    1090 <conj_grad+0x4a0>
    0.00 :   145f:       jmpq   10ec <conj_grad+0x4fc>
    0.00 :   1464:       mov    0x20(%rsp),%rdx
         :          beta = rho / rho0;
    0.00 :   1469:       xor    %eax,%eax
    0.00 :   146b:       nopl   0x0(%rax,%rax,1)
         :          p[j] = r[j] + beta * p[j];
    0.00 :   1470:       movsd  (%r9,%rax,1),%xmm0
    0.00 :   1476:       mulsd  %xmm3,%xmm0
    0.00 :   147a:       addsd  (%rbx,%rax,1),%xmm0
    0.00 :   147f:       movsd  %xmm0,(%r9,%rax,1)
    0.00 :   1485:       add    $0x8,%rax
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   1489:       cmp    %rdx,%rax
    0.00 :   148c:       jne    1470 <conj_grad+0x880>
    0.00 :   148e:       jmpq   1352 <conj_grad+0x762>
    0.00 :   1493:       mov    0x20(%rsp),%rcx
    0.00 :   1498:       mov    0x18(%rsp),%rdx
         :          alpha = rho / d;
    0.00 :   149d:       xor    %eax,%eax
    0.00 :   149f:       nop
         :          z[j] = z[j] + alpha * p[j];
    0.00 :   14a0:       movsd  (%r9,%rax,1),%xmm0
    0.00 :   14a6:       mulsd  %xmm5,%xmm0
    0.00 :   14aa:       addsd  (%rdx,%rax,1),%xmm0
    0.00 :   14af:       movsd  %xmm0,(%rdx,%rax,1)
         :          r[j] = r[j] - alpha * q[j];
    0.00 :   14b4:       movsd  (%r11,%rax,1),%xmm1
    0.00 :   14ba:       movsd  (%rbx,%rax,1),%xmm0
    0.00 :   14bf:       mulsd  %xmm5,%xmm1
    0.00 :   14c3:       subsd  %xmm1,%xmm0
    0.00 :   14c7:       movsd  %xmm0,(%rbx,%rax,1)
    0.00 :   14cc:       add    $0x8,%rax
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   14d0:       cmp    %rcx,%rax
    0.00 :   14d3:       jne    14a0 <conj_grad+0x8b0>
    0.00 :   14d5:       jmpq   126b <conj_grad+0x67b>
         :          rho = 0.0;
    0.00 :   14da:       pxor   %xmm3,%xmm3
    0.00 :   14de:       jmpq   1356 <conj_grad+0x766>
         :          d = 0.0;
    0.00 :   14e3:       pxor   %xmm1,%xmm1
         :          r[j] = d;
    0.00 :   14e7:       movsd  %xmm1,(%rbx,%r8,2)
    0.00 :   14ed:       add    $0x4,%r8
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   14f1:       cmp    %r11,%r8
    0.00 :   14f4:       jne    1380 <conj_grad+0x790>
    0.00 :   14fa:       jmpq   13dc <conj_grad+0x7ec>
    0.00 :   14ff:       mov    0x18(%rsp),%r15
    0.00 :   1504:       mov    0xb8(%rsp),%r14
    0.00 :   150c:       lea    0x8(,%rcx,8),%r10
         :          for (j = 0; j < naa + 1; j++)
    0.00 :   1514:       xor    %ecx,%ecx
         :          q[j] = 0.0;
    0.00 :   1516:       movq   $0x0,(%r11,%rcx,1)
         :          z[j] = 0.0;
    0.00 :   151e:       movq   $0x0,(%r15,%rcx,1)
         :          r[j] = x[j];
    0.00 :   1526:       movsd  (%r14,%rcx,1),%xmm0
    0.00 :   152c:       movsd  %xmm0,(%rbx,%rcx,1)
         :          p[j] = r[j];
    0.00 :   1531:       movsd  %xmm0,(%r9,%rcx,1)
    0.00 :   1537:       add    $0x8,%rcx
         :          for (j = 0; j < naa + 1; j++)
    0.00 :   153b:       cmp    %r10,%rcx
    0.00 :   153e:       jne    1516 <conj_grad+0x926>
    0.00 :   1540:       jmpq   e6e <conj_grad+0x27e>
    0.00 :   1545:       mov    0x18(%rsp),%rax
    0.00 :   154a:       lea    0x10(%r9),%rdi
    0.00 :   154e:       lea    0x10(%r11),%r8
    0.00 :   1552:       lea    0x10(%rax),%rdx
    0.00 :   1556:       lea    0x10(%rbx),%rax
    0.00 :   155a:       jmpq   e6e <conj_grad+0x27e>
         :          *rnorm = sqrt(sum);
    0.00 :   155f:       pxor   %xmm1,%xmm1
    0.00 :   1563:       jmpq   1423 <conj_grad+0x833>
         :          rho = 0.0;
    0.00 :   1568:       pxor   %xmm2,%xmm2
    0.00 :   156c:       pxor   %xmm3,%xmm3
    0.00 :   1570:       jmpq   eae <conj_grad+0x2be>
    0.00 :   1575:       movsd  %xmm1,(%rsp)
         :          *rnorm = sqrt(sum);
    0.00 :   157a:       callq  7e0 <sqrt@plt>
    0.00 :   157f:       movsd  (%rsp),%xmm1
    0.00 :   1584:       jmpq   1423 <conj_grad+0x833>
 Percent |	Source code & Disassembly of cg for cycles (1254 samples, percent: local period)
------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000001590 <sparse>:
         :          sparse():
         :          int firstrow,
         :          int lastrow,
         :          int nzloc[],
         :          double rcond,
         :          double shift)
         :          {
    0.00 :   1590:       push   %r15
    0.00 :   1592:       push   %r14
    0.00 :   1594:       mov    %rdi,%r14
    0.00 :   1597:       push   %r13
    0.00 :   1599:       push   %r12
    0.00 :   159b:       mov    %rsi,%r13
    0.00 :   159e:       push   %rbp
    0.00 :   159f:       push   %rbx
    0.00 :   15a0:       mov    %r8d,%ebx
    0.00 :   15a3:       movapd %xmm0,%xmm4
    0.00 :   15a7:       sub    $0x48,%rsp
    0.00 :   15ab:       movapd %xmm1,%xmm5
         :          logical cont40;
         :
         :          //---------------------------------------------------------------------
         :          // how many rows of result
         :          //---------------------------------------------------------------------
         :          nrows = lastrow - firstrow + 1;
    0.00 :   15af:       mov    0xa0(%rsp),%eax
    0.00 :   15b6:       sub    0x98(%rsp),%eax
         :          {
    0.00 :   15bd:       mov    %rdx,0x20(%rsp)
    0.00 :   15c2:       mov    %ecx,0x3c(%rsp)
    0.00 :   15c6:       mov    0x80(%rsp),%r12
    0.00 :   15ce:       mov    0x88(%rsp),%r15
         :          nrows = lastrow - firstrow + 1;
    0.00 :   15d6:       mov    %eax,0x38(%rsp)
         :
         :          //---------------------------------------------------------------------
         :          // ...count the number of triples in each row
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < nrows + 1; j++)
    0.00 :   15da:       add    $0x1,%eax
    0.00 :   15dd:       mov    %eax,0x2c(%rsp)
    0.00 :   15e1:       js     160d <sparse+0x7d>
         :          {
         :          rowstr[j] = 0;
    0.00 :   15e3:       mov    %eax,%eax
    0.00 :   15e5:       mov    %rdx,%rdi
    0.00 :   15e8:       xor    %esi,%esi
    0.00 :   15ea:       lea    0x4(,%rax,4),%rdx
    0.00 :   15f2:       movsd  %xmm1,0x8(%rsp)
    0.00 :   15f8:       movsd  %xmm0,(%rsp)
    0.00 :   15fd:       callq  7a0 <memset@plt>
    0.00 :   1602:       movsd  0x8(%rsp),%xmm5
    0.00 :   1608:       movsd  (%rsp),%xmm4
         :          }
         :
         :          for (i = 0; i < n; i++)
    0.00 :   160d:       mov    0x3c(%rsp),%eax
    0.00 :   1611:       test   %eax,%eax
    0.00 :   1613:       jle    1666 <sparse+0xd6>
    0.00 :   1615:       sub    $0x1,%eax
    0.00 :   1618:       mov    0x20(%rsp),%r9
    0.00 :   161d:       mov    %r12,%rdi
    0.00 :   1620:       lea    (%rax,%rax,2),%rax
    0.00 :   1624:       mov    %r15,%rsi
    0.00 :   1627:       shl    $0x4,%rax
    0.00 :   162b:       lea    0x30(%r15,%rax,1),%r8
         :          {
         :          for (nza = 0; nza < arow[i]; nza++)
    0.00 :   1630:       mov    (%rdi),%ecx
         :          {
         :          j = acol[i][nza] + 1;
    0.00 :   1632:       mov    $0x1,%edx
         :          for (nza = 0; nza < arow[i]; nza++)
    0.00 :   1637:       test   %ecx,%ecx
    0.00 :   1639:       jle    1659 <sparse+0xc9>
    0.00 :   163b:       nopl   0x0(%rax,%rax,1)
         :          j = acol[i][nza] + 1;
    0.00 :   1640:       mov    -0x4(%rsi,%rdx,4),%eax
    0.00 :   1644:       add    $0x1,%eax
         :          rowstr[j] = rowstr[j] + arow[i];
    0.00 :   1647:       cltq
    0.04 :   1649:       add    %ecx,(%r9,%rax,4)
         :          for (nza = 0; nza < arow[i]; nza++)
    0.00 :   164d:       mov    %edx,%eax
    0.00 :   164f:       add    $0x1,%rdx
    0.00 :   1653:       mov    (%rdi),%ecx
    0.00 :   1655:       cmp    %eax,%ecx
    0.00 :   1657:       jg     1640 <sparse+0xb0>
    0.00 :   1659:       add    $0x30,%rsi
    0.00 :   165d:       add    $0x4,%rdi
         :          for (i = 0; i < n; i++)
    0.00 :   1661:       cmp    %r8,%rsi
    0.00 :   1664:       jne    1630 <sparse+0xa0>
    0.00 :   1666:       movslq 0x2c(%rsp),%rax
         :          }
         :          }
         :
         :          rowstr[0] = 0;
    0.00 :   166b:       mov    0x20(%rsp),%rdi
    0.00 :   1670:       movl   $0x0,(%rdi)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1676:       test   %eax,%eax
    0.00 :   1678:       lea    (%rdi,%rax,4),%rdx
    0.00 :   167c:       jle    1e02 <sparse+0x872>
    0.00 :   1682:       mov    0x38(%rsp),%eax
    0.00 :   1686:       lea    0x4(%rdi),%rcx
    0.00 :   168a:       mov    %rcx,%r8
    0.00 :   168d:       lea    0x8(%rdi,%rax,4),%rsi
    0.00 :   1692:       xor    %eax,%eax
         :          {
         :          rowstr[j] = rowstr[j] + rowstr[j - 1];
    0.00 :   1694:       add    (%r8),%eax
    0.00 :   1697:       add    $0x4,%r8
    0.00 :   169b:       mov    %eax,-0x4(%r8)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   169f:       cmp    %rsi,%r8
    0.00 :   16a2:       jne    1694 <sparse+0x104>
         :          }
         :          nza = rowstr[nrows] - 1;
    0.00 :   16a4:       mov    (%rdx),%ebp
    0.00 :   16a6:       mov    0xa8(%rsp),%r9
    0.00 :   16ae:       sub    $0x1,%ebp
         :
         :          //---------------------------------------------------------------------
         :          // ... rowstr(j) now is the location of the first nonzero
         :          //     of row j of a
         :          //---------------------------------------------------------------------
         :          if (nza > nz)
    0.00 :   16b1:       cmp    %ebx,%ebp
    0.00 :   16b3:       jg     1e0f <sparse+0x87f>
         :          //---------------------------------------------------------------------
         :          // ... preload data pages
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < nrows; j++)
         :          {
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   16b9:       movslq -0x4(%rcx),%rdx
    0.00 :   16bd:       cmp    (%rcx),%edx
    0.00 :   16bf:       jge    1709 <sparse+0x179>
    0.00 :   16c1:       lea    0x1(%rdx),%eax
    0.00 :   16c4:       lea    0x0(,%rdx,8),%rdi
    0.00 :   16cc:       shl    $0x2,%rdx
    0.04 :   16d0:       cltq
    0.00 :   16d2:       mov    %rax,%rsi
    0.00 :   16d5:       neg    %rsi
    0.00 :   16d8:       lea    (%rdi,%rsi,8),%rdi
    0.00 :   16dc:       lea    (%rdx,%rsi,4),%rsi
    0.00 :   16e0:       add    %r14,%rdi
    0.00 :   16e3:       add    %r13,%rsi
    0.00 :   16e6:       nopw   %cs:0x0(%rax,%rax,1)
         :          {
         :          a[k] = 0.0;
    0.25 :   16f0:       movq   $0x0,(%rdi,%rax,8)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   16f8:       mov    %eax,%edx
         :          colidx[k] = -1;
    0.16 :   16fa:       movl   $0xffffffff,(%rsi,%rax,4)
    0.00 :   1701:       add    $0x1,%rax
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   1705:       cmp    %edx,(%rcx)
    0.09 :   1707:       jg     16f0 <sparse+0x160>
    0.04 :   1709:       add    $0x4,%rcx
         :          }
         :          nzloc[j] = 0;
    0.00 :   170d:       movl   $0x0,(%r9)
    0.00 :   1714:       add    $0x4,%r9
         :          for (j = 0; j < nrows; j++)
    0.00 :   1718:       cmp    %r8,%rcx
    0.00 :   171b:       jne    16b9 <sparse+0x129>
         :
         :          //---------------------------------------------------------------------
         :          // ... generate actual values by summing duplicates
         :          //---------------------------------------------------------------------
         :          size = 1.0;
         :          ratio = pow(rcond, (1.0 / (double)(n)));
    0.00 :   171d:       mov    0x3c(%rsp),%ebx
    0.00 :   1721:       pxor   %xmm0,%xmm0
    0.00 :   1725:       movsd  0x19ab(%rip),%xmm7        # 30d8 <_IO_stdin_used+0x148>
    0.00 :   172d:       movsd  %xmm5,0x10(%rsp)
    0.00 :   1733:       cvtsi2sd %ebx,%xmm0
    0.00 :   1737:       movapd %xmm7,%xmm1
    0.00 :   173b:       movsd  %xmm7,(%rsp)
    0.00 :   1740:       movsd  %xmm4,0x8(%rsp)
    0.00 :   1746:       divsd  %xmm0,%xmm1
    0.00 :   174a:       movapd %xmm4,%xmm0
    0.00 :   174e:       callq  7b0 <pow@plt>
         :
         :          for (i = 0; i < n; i++)
    0.00 :   1753:       test   %ebx,%ebx
    0.00 :   1755:       jle    1951 <sparse+0x3c1>
    0.00 :   175b:       mov    0x90(%rsp),%r11
         :          a[kk + 1] = a[kk];
         :          colidx[kk + 1] = colidx[kk];
         :          }
         :          }
         :          colidx[k] = jcol;
         :          a[k] = 0.0;
    0.00 :   1763:       pxor   %xmm6,%xmm6
         :          size = 1.0;
    0.00 :   1767:       movsd  (%rsp),%xmm7
    0.00 :   176c:       mov    %r12,0x30(%rsp)
    0.00 :   1771:       movsd  0x8(%rsp),%xmm4
         :          for (i = 0; i < n; i++)
    0.00 :   1777:       movl   $0x0,0x28(%rsp)
    0.00 :   177f:       mov    %r11,%rax
    0.00 :   1782:       movsd  0x10(%rsp),%xmm5
    0.00 :   1788:       mov    %r15,%r11
    0.00 :   178b:       mov    %rax,%r15
         :          for (nza = 0; nza < arow[i]; nza++)
    0.00 :   178e:       mov    0x30(%rsp),%rax
         :          scale = size * aelt[i][nza];
    0.00 :   1793:       movq   $0x1,0x18(%rsp)
         :          for (nza = 0; nza < arow[i]; nza++)
    0.00 :   179c:       mov    (%rax),%eax
    0.00 :   179e:       test   %eax,%eax
    0.00 :   17a0:       jle    192c <sparse+0x39c>
    0.00 :   17a6:       mov    0x30(%rsp),%r12
    0.00 :   17ab:       mov    0x18(%rsp),%rbx
         :          j = acol[i][nza];
    0.00 :   17b0:       mov    -0x4(%r11,%rbx,4),%edi
         :          scale = size * aelt[i][nza];
    0.00 :   17b5:       movsd  -0x8(%r15,%rbx,8),%xmm3
         :          for (nzrow = 0; nzrow < arow[i]; nzrow++)
    0.00 :   17bc:       test   %eax,%eax
         :          scale = size * aelt[i][nza];
    0.00 :   17be:       mulsd  %xmm7,%xmm3
         :          j = acol[i][nza];
    0.00 :   17c2:       mov    %edi,(%rsp)
         :          for (nzrow = 0; nzrow < arow[i]; nzrow++)
    0.00 :   17c5:       jle    1914 <sparse+0x384>
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   17cb:       mov    0x20(%rsp),%rbx
    0.00 :   17d0:       movslq %edi,%rax
         :          else if (colidx[k] == jcol)
         :          {
         :          //--------------------------------------------------------------
         :          // ... mark the duplicated entry
         :          //--------------------------------------------------------------
         :          nzloc[j] = nzloc[j] + 1;
    0.00 :   17d3:       mov    $0x1,%r10d
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   17d9:       shl    $0x2,%rax
    0.00 :   17dd:       lea    (%rbx,%rax,1),%rbp
    0.00 :   17e1:       lea    0x4(%rbx,%rax,1),%rbx
         :          nzloc[j] = nzloc[j] + 1;
    0.00 :   17e6:       add    0xa8(%rsp),%rax
    0.00 :   17ee:       cmp    0x28(%rsp),%edi
    0.00 :   17f2:       mov    %rax,0x10(%rsp)
    0.00 :   17f7:       sete   0x8(%rsp)
    0.00 :   17fc:       nopl   0x0(%rax)
         :          jcol = acol[i][nzrow];
    0.00 :   1800:       mov    -0x4(%r11,%r10,4),%esi
         :          if (jcol == j && j == i)
    0.17 :   1805:       cmp    %esi,(%rsp)
         :          va = aelt[i][nzrow] * scale;
    0.00 :   1808:       movsd  -0x8(%r15,%r10,8),%xmm1
    0.24 :   180f:       mulsd  %xmm3,%xmm1
         :          if (jcol == j && j == i)
    0.00 :   1813:       jne    1824 <sparse+0x294>
    0.48 :   1815:       cmpb   $0x0,0x8(%rsp)
    0.00 :   181a:       je     1824 <sparse+0x294>
         :          va = va + rcond - shift;
    0.00 :   181c:       addsd  %xmm4,%xmm1
    0.00 :   1820:       subsd  %xmm5,%xmm1
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.81 :   1824:       mov    0x0(%rbp),%ecx
    0.00 :   1827:       mov    (%rbx),%r9d
    0.08 :   182a:       cmp    %r9d,%ecx
    0.00 :   182d:       jge    1c35 <sparse+0x6a5>
         :          if (colidx[k] > jcol)
    0.00 :   1833:       movslq %ecx,%rdi
    0.08 :   1836:       lea    0x0(,%rdi,4),%rdx
    0.00 :   183e:       lea    0x0(%r13,%rdx,1),%r8
    4.80 :   1843:       mov    (%r8),%eax
    0.33 :   1846:       cmp    %eax,%esi
    0.00 :   1848:       jl     18a1 <sparse+0x311>
         :          else if (colidx[k] == -1)
    0.08 :   184a:       cmp    $0xffffffff,%eax
    0.00 :   184d:       je     1c08 <sparse+0x678>
         :          else if (colidx[k] == jcol)
    0.00 :   1853:       cmp    %eax,%esi
    0.00 :   1855:       je     1c20 <sparse+0x690>
    0.00 :   185b:       add    $0x1,%rdi
    0.00 :   185f:       lea    0x4(%r13,%rdx,1),%rax
    0.00 :   1864:       jmp    188c <sparse+0x2fc>
    0.00 :   1866:       nopw   %cs:0x0(%rax,%rax,1)
         :          else if (colidx[k] == -1)
    0.91 :   1870:       cmp    $0xffffffff,%edx
    0.00 :   1873:       je     1c08 <sparse+0x678>
    0.49 :   1879:       add    $0x4,%rax
         :          else if (colidx[k] == jcol)
    0.41 :   187d:       cmp    %esi,%edx
    5.34 :   187f:       lea    0x1(%rdi),%r8
    1.53 :   1883:       je     1c20 <sparse+0x690>
    0.33 :   1889:       mov    %r8,%rdi
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.25 :   188c:       add    $0x1,%ecx
    9.23 :   188f:       cmp    %r9d,%ecx
    0.00 :   1892:       je     1c35 <sparse+0x6a5>
         :          if (colidx[k] > jcol)
    5.97 :   1898:       mov    (%rax),%edx
    0.08 :   189a:       mov    %rax,%r8
    0.15 :   189d:       cmp    %esi,%edx
    4.59 :   189f:       jle    1870 <sparse+0x2e0>
         :          for (kk = rowstr[j + 1] - 2; kk >= k; kk--)
    2.45 :   18a1:       sub    $0x2,%r9d
    0.00 :   18a5:       cmp    %ecx,%r9d
    0.00 :   18a8:       jl     18e7 <sparse+0x357>
    0.00 :   18aa:       movslq %r9d,%rax
    0.00 :   18ad:       sub    %ecx,%r9d
    0.07 :   18b0:       lea    -0x1(%rax),%rdx
    0.00 :   18b4:       mov    %rdx,%rcx
    0.08 :   18b7:       sub    %r9,%rcx
    0.00 :   18ba:       mov    %rcx,%r9
    0.00 :   18bd:       jmp    18c4 <sparse+0x334>
    0.00 :   18bf:       nop
    1.85 :   18c0:       sub    $0x1,%rdx
         :          if (colidx[kk] > -1)
    4.78 :   18c4:       mov    0x0(%r13,%rax,4),%ecx
    0.81 :   18c9:       test   %ecx,%ecx
   12.13 :   18cb:       js     18df <sparse+0x34f>
         :          a[kk + 1] = a[kk];
   13.62 :   18cd:       movsd  (%r14,%rax,8),%xmm2
    2.96 :   18d3:       movsd  %xmm2,0x8(%r14,%rax,8)
         :          colidx[kk + 1] = colidx[kk];
    1.48 :   18da:       mov    %ecx,0x4(%r13,%rax,4)
         :          for (kk = rowstr[j + 1] - 2; kk >= k; kk--)
    0.57 :   18df:       cmp    %r9,%rdx
    0.74 :   18e2:       mov    %rdx,%rax
   15.35 :   18e5:       jne    18c0 <sparse+0x330>
         :          a[k] = 0.0;
    0.57 :   18e7:       lea    (%r14,%rdi,8),%rax
    0.49 :   18eb:       movapd %xmm6,%xmm2
         :          colidx[k] = jcol;
    0.33 :   18ef:       mov    %esi,(%r8)
         :          a[k] = 0.0;
    1.12 :   18f2:       movq   $0x0,(%rax)
         :          if (cont40 == false)
         :          {
         :          printf("internal error in sparse: i=%d\n", i);
         :          exit(EXIT_FAILURE);
         :          }
         :          a[k] = a[k] + va;
    0.08 :   18f9:       addsd  %xmm2,%xmm1
         :          for (nzrow = 0; nzrow < arow[i]; nzrow++)
    0.00 :   18fd:       mov    %r10d,%edx
    0.00 :   1900:       add    $0x1,%r10
         :          a[k] = a[k] + va;
    0.08 :   1904:       movsd  %xmm1,(%rax)
         :          for (nzrow = 0; nzrow < arow[i]; nzrow++)
    0.00 :   1908:       mov    (%r12),%eax
    0.00 :   190c:       cmp    %edx,%eax
    0.00 :   190e:       jg     1800 <sparse+0x270>
         :          for (nza = 0; nza < arow[i]; nza++)
    0.31 :   1914:       mov    0x18(%rsp),%rbx
    0.00 :   1919:       mov    %ebx,%edx
    0.08 :   191b:       add    $0x1,%rbx
    0.00 :   191f:       cmp    %eax,%edx
    0.08 :   1921:       mov    %rbx,0x18(%rsp)
    0.00 :   1926:       jl     17b0 <sparse+0x220>
         :          for (i = 0; i < n; i++)
    0.00 :   192c:       addl   $0x1,0x28(%rsp)
    0.00 :   1931:       addq   $0x4,0x30(%rsp)
    0.00 :   1937:       add    $0x30,%r11
    0.00 :   193b:       mov    0x28(%rsp),%eax
    0.00 :   193f:       add    $0x60,%r15
    0.00 :   1943:       cmp    %eax,0x3c(%rsp)
         :          }
         :          }
         :          size = size * ratio;
    0.00 :   1947:       mulsd  %xmm0,%xmm7
         :          for (i = 0; i < n; i++)
    0.00 :   194b:       jne    178e <sparse+0x1fe>
         :          }
         :
         :          //---------------------------------------------------------------------
         :          // ... remove empty entries and generate final results
         :          //---------------------------------------------------------------------
         :          for (j = 1; j < nrows; j++)
    0.00 :   1951:       cmpl   $0x1,0x2c(%rsp)
    0.00 :   1956:       jle    1e3c <sparse+0x8ac>
    0.00 :   195c:       mov    0x38(%rsp),%ebx
    0.00 :   1960:       mov    0xa8(%rsp),%rax
    0.00 :   1968:       lea    -0x1(%rbx),%ecx
    0.00 :   196b:       mov    0xa8(%rsp),%rbx
    0.00 :   1973:       mov    (%rax),%edx
    0.00 :   1975:       add    $0x4,%rax
    0.00 :   1979:       lea    0x8(%rbx,%rcx,4),%rcx
         :          {
         :          nzloc[j] = nzloc[j] + nzloc[j - 1];
    0.00 :   197e:       add    (%rax),%edx
    0.00 :   1980:       add    $0x4,%rax
    0.00 :   1984:       mov    %edx,-0x4(%rax)
         :          for (j = 1; j < nrows; j++)
    0.00 :   1987:       cmp    %rcx,%rax
    0.00 :   198a:       jne    197e <sparse+0x3ee>
    0.00 :   198c:       mov    0x38(%rsp),%eax
         :          for (i = 0; i < n; i++)
    0.00 :   1990:       mov    $0x1,%ebp
         :          {
         :          j1 = rowstr[j] - nzloc[j - 1];
         :          }
         :          else
         :          {
         :          j1 = 0;
    0.00 :   1995:       xor    %r12d,%r12d
    0.00 :   1998:       add    $0x1,%rax
    0.00 :   199c:       mov    %rax,0x18(%rsp)
         :          }
         :          j2 = rowstr[j + 1] - nzloc[j];
    0.00 :   19a1:       mov    0x20(%rsp),%rax
    0.00 :   19a6:       mov    0xa8(%rsp),%rbx
    0.00 :   19ae:       mov    (%rax,%rbp,4),%edx
    0.00 :   19b1:       sub    -0x4(%rbx,%rbp,4),%edx
         :          nza = rowstr[j];
         :          for (k = j1; k < j2; k++)
    0.00 :   19b5:       cmp    %edx,%r12d
    0.00 :   19b8:       jge    1bd5 <sparse+0x645>
    0.08 :   19be:       movslq %r12d,%r8
    0.00 :   19c1:       mov    %edx,%ebx
         :          nza = rowstr[j];
    0.00 :   19c3:       movslq -0x4(%rax,%rbp,4),%rcx
    0.00 :   19c8:       lea    0x20(,%r8,8),%r15
    0.00 :   19d0:       sub    %r12d,%ebx
    0.00 :   19d3:       lea    0x0(,%r8,4),%r10
    0.00 :   19db:       mov    %ebx,%esi
    0.00 :   19dd:       lea    -0x20(%r15),%rbx
    0.00 :   19e1:       lea    (%rsi,%r8,1),%r11
    0.00 :   19e5:       mov    %esi,0x10(%rsp)
    0.00 :   19e9:       lea    0x0(,%rcx,8),%rdi
    0.00 :   19f1:       mov    %rcx,%rax
    0.00 :   19f4:       lea    (%r14,%rbx,1),%r9
    0.00 :   19f8:       mov    %r11,0x8(%rsp)
    0.00 :   19fd:       lea    0x0(%r13,%r10,1),%r11
    0.00 :   1a02:       mov    %r9,(%rsp)
    0.00 :   1a06:       lea    0x0(,%rcx,4),%r9
    0.00 :   1a0e:       lea    0x10(%r9),%rsi
    0.00 :   1a12:       cmp    %rsi,%r10
    0.00 :   1a15:       lea    0x10(%r10),%rsi
    0.00 :   1a19:       setge  0x28(%rsp)
    0.00 :   1a1e:       cmp    %rsi,%r9
    0.00 :   1a21:       setge  %sil
    0.00 :   1a25:       or     0x28(%rsp),%sil
    0.00 :   1a2a:       mov    %sil,0x28(%rsp)
    0.00 :   1a2f:       lea    0x20(%rdi),%rsi
    0.00 :   1a33:       cmp    %rsi,%rbx
    0.00 :   1a36:       setge  0x38(%rsp)
    0.00 :   1a3b:       cmp    %r15,%rdi
    0.00 :   1a3e:       setge  %sil
    0.00 :   1a42:       or     0x38(%rsp),%sil
    0.00 :   1a47:       and    0x28(%rsp),%sil
    0.00 :   1a4c:       cmpl   $0xc,0x10(%rsp)
    0.00 :   1a51:       seta   %r15b
    0.00 :   1a55:       test   %r15b,%sil
    0.00 :   1a58:       je     1dc7 <sparse+0x837>
    0.00 :   1a5e:       mov    0x8(%rsp),%rsi
    0.00 :   1a63:       lea    0x0(%r13,%rsi,4),%rsi
    0.00 :   1a68:       cmp    %rsi,(%rsp)
    0.00 :   1a6c:       mov    0x8(%rsp),%rsi
    0.00 :   1a71:       lea    (%r14,%rsi,8),%rsi
    0.00 :   1a75:       setae  %r15b
    0.00 :   1a79:       cmp    %rsi,%r11
    0.00 :   1a7c:       setae  %sil
    0.00 :   1a80:       or     %sil,%r15b
    0.00 :   1a83:       je     1dc7 <sparse+0x837>
    0.00 :   1a89:       lea    (%r14,%rdi,1),%rsi
    0.00 :   1a8d:       shr    $0x3,%rsi
    0.00 :   1a91:       and    $0x1,%esi
    0.00 :   1a94:       cmp    $0x1,%esi
    0.00 :   1a97:       sbb    %r15d,%r15d
    0.00 :   1a9a:       add    $0x4,%r15d
    0.00 :   1a9e:       mov    %r15d,(%rsp)
    0.00 :   1aa2:       mov    %r12d,%r15d
    0.00 :   1aa5:       not    %r15d
    0.00 :   1aa8:       add    %edx,%r15d
    0.00 :   1aab:       cmp    %r15d,(%rsp)
    0.00 :   1aaf:       ja     1b48 <sparse+0x5b8>
    0.00 :   1ab5:       test   %esi,%esi
    0.00 :   1ab7:       je     1ad4 <sparse+0x544>
         :          {
         :          a[k] = a[nza];
    0.00 :   1ab9:       movsd  (%r14,%rdi,1),%xmm0
         :          colidx[k] = colidx[nza];
    0.08 :   1abf:       mov    0x0(%r13,%r9,1),%edi
         :          nza = nza + 1;
    0.00 :   1ac4:       add    $0x1,%eax
         :          for (k = j1; k < j2; k++)
    0.00 :   1ac7:       add    $0x1,%r12d
         :          a[k] = a[nza];
    0.00 :   1acb:       movsd  %xmm0,(%r14,%r8,8)
         :          colidx[k] = colidx[nza];
    0.00 :   1ad1:       mov    %edi,(%r11)
    0.00 :   1ad4:       mov    0x10(%rsp),%edi
    0.00 :   1ad8:       mov    %esi,%r8d
    0.00 :   1adb:       lea    (%r10,%r8,4),%r10
    0.00 :   1adf:       add    %r8,%rcx
    0.00 :   1ae2:       lea    (%r14,%rcx,8),%r11
    0.00 :   1ae6:       sub    %esi,%edi
    0.00 :   1ae8:       lea    (%rbx,%r8,8),%rsi
    0.00 :   1aec:       add    %r13,%r10
    0.00 :   1aef:       mov    %edi,%r9d
    0.00 :   1af2:       lea    0x0(%r13,%rcx,4),%rbx
         :          j1 = 0;
    0.00 :   1af7:       xor    %r8d,%r8d
    0.00 :   1afa:       shr    $0x2,%r9d
    0.00 :   1afe:       add    %r14,%rsi
    0.00 :   1b01:       xor    %ecx,%ecx
         :          a[k] = a[nza];
    0.75 :   1b03:       movapd 0x10(%r11,%rcx,2),%xmm0
    0.00 :   1b0a:       add    $0x1,%r8d
    0.00 :   1b0e:       movapd (%r11,%rcx,2),%xmm1
    0.00 :   1b14:       movups %xmm0,0x10(%rsi,%rcx,2)
    0.00 :   1b19:       movups %xmm1,(%rsi,%rcx,2)
         :          colidx[k] = colidx[nza];
    0.17 :   1b1d:       movdqu (%rbx,%rcx,1),%xmm0
    0.00 :   1b22:       movups %xmm0,(%r10,%rcx,1)
    0.00 :   1b27:       add    $0x10,%rcx
    0.00 :   1b2b:       cmp    %r8d,%r9d
    0.00 :   1b2e:       ja     1b03 <sparse+0x573>
    0.00 :   1b30:       mov    %edi,%ecx
    0.00 :   1b32:       and    $0xfffffffc,%ecx
    0.00 :   1b35:       add    %ecx,%eax
    0.00 :   1b37:       add    %ecx,%r12d
    0.00 :   1b3a:       cmp    %edi,%ecx
    0.00 :   1b3c:       je     1bd5 <sparse+0x645>
    0.00 :   1b42:       movslq %r12d,%r8
    0.00 :   1b45:       movslq %eax,%rcx
         :          a[k] = a[nza];
    0.00 :   1b48:       movsd  (%r14,%rcx,8),%xmm0
         :          colidx[k] = colidx[nza];
    0.00 :   1b4e:       mov    0x0(%r13,%rcx,4),%ecx
         :          nza = nza + 1;
    0.00 :   1b53:       lea    0x1(%rax),%esi
         :          a[k] = a[nza];
    0.00 :   1b56:       movsd  %xmm0,(%r14,%r8,8)
         :          colidx[k] = colidx[nza];
    0.00 :   1b5c:       mov    %ecx,0x0(%r13,%r8,4)
         :          for (k = j1; k < j2; k++)
    0.00 :   1b61:       lea    0x1(%r12),%ecx
    0.00 :   1b66:       cmp    %ecx,%edx
    0.00 :   1b68:       jle    1bd5 <sparse+0x645>
         :          a[k] = a[nza];
    0.00 :   1b6a:       movslq %esi,%rsi
    0.00 :   1b6d:       movslq %ecx,%rcx
    0.00 :   1b70:       movsd  (%r14,%rsi,8),%xmm0
         :          colidx[k] = colidx[nza];
    0.00 :   1b76:       mov    0x0(%r13,%rsi,4),%esi
         :          a[k] = a[nza];
    0.00 :   1b7b:       movsd  %xmm0,(%r14,%rcx,8)
         :          colidx[k] = colidx[nza];
    0.00 :   1b81:       mov    %esi,0x0(%r13,%rcx,4)
         :          for (k = j1; k < j2; k++)
    0.00 :   1b86:       lea    0x2(%r12),%ecx
         :          nza = nza + 1;
    0.00 :   1b8b:       lea    0x2(%rax),%esi
         :          for (k = j1; k < j2; k++)
    0.00 :   1b8e:       cmp    %ecx,%edx
    0.00 :   1b90:       jle    1bd5 <sparse+0x645>
         :          a[k] = a[nza];
    0.00 :   1b92:       movslq %esi,%rsi
         :          for (k = j1; k < j2; k++)
    0.00 :   1b95:       add    $0x3,%r12d
         :          a[k] = a[nza];
    0.00 :   1b99:       movslq %ecx,%rcx
    0.00 :   1b9c:       movsd  (%r14,%rsi,8),%xmm0
         :          colidx[k] = colidx[nza];
    0.00 :   1ba2:       mov    0x0(%r13,%rsi,4),%esi
         :          nza = nza + 1;
    0.00 :   1ba7:       add    $0x3,%eax
         :          for (k = j1; k < j2; k++)
    0.00 :   1baa:       cmp    %r12d,%edx
         :          a[k] = a[nza];
    0.00 :   1bad:       movsd  %xmm0,(%r14,%rcx,8)
         :          colidx[k] = colidx[nza];
    0.00 :   1bb3:       mov    %esi,0x0(%r13,%rcx,4)
         :          for (k = j1; k < j2; k++)
    0.00 :   1bb8:       jle    1bd5 <sparse+0x645>
         :          a[k] = a[nza];
    0.00 :   1bba:       cltq
    0.00 :   1bbc:       movslq %r12d,%rdx
    0.00 :   1bbf:       movsd  (%r14,%rax,8),%xmm0
         :          colidx[k] = colidx[nza];
    0.00 :   1bc5:       mov    0x0(%r13,%rax,4),%eax
         :          a[k] = a[nza];
    0.00 :   1bca:       movsd  %xmm0,(%r14,%rdx,8)
         :          colidx[k] = colidx[nza];
    0.00 :   1bd0:       mov    %eax,0x0(%r13,%rdx,4)
         :          for (j = 0; j < nrows; j++)
    0.00 :   1bd5:       cmp    0x18(%rsp),%rbp
    0.00 :   1bda:       je     1c56 <sparse+0x6c6>
    0.00 :   1bdc:       mov    0x20(%rsp),%rax
         :          if (j > 0)
    0.00 :   1be1:       test   %ebp,%ebp
    0.00 :   1be3:       mov    %ebp,%r12d
    0.00 :   1be6:       mov    (%rax,%rbp,4),%eax
    0.00 :   1be9:       je     1bfa <sparse+0x66a>
         :          j1 = rowstr[j] - nzloc[j - 1];
    0.00 :   1beb:       mov    0xa8(%rsp),%rbx
    0.00 :   1bf3:       sub    -0x4(%rbx,%rbp,4),%eax
    0.00 :   1bf7:       mov    %eax,%r12d
    0.00 :   1bfa:       add    $0x1,%rbp
    0.00 :   1bfe:       jmpq   19a1 <sparse+0x411>
    0.00 :   1c03:       nopl   0x0(%rax,%rax,1)
    0.08 :   1c08:       lea    (%r14,%rdi,8),%rax
         :          colidx[k] = jcol;
    0.00 :   1c0c:       mov    %esi,(%r8)
    0.44 :   1c0f:       movsd  (%rax),%xmm2
    0.00 :   1c13:       jmpq   18f9 <sparse+0x369>
    0.00 :   1c18:       nopl   0x0(%rax,%rax,1)
         :          nzloc[j] = nzloc[j] + 1;
    0.24 :   1c20:       mov    0x10(%rsp),%rax
    0.80 :   1c25:       addl   $0x1,(%rax)
    0.00 :   1c28:       lea    (%r14,%rdi,8),%rax
    0.32 :   1c2c:       movsd  (%rax),%xmm2
    0.00 :   1c30:       jmpq   18f9 <sparse+0x369>
         :          printf():
         :          }
         :
         :          __fortify_function int
         :          printf (const char *__restrict __fmt, ...)
         :          {
         :          return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   1c35:       mov    0x28(%rsp),%edx
    0.00 :   1c39:       lea    0x1500(%rip),%rsi        # 3140 <_IO_stdin_used+0x1b0>
    0.00 :   1c40:       mov    $0x1,%edi
    0.00 :   1c45:       xor    %eax,%eax
    0.00 :   1c47:       callq  7c0 <__printf_chk@plt>
         :          sparse():
         :          exit(EXIT_FAILURE);
    0.00 :   1c4c:       mov    $0x1,%edi
    0.00 :   1c51:       callq  7d0 <exit@plt>
    0.00 :   1c56:       mov    0x20(%rsp),%rbx
    0.00 :   1c5b:       mov    0xa8(%rsp),%rdi
    0.00 :   1c63:       lea    0x14(%rbx),%rdx
    0.00 :   1c67:       cmp    %rdx,0xa8(%rsp)
    0.00 :   1c6f:       lea    0x4(%rbx),%rax
    0.00 :   1c73:       lea    0x10(%rdi),%rdx
    0.00 :   1c77:       setae  %cl
    0.00 :   1c7a:       cmp    %rdx,%rax
    0.00 :   1c7d:       setae  %dl
    0.00 :   1c80:       or     %dl,%cl
    0.00 :   1c82:       je     1e60 <sparse+0x8d0>
    0.00 :   1c88:       cmpl   $0x8,0x2c(%rsp)
    0.00 :   1c8d:       jbe    1e60 <sparse+0x8d0>
    0.00 :   1c93:       shr    $0x2,%rax
    0.00 :   1c97:       mov    %rax,%rdx
         :          }
         :          }
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1c9a:       mov    $0x1,%eax
    0.00 :   1c9f:       neg    %rdx
    0.00 :   1ca2:       and    $0x3,%edx
    0.00 :   1ca5:       je     1ccf <sparse+0x73f>
         :          {
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1ca7:       mov    (%rdi),%eax
    0.00 :   1ca9:       sub    %eax,0x4(%rbx)
    0.00 :   1cac:       cmp    $0x1,%edx
    0.00 :   1caf:       je     1e56 <sparse+0x8c6>
    0.00 :   1cb5:       mov    0x4(%rdi),%eax
    0.00 :   1cb8:       sub    %eax,0x8(%rbx)
    0.00 :   1cbb:       cmp    $0x3,%edx
    0.00 :   1cbe:       jne    1e4c <sparse+0x8bc>
    0.00 :   1cc4:       mov    0x8(%rdi),%eax
    0.00 :   1cc7:       sub    %eax,0xc(%rbx)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1cca:       mov    $0x4,%eax
    0.00 :   1ccf:       mov    0x2c(%rsp),%ecx
    0.00 :   1cd3:       xor    %esi,%esi
    0.00 :   1cd5:       sub    %edx,%ecx
    0.00 :   1cd7:       mov    %edx,%edx
    0.00 :   1cd9:       lea    0x4(,%rdx,4),%rdx
    0.00 :   1ce1:       mov    %ecx,%r9d
    0.00 :   1ce4:       shr    $0x2,%r9d
    0.00 :   1ce8:       lea    (%rbx,%rdx,1),%rdi
    0.00 :   1cec:       mov    0xa8(%rsp),%rbx
    0.00 :   1cf4:       lea    -0x4(%rbx,%rdx,1),%r8
    0.00 :   1cf9:       xor    %edx,%edx
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1cfb:       movdqa (%rdi,%rdx,1),%xmm0
    0.00 :   1d00:       add    $0x1,%esi
    0.00 :   1d03:       movdqu (%r8,%rdx,1),%xmm7
    0.00 :   1d09:       psubd  %xmm7,%xmm0
    0.00 :   1d0d:       movaps %xmm0,(%rdi,%rdx,1)
    0.00 :   1d11:       add    $0x10,%rdx
    0.00 :   1d15:       cmp    %r9d,%esi
    0.00 :   1d18:       jb     1cfb <sparse+0x76b>
    0.00 :   1d1a:       mov    %ecx,%edx
    0.00 :   1d1c:       and    $0xfffffffc,%edx
    0.00 :   1d1f:       add    %edx,%eax
    0.00 :   1d21:       cmp    %ecx,%edx
    0.00 :   1d23:       je     1db8 <sparse+0x828>
    0.00 :   1d29:       mov    0xa8(%rsp),%rbx
    0.00 :   1d31:       movslq %eax,%rdx
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1d34:       mov    0x2c(%rsp),%edi
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1d38:       shl    $0x2,%rdx
    0.00 :   1d3c:       mov    -0x4(%rbx,%rdx,1),%ecx
    0.00 :   1d40:       mov    0x20(%rsp),%rbx
    0.00 :   1d45:       sub    %ecx,(%rbx,%rdx,1)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1d48:       lea    0x1(%rax),%edx
    0.00 :   1d4b:       cmp    %edi,%edx
    0.00 :   1d4d:       jg     1db8 <sparse+0x828>
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1d4f:       mov    0xa8(%rsp),%rsi
    0.00 :   1d57:       movslq %edx,%rdx
    0.00 :   1d5a:       shl    $0x2,%rdx
    0.00 :   1d5e:       mov    -0x4(%rsi,%rdx,1),%ecx
    0.00 :   1d62:       sub    %ecx,(%rbx,%rdx,1)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1d65:       lea    0x2(%rax),%edx
    0.00 :   1d68:       cmp    %edx,%edi
    0.00 :   1d6a:       jl     1db8 <sparse+0x828>
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1d6c:       movslq %edx,%rdx
    0.00 :   1d6f:       shl    $0x2,%rdx
    0.00 :   1d73:       mov    -0x4(%rsi,%rdx,1),%ecx
    0.00 :   1d77:       sub    %ecx,(%rbx,%rdx,1)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1d7a:       lea    0x3(%rax),%edx
    0.00 :   1d7d:       cmp    %edx,%edi
    0.00 :   1d7f:       jl     1db8 <sparse+0x828>
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1d81:       movslq %edx,%rdx
    0.00 :   1d84:       shl    $0x2,%rdx
    0.00 :   1d88:       mov    -0x4(%rsi,%rdx,1),%ecx
    0.00 :   1d8c:       sub    %ecx,(%rbx,%rdx,1)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1d8f:       lea    0x4(%rax),%edx
    0.00 :   1d92:       cmp    %edi,%edx
    0.00 :   1d94:       jg     1db8 <sparse+0x828>
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1d96:       movslq %edx,%rdx
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1d99:       add    $0x5,%eax
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1d9c:       shl    $0x2,%rdx
    0.00 :   1da0:       mov    -0x4(%rsi,%rdx,1),%ecx
    0.00 :   1da4:       sub    %ecx,(%rbx,%rdx,1)
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1da7:       cmp    %eax,%edi
    0.00 :   1da9:       jl     1db8 <sparse+0x828>
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1dab:       cltq
    0.00 :   1dad:       shl    $0x2,%rax
    0.00 :   1db1:       mov    -0x4(%rsi,%rax,1),%edx
    0.00 :   1db5:       sub    %edx,(%rbx,%rax,1)
         :          }
         :          nza = rowstr[nrows] - 1;
         :          }
    0.00 :   1db8:       add    $0x48,%rsp
    0.00 :   1dbc:       pop    %rbx
    0.00 :   1dbd:       pop    %rbp
    0.00 :   1dbe:       pop    %r12
    0.00 :   1dc0:       pop    %r13
    0.00 :   1dc2:       pop    %r14
    0.00 :   1dc4:       pop    %r15
    0.00 :   1dc6:       retq
    0.00 :   1dc7:       not    %r12d
    0.00 :   1dca:       mov    (%rsp),%rbx
    0.00 :   1dce:       add    %r14,%rdi
    0.00 :   1dd1:       lea    (%r12,%rdx,1),%eax
    0.00 :   1dd5:       add    %r13,%r9
    0.00 :   1dd8:       lea    0x4(,%rax,4),%rdx
         :          nza = rowstr[j];
    0.00 :   1de0:       xor    %eax,%eax
         :          colidx[k] = colidx[nza];
    0.00 :   1de2:       mov    (%r9,%rax,1),%ecx
         :          a[k] = a[nza];
    0.00 :   1de6:       movsd  (%rdi,%rax,2),%xmm0
    0.00 :   1deb:       movsd  %xmm0,(%rbx,%rax,2)
         :          colidx[k] = colidx[nza];
    0.00 :   1df0:       mov    %ecx,(%r11,%rax,1)
    0.00 :   1df4:       add    $0x4,%rax
         :          for (k = j1; k < j2; k++)
    0.00 :   1df8:       cmp    %rdx,%rax
    0.00 :   1dfb:       jne    1de2 <sparse+0x852>
    0.00 :   1dfd:       jmpq   1bd5 <sparse+0x645>
         :          nza = rowstr[nrows] - 1;
    0.00 :   1e02:       mov    (%rdx),%ebp
    0.00 :   1e04:       sub    $0x1,%ebp
         :          if (nza > nz)
    0.00 :   1e07:       cmp    %ebx,%ebp
    0.00 :   1e09:       jle    171d <sparse+0x18d>
         :          printf():
    0.00 :   1e0f:       lea    0x12fa(%rip),%rdi        # 3110 <_IO_stdin_used+0x180>
    0.00 :   1e16:       callq  770 <puts@plt>
    0.00 :   1e1b:       lea    0x1376(%rip),%rsi        # 3198 <_IO_stdin_used+0x208>
    0.00 :   1e22:       mov    $0x1,%edi
    0.00 :   1e27:       mov    %ebx,%ecx
    0.00 :   1e29:       mov    %ebp,%edx
    0.00 :   1e2b:       xor    %eax,%eax
    0.00 :   1e2d:       callq  7c0 <__printf_chk@plt>
         :          sparse():
         :          exit(EXIT_FAILURE);
    0.00 :   1e32:       mov    $0x1,%edi
    0.00 :   1e37:       callq  7d0 <exit@plt>
         :          for (j = 0; j < nrows; j++)
    0.00 :   1e3c:       cmpl   $0x0,0x2c(%rsp)
    0.00 :   1e41:       jle    1db8 <sparse+0x828>
    0.00 :   1e47:       jmpq   198c <sparse+0x3fc>
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1e4c:       mov    $0x3,%eax
    0.00 :   1e51:       jmpq   1ccf <sparse+0x73f>
    0.00 :   1e56:       mov    $0x2,%eax
    0.00 :   1e5b:       jmpq   1ccf <sparse+0x73f>
         :          for (j = 0; j < nrows; j++)
    0.00 :   1e60:       mov    0x20(%rsp),%rcx
    0.00 :   1e65:       mov    0xa8(%rsp),%rdi
    0.00 :   1e6d:       lea    0x0(,%rbp,4),%rax
    0.00 :   1e75:       xor    %edx,%edx
         :          rowstr[j] = rowstr[j] - nzloc[j - 1];
    0.00 :   1e77:       mov    (%rdi,%rdx,1),%esi
    0.00 :   1e7a:       sub    %esi,0x4(%rcx,%rdx,1)
    0.00 :   1e7e:       add    $0x4,%rdx
         :          for (j = 1; j < nrows + 1; j++)
    0.00 :   1e82:       cmp    %rax,%rdx
    0.00 :   1e85:       jne    1e77 <sparse+0x8e7>
    0.00 :   1e87:       jmpq   1db8 <sparse+0x828>
 Percent |	Source code & Disassembly of cg for cycles (68 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000002bf0 <randlc>:
         :          randlc():
         :          double r;
         :
         :          //--------------------------------------------------------------------
         :          //  Break A into two parts such that A = 2^23 * A1 + A2.
         :          //--------------------------------------------------------------------
         :          t1 = r23 * a;
    0.00 :   2bf0:       movsd  0x600(%rip),%xmm2        # 31f8 <_IO_stdin_used+0x268>
    1.41 :   2bf8:       movapd %xmm0,%xmm1
         :          a1 = (int) t1;
         :          a2 = a - t23 * a1;
    0.00 :   2bfc:       movsd  0x5fc(%rip),%xmm6        # 3200 <_IO_stdin_used+0x270>
         :          //--------------------------------------------------------------------
         :          //  Break X into two parts such that X = 2^23 * X1 + X2, compute
         :          //  Z = A1 * X2 + A2 * X1  (mod 2^23), and then
         :          //  X = 2^23 * Z + A2 * X2  (mod 2^46).
         :          //--------------------------------------------------------------------
         :          t1 = r23 * (*x);
    1.41 :   2c04:       movsd  (%rdi),%xmm5
         :          t1 = r23 * a;
    1.61 :   2c08:       mulsd  %xmm2,%xmm1
         :          a2 = a - t23 * a1;
    0.00 :   2c0c:       movapd %xmm0,%xmm4
         :          a1 = (int) t1;
    2.88 :   2c10:       cvttsd2si %xmm1,%eax
    0.00 :   2c14:       pxor   %xmm1,%xmm1
    1.41 :   2c18:       cvtsi2sd %eax,%xmm1
         :          a2 = a - t23 * a1;
    0.00 :   2c1c:       movapd %xmm1,%xmm3
    1.41 :   2c20:       mulsd  %xmm6,%xmm3
    0.00 :   2c24:       subsd  %xmm3,%xmm4
         :          t1 = r23 * (*x);
    0.00 :   2c28:       movapd %xmm5,%xmm3
    0.00 :   2c2c:       mulsd  %xmm2,%xmm3
         :          x1 = (int) t1;
    2.83 :   2c30:       cvttsd2si %xmm3,%eax
    0.00 :   2c34:       pxor   %xmm3,%xmm3
    2.83 :   2c38:       cvtsi2sd %eax,%xmm3
         :          x2 = *x - t23 * x1;
    0.00 :   2c3c:       movapd %xmm3,%xmm0
         :          t1 = a1 * x2 + a2 * x1;
    3.13 :   2c40:       mulsd  %xmm4,%xmm3
         :          x2 = *x - t23 * x1;
    0.00 :   2c44:       mulsd  %xmm6,%xmm0
    1.90 :   2c48:       subsd  %xmm0,%xmm5
         :          t1 = a1 * x2 + a2 * x1;
    2.10 :   2c4c:       mulsd  %xmm5,%xmm1
         :          t2 = (int) (r23 * t1);
         :          z = t1 - t23 * t2;
         :          t3 = t23 * z + a2 * x2;
    0.00 :   2c50:       mulsd  %xmm5,%xmm4
         :          t1 = a1 * x2 + a2 * x1;
    1.41 :   2c54:       addsd  %xmm3,%xmm1
         :          t2 = (int) (r23 * t1);
    5.91 :   2c58:       mulsd  %xmm1,%xmm2
    8.67 :   2c5c:       cvttsd2si %xmm2,%eax
    0.00 :   2c60:       pxor   %xmm2,%xmm2
   10.95 :   2c64:       cvtsi2sd %eax,%xmm2
         :          z = t1 - t23 * t2;
    5.64 :   2c68:       mulsd  %xmm6,%xmm2
    2.82 :   2c6c:       subsd  %xmm2,%xmm1
         :          t4 = (int) (r46 * t3);
    0.00 :   2c70:       movsd  0x590(%rip),%xmm2        # 3208 <_IO_stdin_used+0x278>
         :          t3 = t23 * z + a2 * x2;
    0.00 :   2c78:       movapd %xmm1,%xmm0
    7.58 :   2c7c:       mulsd  %xmm6,%xmm0
    8.46 :   2c80:       addsd  %xmm4,%xmm0
         :          t4 = (int) (r46 * t3);
    0.00 :   2c84:       movapd %xmm0,%xmm1
    5.77 :   2c88:       mulsd  %xmm2,%xmm1
    4.25 :   2c8c:       cvttsd2si %xmm1,%eax
    0.00 :   2c90:       pxor   %xmm1,%xmm1
    5.69 :   2c94:       cvtsi2sd %eax,%xmm1
         :          *x = t3 - t46 * t4;
    1.41 :   2c98:       mulsd  0x570(%rip),%xmm1        # 3210 <_IO_stdin_used+0x280>
    4.25 :   2ca0:       subsd  %xmm1,%xmm0
    0.00 :   2ca4:       movsd  %xmm0,(%rdi)
         :          r = r46 * (*x);
    4.27 :   2ca8:       mulsd  %xmm2,%xmm0
         :
         :          return r;
         :          }
    0.00 :   2cac:       retq
 Percent |	Source code & Disassembly of cg for cycles (13 samples, percent: local period)
----------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000001e90 <makea>:
         :          makea():
         :          int lastcol,
         :          int arow[],
         :          int acol[][NONZER + 1],
         :          double aelt[][NONZER + 1],
         :          int iv[])
         :          {
    0.00 :   1e90:       push   %r15
    0.00 :   1e92:       push   %r14
    0.00 :   1e94:       mov    %edi,%r15d
    0.00 :   1e97:       push   %r13
    0.00 :   1e99:       push   %r12
    0.00 :   1e9b:       push   %rbp
    0.00 :   1e9c:       push   %rbx
    0.00 :   1e9d:       sub    $0x138,%rsp
    0.00 :   1ea4:       mov    0x170(%rsp),%eax
    0.00 :   1eab:       mov    %esi,0x64(%rsp)
    0.00 :   1eaf:       mov    %rdx,0x68(%rsp)
    0.00 :   1eb4:       mov    %rcx,0x70(%rsp)
    0.00 :   1eb9:       mov    %r8,0x78(%rsp)
    0.00 :   1ebe:       mov    %r9d,0x80(%rsp)
    0.00 :   1ec6:       mov    %eax,0x84(%rsp)
    0.00 :   1ecd:       mov    0x188(%rsp),%rax
    0.00 :   1ed5:       mov    %rax,0x48(%rsp)
    0.00 :   1eda:       mov    0x190(%rsp),%rax
    0.00 :   1ee2:       mov    %rax,0x50(%rsp)
    0.00 :   1ee7:       mov    0x198(%rsp),%rax
    0.00 :   1eef:       mov    %rax,0x58(%rsp)
    0.00 :   1ef4:       mov    0x1a0(%rsp),%rax
    0.00 :   1efc:       mov    %rax,0x88(%rsp)
    0.00 :   1f04:       mov    %fs:0x28,%rax
    0.00 :   1f0d:       mov    %rax,0x128(%rsp)
    0.00 :   1f15:       xor    %eax,%eax
         :          //---------------------------------------------------------------------
         :
         :          //---------------------------------------------------------------------
         :          // nn1 is the smallest power of two not less than n
         :          //---------------------------------------------------------------------
         :          nn1 = 1;
    0.00 :   1f17:       mov    $0x1,%eax
    0.00 :   1f1c:       nopl   0x0(%rax)
         :          do
         :          {
         :          nn1 = 2 * nn1;
    0.00 :   1f20:       add    %eax,%eax
         :          } while (nn1 < n);
    0.00 :   1f22:       cmp    %r15d,%eax
    0.00 :   1f25:       jl     1f20 <makea+0x90>
         :
         :          //---------------------------------------------------------------------
         :          // Generate nonzero positions and save for the use in sparse.
         :          //---------------------------------------------------------------------
         :          for (iouter = 0; iouter < n; iouter++)
    0.00 :   1f27:       test   %r15d,%r15d
    0.00 :   1f2a:       jle    235d <makea+0x4cd>
    0.00 :   1f30:       pxor   %xmm6,%xmm6
    0.00 :   1f34:       mov    0x48(%rsp),%rsi
    0.00 :   1f39:       mov    0x50(%rsp),%rbp
         :          vecset():
         :          set = false;
         :          for (k = 0; k < *nzv; k++)
         :          {
         :          if (iv[k] == i)
         :          {
         :          v[k] = val;
    0.00 :   1f3e:       movsd  0x128a(%rip),%xmm7        # 31d0 <_IO_stdin_used+0x240>
    0.00 :   1f46:       mov    0x58(%rsp),%r12
         :          sprnvc():
         :          vecelt = randlc(&tran, amult);
    0.00 :   1f4b:       lea    0x21dabe(%rip),%r14        # 21fa10 <tran>
         :          makea():
         :          for (iouter = 0; iouter < n; iouter++)
    0.00 :   1f52:       xor    %r13d,%r13d
    0.00 :   1f55:       cvtsi2sd %eax,%xmm6
    0.00 :   1f59:       mov    %rsi,0x18(%rsp)
         :          vecset():
         :          v[k] = val;
    0.00 :   1f5e:       movsd  %xmm7,0x30(%rsp)
    0.00 :   1f64:       movsd  %xmm7,0x38(%rsp)
    0.00 :   1f6a:       movsd  %xmm7,0x40(%rsp)
    0.00 :   1f70:       movsd  %xmm6,0x10(%rsp)
    0.00 :   1f76:       nopw   %cs:0x0(%rax,%rax,1)
         :          sprnvc():
         :          nzv = 0;
    0.00 :   1f80:       xor    %ebx,%ebx
    0.00 :   1f82:       nopw   0x0(%rax,%rax,1)
         :          vecelt = randlc(&tran, amult);
    7.09 :   1f88:       movsd  0x20ff98(%rip),%xmm0        # 211f28 <amult>
    0.00 :   1f90:       mov    %r14,%rdi
    0.00 :   1f93:       callq  2bf0 <randlc>
    0.00 :   1f98:       movsd  %xmm0,0x8(%rsp)
         :          vecloc = randlc(&tran, amult);
    0.00 :   1f9e:       mov    %r14,%rdi
    0.00 :   1fa1:       movsd  0x20ff7f(%rip),%xmm0        # 211f28 <amult>
    0.00 :   1fa9:       callq  2bf0 <randlc>
         :          icnvrt():
         :          return (int)(ipwr2 * x);
    9.23 :   1fae:       mulsd  0x10(%rsp),%xmm0
   26.72 :   1fb4:       cvttsd2si %xmm0,%eax
         :          sprnvc():
         :          i = icnvrt(vecloc, nn1) + 1;
    7.09 :   1fb8:       add    $0x1,%eax
         :          if (i > n)
    7.19 :   1fbb:       cmp    %eax,%r15d
    0.00 :   1fbe:       jl     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    7.18 :   1fc4:       test   %ebx,%ebx
    0.00 :   1fc6:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    7.09 :   1fcc:       cmp    0x90(%rsp),%eax
    0.00 :   1fd3:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   1fd9:       cmp    $0x1,%ebx
    0.00 :   1fdc:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   1fe2:       cmp    0x94(%rsp),%eax
    0.00 :   1fe9:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   1fef:       cmp    $0x2,%ebx
    0.00 :   1ff2:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   1ff4:       cmp    0x98(%rsp),%eax
    0.00 :   1ffb:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   2001:       cmp    $0x3,%ebx
    0.00 :   2004:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   2006:       cmp    0x9c(%rsp),%eax
    0.00 :   200d:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   200f:       cmp    $0x4,%ebx
    0.00 :   2012:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    7.10 :   2014:       cmp    0xa0(%rsp),%eax
    0.00 :   201b:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   201d:       cmp    $0x5,%ebx
    0.00 :   2020:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   2022:       cmp    0xa4(%rsp),%eax
    0.00 :   2029:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   202b:       cmp    $0x6,%ebx
    0.00 :   202e:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   2030:       cmp    0xa8(%rsp),%eax
    0.00 :   2037:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   2039:       cmp    $0x7,%ebx
    0.00 :   203c:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
   14.20 :   203e:       cmp    0xac(%rsp),%eax
    0.00 :   2045:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   2047:       cmp    $0x8,%ebx
    0.00 :   204a:       je     2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   204c:       cmp    0xb0(%rsp),%eax
    0.00 :   2053:       je     2083 <makea+0x1f3>
         :          for (ii = 0; ii < nzv; ii++)
    0.00 :   2055:       cmp    $0xa,%ebx
    0.00 :   2058:       jne    2067 <makea+0x1d7>
         :          if (iv[ii] == i)
    0.00 :   205a:       cmp    0xb4(%rsp),%eax
    0.00 :   2061:       je     1f88 <makea+0xf8>
         :          v[nzv] = vecelt;
    0.00 :   2067:       movsd  0x8(%rsp),%xmm5
    0.00 :   206d:       movslq %ebx,%rdx
         :          nzv = nzv + 1;
    0.00 :   2070:       add    $0x1,%ebx
         :          iv[nzv] = i;
    0.00 :   2073:       mov    %eax,0x90(%rsp,%rdx,4)
         :          v[nzv] = vecelt;
    0.00 :   207a:       movsd  %xmm5,0xc0(%rsp,%rdx,8)
         :          while (nzv < nz)
    0.00 :   2083:       cmp    $0xb,%ebx
    0.00 :   2086:       jne    1f88 <makea+0xf8>
         :          vecset():
         :          if (iv[k] == i)
    0.00 :   208c:       mov    0x90(%rsp),%r8d
         :          makea():
         :          vecset(n, vc, ivc, &nzv, iouter + 1, 0.5);
    0.00 :   2094:       lea    0x1(%r13),%eax
         :          vecset():
         :          set = false;
    0.00 :   2098:       xor    %r9d,%r9d
         :          if (iv[k] == i)
    0.00 :   209b:       cmp    %r8d,%eax
    0.00 :   209e:       jne    20b5 <makea+0x225>
         :          v[k] = val;
    0.00 :   20a0:       movsd  0x30(%rsp),%xmm6
         :          set = true;
    0.00 :   20a6:       mov    $0x1,%r9d
         :          v[k] = val;
    0.00 :   20ac:       movsd  %xmm6,0xc0(%rsp)
         :          if (iv[k] == i)
    0.00 :   20b5:       mov    0x94(%rsp),%edi
    0.00 :   20bc:       cmp    %edi,%eax
    0.00 :   20be:       jne    20d5 <makea+0x245>
         :          v[k] = val;
    0.00 :   20c0:       movsd  0x38(%rsp),%xmm7
         :          set = true;
    0.00 :   20c6:       mov    $0x1,%r9d
         :          v[k] = val;
    0.00 :   20cc:       movsd  %xmm7,0xc8(%rsp)
         :          if (iv[k] == i)
    0.00 :   20d5:       mov    0x98(%rsp),%esi
    0.00 :   20dc:       cmp    %esi,%eax
    0.00 :   20de:       jne    20f5 <makea+0x265>
         :          v[k] = val;
    0.00 :   20e0:       movsd  0x40(%rsp),%xmm6
         :          set = true;
    0.00 :   20e6:       mov    $0x1,%r9d
         :          v[k] = val;
    0.00 :   20ec:       movsd  %xmm6,0xd0(%rsp)
         :          if (iv[k] == i)
    0.00 :   20f5:       mov    0x9c(%rsp),%ecx
    0.00 :   20fc:       cmp    %ecx,%eax
    0.00 :   20fe:       jne    2115 <makea+0x285>
         :          v[k] = val;
    0.00 :   2100:       mov    0x10c9(%rip),%rdx        # 31d0 <_IO_stdin_used+0x240>
         :          set = true;
    0.00 :   2107:       mov    $0x1,%r9d
         :          v[k] = val;
    0.00 :   210d:       mov    %rdx,0xd8(%rsp)
         :          if (iv[k] == i)
    0.00 :   2115:       mov    0xa0(%rsp),%edx
    0.00 :   211c:       cmp    %edx,%eax
    0.00 :   211e:       jne    2135 <makea+0x2a5>
         :          v[k] = val;
    0.00 :   2120:       mov    0x10a9(%rip),%r9        # 31d0 <_IO_stdin_used+0x240>
    0.00 :   2127:       mov    %r9,0xe0(%rsp)
         :          set = true;
    0.00 :   212f:       mov    $0x1,%r9d
         :          if (iv[k] == i)
    0.00 :   2135:       mov    0xa4(%rsp),%r11d
    0.00 :   213d:       cmp    %r11d,%eax
    0.00 :   2140:       mov    %r11d,0x24(%rsp)
    0.00 :   2145:       jne    215c <makea+0x2cc>
         :          v[k] = val;
    0.00 :   2147:       mov    0x1082(%rip),%r9        # 31d0 <_IO_stdin_used+0x240>
    0.00 :   214e:       mov    %r9,0xe8(%rsp)
         :          set = true;
    0.00 :   2156:       mov    $0x1,%r9d
         :          if (iv[k] == i)
    0.00 :   215c:       mov    0xa8(%rsp),%r10d
    0.00 :   2164:       cmp    %r10d,%eax
    0.00 :   2167:       mov    %r10d,0x28(%rsp)
    0.00 :   216c:       jne    2183 <makea+0x2f3>
         :          v[k] = val;
    0.00 :   216e:       mov    0x105b(%rip),%r9        # 31d0 <_IO_stdin_used+0x240>
    0.00 :   2175:       mov    %r9,0xf0(%rsp)
         :          set = true;
    0.00 :   217d:       mov    $0x1,%r9d
         :          if (iv[k] == i)
    0.00 :   2183:       mov    0xac(%rsp),%r11d
    0.00 :   218b:       cmp    %r11d,%eax
    0.00 :   218e:       mov    %r11d,0x2c(%rsp)
    0.00 :   2193:       jne    21aa <makea+0x31a>
         :          v[k] = val;
    0.00 :   2195:       mov    0x1034(%rip),%r9        # 31d0 <_IO_stdin_used+0x240>
    0.00 :   219c:       mov    %r9,0xf8(%rsp)
         :          set = true;
    0.00 :   21a4:       mov    $0x1,%r9d
         :          if (iv[k] == i)
    0.00 :   21aa:       mov    0xb0(%rsp),%r10d
    0.00 :   21b2:       mov    0xb4(%rsp),%r11d
    0.00 :   21ba:       mov    %r10d,0x8(%rsp)
    0.00 :   21bf:       cmp    0x8(%rsp),%eax
    0.00 :   21c3:       mov    0xb8(%rsp),%r10d
    0.00 :   21cb:       je     2410 <makea+0x580>
    0.00 :   21d1:       lea    -0x1(%r11),%r13d
    0.00 :   21d5:       cmp    %r11d,%eax
    0.00 :   21d8:       mov    %r13d,0x60(%rsp)
    0.00 :   21dd:       lea    -0x1(%r10),%r13d
    0.00 :   21e1:       je     2470 <makea+0x5e0>
    0.00 :   21e7:       cmp    %r10d,%eax
    0.00 :   21ea:       je     24a0 <makea+0x610>
         :          }
         :          }
         :          if (set == false)
    0.00 :   21f0:       test   %r9d,%r9d
    0.00 :   21f3:       jne    24fe <makea+0x66e>
         :          {
         :          v[*nzv] = val;
    0.00 :   21f9:       mov    0xfd0(%rip),%rbx        # 31d0 <_IO_stdin_used+0x240>
    0.00 :   2200:       movsd  0x100(%rsp),%xmm3
    0.00 :   2209:       movsd  0x108(%rsp),%xmm2
         :          iv[*nzv] = i;
    0.00 :   2212:       mov    %eax,0xbc(%rsp)
    0.00 :   2219:       movsd  0x110(%rsp),%xmm1
         :          v[*nzv] = val;
    0.00 :   2222:       mov    %rbx,0x118(%rsp)
         :          makea():
         :          arow[iouter] = nzv;
    0.00 :   222a:       mov    0x18(%rsp),%rbx
    0.00 :   222f:       movl   $0xc,(%rbx)
         :          vecset():
         :          *nzv = *nzv + 1;
    0.00 :   2235:       mov    $0xc,%ebx
         :          makea():
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   223a:       movsd  0xc0(%rsp),%xmm0
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2243:       sub    $0x1,%r8d
    0.00 :   2247:       sub    $0x1,%edi
    0.00 :   224a:       mov    %r8d,0x0(%rbp)
    0.00 :   224e:       sub    $0x1,%esi
    0.00 :   2251:       sub    $0x1,%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   2254:       movsd  %xmm0,(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   225a:       mov    %edi,0x4(%rbp)
    0.00 :   225d:       sub    $0x1,%ecx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   2260:       movsd  0xc8(%rsp),%xmm0
    0.00 :   2269:       movsd  %xmm0,0x8(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2270:       mov    %esi,0x8(%rbp)
    0.00 :   2273:       mov    0x60(%rsp),%esi
         :          aelt[iouter][ivelt] = vc[ivelt];
    7.10 :   2277:       movsd  0xd0(%rsp),%xmm0
    0.00 :   2280:       movsd  %xmm0,0x10(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2287:       mov    %ecx,0xc(%rbp)
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   228a:       movsd  0xd8(%rsp),%xmm0
    0.00 :   2293:       movsd  %xmm0,0x18(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   229a:       mov    %edx,0x10(%rbp)
    0.00 :   229d:       mov    0x24(%rsp),%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22a1:       movsd  0xe0(%rsp),%xmm0
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22aa:       sub    $0x1,%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22ad:       movsd  %xmm0,0x20(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22b4:       mov    %edx,0x14(%rbp)
    0.00 :   22b7:       mov    0x28(%rsp),%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22bb:       movsd  0xe8(%rsp),%xmm0
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22c4:       sub    $0x1,%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22c7:       movsd  %xmm0,0x28(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22ce:       mov    %edx,0x18(%rbp)
    0.00 :   22d1:       mov    0x2c(%rsp),%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22d5:       movsd  0xf0(%rsp),%xmm0
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22de:       sub    $0x1,%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22e1:       movsd  %xmm0,0x30(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22e8:       mov    %edx,0x1c(%rbp)
    0.00 :   22eb:       mov    0x8(%rsp),%edx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22ef:       movsd  0xf8(%rsp),%xmm0
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   22f8:       sub    $0x1,%edx
         :          for (ivelt = 0; ivelt < nzv; ivelt++)
    0.00 :   22fb:       cmp    $0xc,%ebx
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   22fe:       movsd  %xmm0,0x38(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2305:       mov    %edx,0x20(%rbp)
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   2308:       movsd  %xmm3,0x40(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   230f:       mov    %esi,0x24(%rbp)
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   2312:       movsd  %xmm2,0x48(%r12)
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2319:       mov    %r13d,0x28(%rbp)
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   231d:       movsd  %xmm1,0x50(%r12)
         :          for (ivelt = 0; ivelt < nzv; ivelt++)
    0.00 :   2324:       jne    2343 <makea+0x4b3>
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2326:       mov    0xbc(%rsp),%esi
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   232d:       movsd  0x118(%rsp),%xmm0
         :          acol[iouter][ivelt] = ivc[ivelt] - 1;
    0.00 :   2336:       lea    -0x1(%rsi),%edx
    0.00 :   2339:       mov    %edx,0x2c(%rbp)
         :          aelt[iouter][ivelt] = vc[ivelt];
    0.00 :   233c:       movsd  %xmm0,0x58(%r12)
    0.00 :   2343:       add    $0x30,%rbp
    0.00 :   2347:       add    $0x60,%r12
    0.00 :   234b:       addq   $0x4,0x18(%rsp)
         :          for (iouter = 0; iouter < n; iouter++)
    0.00 :   2351:       cmp    %r15d,%eax
    0.00 :   2354:       mov    %eax,%r13d
    0.00 :   2357:       jne    1f80 <makea+0xf0>
         :          sparse(a, colidx, rowstr, n, nz, NONZER, arow, acol,
    0.00 :   235d:       mov    0x128(%rsp),%rax
    0.00 :   2365:       xor    %fs:0x28,%rax
    0.00 :   236e:       jne    251e <makea+0x68e>
    0.00 :   2374:       mov    0x88(%rsp),%rax
    0.00 :   237c:       movsd  0xe54(%rip),%xmm1        # 31d8 <_IO_stdin_used+0x248>
    0.00 :   2384:       movsd  0xe54(%rip),%xmm0        # 31e0 <_IO_stdin_used+0x250>
    0.00 :   238c:       mov    0x64(%rsp),%r8d
    0.00 :   2391:       mov    0x78(%rsp),%rdx
    0.00 :   2396:       mov    0x70(%rsp),%rsi
    0.00 :   239b:       mov    %r15d,%ecx
    0.00 :   239e:       mov    %rax,0x198(%rsp)
    0.00 :   23a6:       mov    0x84(%rsp),%eax
    0.00 :   23ad:       mov    $0xb,%r9d
    0.00 :   23b3:       mov    0x68(%rsp),%rdi
    0.00 :   23b8:       mov    %eax,0x190(%rsp)
    0.00 :   23bf:       mov    0x80(%rsp),%eax
    0.00 :   23c6:       mov    %eax,0x188(%rsp)
    0.00 :   23cd:       mov    0x58(%rsp),%rax
    0.00 :   23d2:       mov    %rax,0x180(%rsp)
    0.00 :   23da:       mov    0x50(%rsp),%rax
    0.00 :   23df:       mov    %rax,0x178(%rsp)
    0.00 :   23e7:       mov    0x48(%rsp),%rax
    0.00 :   23ec:       mov    %rax,0x170(%rsp)
         :          }
    0.00 :   23f4:       add    $0x138,%rsp
    0.00 :   23fb:       pop    %rbx
    0.00 :   23fc:       pop    %rbp
    0.00 :   23fd:       pop    %r12
    0.00 :   23ff:       pop    %r13
    0.00 :   2401:       pop    %r14
    0.00 :   2403:       pop    %r15
         :          sparse(a, colidx, rowstr, n, nz, NONZER, arow, acol,
    0.00 :   2405:       jmpq   1590 <sparse>
    0.00 :   240a:       nopw   0x0(%rax,%rax,1)
         :          vecset():
         :          v[k] = val;
    0.00 :   2410:       movsd  0xdb8(%rip),%xmm0        # 31d0 <_IO_stdin_used+0x240>
         :          if (iv[k] == i)
    0.00 :   2418:       cmp    %r11d,%eax
         :          v[k] = val;
    0.00 :   241b:       movsd  %xmm0,0x100(%rsp)
         :          if (iv[k] == i)
    0.00 :   2424:       je     24d0 <makea+0x640>
    0.00 :   242a:       lea    -0x1(%r11),%r9d
    0.00 :   242e:       cmp    %r10d,%eax
    0.00 :   2431:       movsd  0x108(%rsp),%xmm2
    0.00 :   243a:       mov    %r9d,0x60(%rsp)
    0.00 :   243f:       je     24f8 <makea+0x668>
    0.00 :   2445:       movsd  0x110(%rsp),%xmm1
    0.00 :   244e:       lea    -0x1(%r10),%r13d
    0.00 :   2452:       movapd %xmm0,%xmm3
         :          makea():
         :          arow[iouter] = nzv;
    0.00 :   2456:       mov    0x18(%rsp),%r9
    0.00 :   245b:       movl   $0xb,(%r9)
    0.00 :   2462:       jmpq   223a <makea+0x3aa>
    0.00 :   2467:       nopw   0x0(%rax,%rax,1)
    0.00 :   2470:       movsd  0xd58(%rip),%xmm0        # 31d0 <_IO_stdin_used+0x240>
         :          vecset():
         :          if (iv[k] == i)
    0.00 :   2478:       cmp    %r10d,%eax
    0.00 :   247b:       movsd  0x100(%rsp),%xmm3
         :          v[k] = val;
    0.00 :   2484:       movsd  %xmm0,0x108(%rsp)
         :          if (iv[k] == i)
    0.00 :   248d:       je     24eb <makea+0x65b>
    0.00 :   248f:       movsd  0x110(%rsp),%xmm1
    0.00 :   2498:       movapd %xmm0,%xmm2
    0.00 :   249c:       jmp    2456 <makea+0x5c6>
    0.00 :   249e:       xchg   %ax,%ax
    0.00 :   24a0:       movsd  0x100(%rsp),%xmm3
    0.00 :   24a9:       movsd  0x108(%rsp),%xmm2
    0.00 :   24b2:       movsd  0xd16(%rip),%xmm0        # 31d0 <_IO_stdin_used+0x240>
         :          v[k] = val;
    0.00 :   24ba:       movsd  %xmm0,0x110(%rsp)
    0.00 :   24c3:       movapd %xmm0,%xmm1
    0.00 :   24c7:       jmp    2456 <makea+0x5c6>
    0.00 :   24c9:       nopl   0x0(%rax)
         :          if (iv[k] == i)
    0.00 :   24d0:       cmp    %r10d,%eax
    0.00 :   24d3:       mov    %r13d,0x60(%rsp)
         :          v[k] = val;
    0.00 :   24d8:       movsd  %xmm0,0x108(%rsp)
         :          if (iv[k] == i)
    0.00 :   24e1:       lea    -0x1(%r10),%r13d
    0.00 :   24e5:       movapd %xmm0,%xmm3
    0.00 :   24e9:       jne    248f <makea+0x5ff>
    0.00 :   24eb:       movapd %xmm0,%xmm2
    0.00 :   24ef:       jmp    24ba <makea+0x62a>
    0.00 :   24f1:       nopl   0x0(%rax)
    0.00 :   24f8:       movapd %xmm0,%xmm3
    0.00 :   24fc:       jmp    24ba <makea+0x62a>
    0.00 :   24fe:       movsd  0x100(%rsp),%xmm3
    0.00 :   2507:       movsd  0x108(%rsp),%xmm2
    0.00 :   2510:       movsd  0x110(%rsp),%xmm1
    0.00 :   2519:       jmpq   2456 <makea+0x5c6>
         :          makea():
         :          sparse(a, colidx, rowstr, n, nz, NONZER, arow, acol,
    0.00 :   251e:       callq  780 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of cg for cycles (5 samples, percent: local period)
---------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000002680 <init>:
         :          init():
         :          *nzv = *nzv + 1;
         :          }
         :          }
         :
         :          void init(double *zeta)
         :          {
    0.00 :   2680:       push   %r14
    0.00 :   2682:       push   %r13
         :          *zeta = randlc(&tran, amult);
         :
         :          //---------------------------------------------------------------------
         :          //
         :          //---------------------------------------------------------------------
         :          makea(naa, nzz, a, colidx, rowstr,
    0.00 :   2684:       movabs $0x96c08,%r13
         :          {
    0.00 :   268e:       push   %r12
    0.00 :   2690:       push   %rbp
    0.00 :   2691:       mov    %rdi,%rbp
    0.00 :   2694:       push   %rbx
         :          *zeta = randlc(&tran, amult);
    0.00 :   2695:       lea    0x21d374(%rip),%rdi        # 21fa10 <tran>
    0.00 :   269c:       lea    0x2018d5(%rip),%rbx        # 203f78 <_GLOBAL_OFFSET_TABLE_>
         :          //      Shift the col index vals from actual (firstcol --> lastcol )
         :          //      to local, i.e., (0 --> lastcol-firstcol)
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
         :          {
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   26a3:       lea    0x20f896(%rip),%r12        # 211f40 <rowstr>
         :          {
    0.00 :   26aa:       sub    $0x10,%rsp
         :          tran = 314159265.0;
    0.00 :   26ae:       mov    0xb33(%rip),%rax        # 31e8 <_IO_stdin_used+0x258>
         :          firstrow = 0;
    0.00 :   26b5:       movl   $0x0,0x201d81(%rip)        # 204440 <firstrow>
         :          amult = 1220703125.0;
    0.00 :   26bf:       movsd  0xb29(%rip),%xmm0        # 31f0 <_IO_stdin_used+0x260>
         :          lastrow = NA - 1;
    0.00 :   26c7:       movl   $0x36af,0x22ae0f(%rip)        # 22d4e0 <lastrow>
         :          firstcol = 0;
    0.00 :   26d1:       movl   $0x0,0x20f845(%rip)        # 211f20 <firstcol>
         :          lastcol = NA - 1;
    0.00 :   26db:       movl   $0x36af,0x21d333(%rip)        # 21fa18 <lastcol>
         :          tran = 314159265.0;
    0.00 :   26e5:       mov    %rax,0x21d324(%rip)        # 21fa10 <tran>
         :          naa = NA;
    0.00 :   26ec:       movl   $0x36b0,0x21d312(%rip)        # 21fa08 <naa>
         :          amult = 1220703125.0;
    0.00 :   26f6:       movsd  %xmm0,0x20f82a(%rip)        # 211f28 <amult>
         :          nzz = NZ;
    0.00 :   26fe:       movl   $0x1ec300,0x21d304(%rip)        # 21fa0c <nzz>
         :          *zeta = randlc(&tran, amult);
    0.00 :   2708:       callq  2bf0 <randlc>
         :          makea(naa, nzz, a, colidx, rowstr,
    0.00 :   270d:       lea    0x21d30c(%rip),%rax        # 21fa20 <iv>
    0.00 :   2714:       sub    $0x8,%rsp
         :          *zeta = randlc(&tran, amult);
    0.00 :   2718:       movsd  %xmm0,0x0(%rbp)
         :          makea(naa, nzz, a, colidx, rowstr,
    0.00 :   271d:       mov    0x21d2e5(%rip),%edi        # 21fa08 <naa>
    0.00 :   2723:       mov    0x201d16(%rip),%r9d        # 204440 <firstrow>
    0.00 :   272a:       lea    0x20f80f(%rip),%r8        # 211f40 <rowstr>
    0.00 :   2731:       push   %rax
    0.00 :   2732:       movabs $0x18686a8,%rax
    0.00 :   273c:       lea    0x0(%r13,%rbx,1),%rcx
    0.00 :   2741:       add    %rbx,%rax
    0.00 :   2744:       mov    0x21d2c2(%rip),%esi        # 21fa0c <nzz>
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   274a:       lea    0x4(%r12),%rbp
         :          makea(naa, nzz, a, colidx, rowstr,
    0.00 :   274f:       push   %rax
    0.00 :   2750:       movabs $0x17c45a8,%rax
    0.00 :   275a:       add    %rbx,%rax
    0.00 :   275d:       push   %rax
    0.00 :   275e:       lea    0x201cfb(%rip),%rax        # 204460 <arow>
    0.00 :   2765:       push   %rax
    0.00 :   2766:       mov    0x21d2ac(%rip),%eax        # 21fa18 <lastcol>
    0.00 :   276c:       push   %rax
    0.00 :   276d:       mov    0x20f7ad(%rip),%eax        # 211f20 <firstcol>
    0.00 :   2773:       push   %rax
    0.00 :   2774:       mov    0x22ad66(%rip),%eax        # 22d4e0 <lastrow>
    0.00 :   277a:       push   %rax
    0.00 :   277b:       movabs $0x847808,%rax
    0.00 :   2785:       lea    (%rbx,%rax,1),%rdx
    0.00 :   2789:       callq  1e90 <makea>
         :          {
         :          colidx[k] = colidx[k] - firstcol;
   20.12 :   278e:       mov    0x20f78c(%rip),%edx        # 211f20 <firstcol>
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   2794:       mov    0x22ad45(%rip),%r11d        # 22d4e0 <lastrow>
    0.00 :   279b:       add    $0x40,%rsp
    0.00 :   279f:       sub    0x201c9a(%rip),%r11d        # 204440 <firstrow>
    0.00 :   27a6:       xor    %r10d,%r10d
    0.00 :   27a9:       lea    0x0(%r13,%rbx,1),%rdi
    0.00 :   27ae:       mov    %edx,0xc(%rsp)
    0.00 :   27b2:       movd   0xc(%rsp),%xmm2
    0.00 :   27b8:       cmp    %r10d,%r11d
    0.00 :   27bb:       pshufd $0x0,%xmm2,%xmm1
    0.00 :   27c0:       jl     28cc <init+0x24c>
    0.00 :   27c6:       nopw   %cs:0x0(%rax,%rax,1)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   27d0:       mov    (%r12,%r10,4),%esi
    0.00 :   27d4:       mov    0x0(%rbp,%r10,4),%r8d
    0.00 :   27d9:       cmp    %r8d,%esi
    0.00 :   27dc:       jge    28bf <init+0x23f>
    0.00 :   27e2:       movslq %esi,%rcx
    0.00 :   27e5:       lea    -0x1(%r8),%r9d
    0.00 :   27e9:       mov    %r8d,%r14d
    0.00 :   27ec:       lea    (%rdi,%rcx,4),%rax
    0.00 :   27f0:       sub    %esi,%r14d
    0.00 :   27f3:       sub    %esi,%r9d
    0.00 :   27f6:       shr    $0x2,%rax
    0.00 :   27fa:       neg    %rax
    0.00 :   27fd:       and    $0x3,%eax
    0.00 :   2800:       lea    0x3(%rax),%r13d
    0.00 :   2804:       cmp    %r13d,%r9d
    0.00 :   2807:       jb     287b <init+0x1fb>
    0.00 :   2809:       test   %eax,%eax
    0.00 :   280b:       mov    %esi,%r9d
    0.00 :   280e:       je     2837 <init+0x1b7>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   2810:       sub    %edx,(%rdi,%rcx,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   2813:       add    $0x1,%r9d
    0.00 :   2817:       cmp    $0x1,%eax
    0.00 :   281a:       je     2837 <init+0x1b7>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   281c:       movslq %r9d,%r9
    0.00 :   281f:       sub    %edx,(%rdi,%r9,4)
    0.00 :   2823:       cmp    $0x3,%eax
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   2826:       lea    0x2(%rsi),%r9d
    0.00 :   282a:       jne    2837 <init+0x1b7>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   282c:       movslq %r9d,%r9
    0.00 :   282f:       sub    %edx,(%rdi,%r9,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   2833:       lea    0x3(%rsi),%r9d
    0.00 :   2837:       sub    %eax,%r14d
    0.00 :   283a:       add    %rcx,%rax
    0.00 :   283d:       xor    %ecx,%ecx
    0.00 :   283f:       mov    %r14d,%r13d
    0.00 :   2842:       lea    (%rdi,%rax,4),%rsi
    0.00 :   2846:       xor    %eax,%eax
    0.00 :   2848:       shr    $0x2,%r13d
    0.00 :   284c:       nopl   0x0(%rax)
   19.86 :   2850:       add    $0x1,%ecx
         :          colidx[k] = colidx[k] - firstcol;
   39.90 :   2853:       movdqa (%rsi,%rax,1),%xmm0
   20.12 :   2858:       psubd  %xmm1,%xmm0
    0.00 :   285c:       movaps %xmm0,(%rsi,%rax,1)
    0.00 :   2860:       add    $0x10,%rax
    0.00 :   2864:       cmp    %ecx,%r13d
    0.00 :   2867:       ja     2850 <init+0x1d0>
    0.00 :   2869:       mov    %r14d,%eax
    0.00 :   286c:       and    $0xfffffffc,%eax
    0.00 :   286f:       cmp    %eax,%r14d
    0.00 :   2872:       lea    (%rax,%r9,1),%esi
    0.00 :   2876:       je     28bf <init+0x23f>
    0.00 :   2878:       movslq %esi,%rcx
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   287b:       lea    0x1(%rsi),%eax
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   287e:       sub    %edx,(%rdi,%rcx,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   2881:       cmp    %eax,%r8d
    0.00 :   2884:       jle    28bf <init+0x23f>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   2886:       cltq
    0.00 :   2888:       sub    %edx,(%rdi,%rax,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   288b:       lea    0x2(%rsi),%eax
    0.00 :   288e:       cmp    %r8d,%eax
    0.00 :   2891:       jge    28bf <init+0x23f>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   2893:       cltq
    0.00 :   2895:       sub    %edx,(%rdi,%rax,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   2898:       lea    0x3(%rsi),%eax
    0.00 :   289b:       cmp    %eax,%r8d
    0.00 :   289e:       jle    28bf <init+0x23f>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   28a0:       cltq
    0.00 :   28a2:       sub    %edx,(%rdi,%rax,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   28a5:       lea    0x4(%rsi),%eax
    0.00 :   28a8:       cmp    %eax,%r8d
    0.00 :   28ab:       jle    28bf <init+0x23f>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   28ad:       cltq
    0.00 :   28af:       sub    %edx,(%rdi,%rax,4)
         :          for (k = rowstr[j]; k < rowstr[j + 1]; k++)
    0.00 :   28b2:       lea    0x5(%rsi),%eax
    0.00 :   28b5:       cmp    %eax,%r8d
    0.00 :   28b8:       jle    28bf <init+0x23f>
         :          colidx[k] = colidx[k] - firstcol;
    0.00 :   28ba:       cltq
    0.00 :   28bc:       sub    %edx,(%rdi,%rax,4)
    0.00 :   28bf:       add    $0x1,%r10
         :          for (j = 0; j < lastrow - firstrow + 1; j++)
    0.00 :   28c3:       cmp    %r10d,%r11d
    0.00 :   28c6:       jge    27d0 <init+0x150>
    0.00 :   28cc:       movabs $0x7b668,%rcx
    0.00 :   28d6:       lea    (%rcx,%rbx,1),%rax
    0.00 :   28da:       movapd 0x80e(%rip),%xmm0        # 30f0 <_IO_stdin_used+0x160>
    0.00 :   28e2:       lea    0x1b580(%rax),%rsi
    0.00 :   28e9:       nopl   0x0(%rax)
         :          //---------------------------------------------------------------------
         :          // set starting vector to (1, 1, .... 1)
         :          //---------------------------------------------------------------------
         :          for (i = 0; i < NA + 1; i++)
         :          {
         :          x[i] = 1.0;
    0.00 :   28f0:       movaps %xmm0,(%rax)
    0.00 :   28f3:       add    $0x10,%rax
    0.00 :   28f7:       cmp    %rsi,%rax
    0.00 :   28fa:       jne    28f0 <init+0x270>
    0.00 :   28fc:       mov    0x7d5(%rip),%rax        # 30d8 <_IO_stdin_used+0x148>
    0.00 :   2903:       mov    %rax,0x1b580(%rcx,%rbx,1)
         :          }
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   290b:       mov    0x21d107(%rip),%eax        # 21fa18 <lastcol>
    0.00 :   2911:       sub    %edx,%eax
    0.00 :   2913:       js     2990 <init+0x310>
         :          {
         :          q[j] = 0.0;
    0.00 :   2915:       cltq
    0.00 :   2917:       movabs $0x17a9008,%rdi
    0.00 :   2921:       xor    %esi,%esi
    0.00 :   2923:       lea    0x8(,%rax,8),%rbp
    0.00 :   292b:       add    %rbx,%rdi
    0.00 :   292e:       mov    %rbp,%rdx
    0.00 :   2931:       callq  7a0 <memset@plt>
    0.00 :   2936:       movabs $0x600c8,%rdi
    0.00 :   2940:       mov    %rbp,%rdx
    0.00 :   2943:       xor    %esi,%esi
    0.00 :   2945:       add    %rbx,%rdi
    0.00 :   2948:       callq  7a0 <memset@plt>
    0.00 :   294d:       movabs $0x29588,%rdi
    0.00 :   2957:       mov    %rbp,%rdx
    0.00 :   295a:       xor    %esi,%esi
    0.00 :   295c:       add    %rbx,%rdi
    0.00 :   295f:       callq  7a0 <memset@plt>
         :          z[j] = 0.0;
         :          r[j] = 0.0;
         :          p[j] = 0.0;
         :          }
         :          }
    0.00 :   2964:       add    $0x10,%rsp
    0.00 :   2968:       movabs $0x44b28,%rdi
    0.00 :   2972:       mov    %rbp,%rdx
    0.00 :   2975:       add    %rbx,%rdi
    0.00 :   2978:       xor    %esi,%esi
    0.00 :   297a:       pop    %rbx
    0.00 :   297b:       pop    %rbp
    0.00 :   297c:       pop    %r12
    0.00 :   297e:       pop    %r13
    0.00 :   2980:       pop    %r14
    0.00 :   2982:       jmpq   7a0 <memset@plt>
    0.00 :   2987:       nopw   0x0(%rax,%rax,1)
    0.00 :   2990:       add    $0x10,%rsp
    0.00 :   2994:       pop    %rbx
    0.00 :   2995:       pop    %rbp
    0.00 :   2996:       pop    %r12
    0.00 :   2998:       pop    %r13
    0.00 :   299a:       pop    %r14
    0.00 :   299c:       retq
 Percent |	Source code & Disassembly of cg for cycles (4 samples, percent: local period)
---------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          00000000000029a0 <iterate>:
         :          iterate():
         :          p[j] = 0.0;
         :          }
         :          }
         :
         :          void iterate(double *zeta, int *it)
         :          {
    0.00 :   29a0:       push   %r14
    0.00 :   29a2:       push   %r13
    0.00 :   29a4:       mov    %rdi,%r14
    0.00 :   29a7:       push   %r12
    0.00 :   29a9:       push   %rbp
         :          int j;
         :          double rnorm;
         :          double norm_temp1, norm_temp2;
         :
         :          conj_grad(colidx, rowstr, x, z, a, p, q, r, &rnorm);
    0.00 :   29aa:       movabs $0x7b668,%r12
         :          {
    0.00 :   29b4:       push   %rbx
    0.00 :   29b5:       lea    0x2015bc(%rip),%rbx        # 203f78 <_GLOBAL_OFFSET_TABLE_>
         :          conj_grad(colidx, rowstr, x, z, a, p, q, r, &rnorm);
    0.00 :   29bc:       movabs $0x600c8,%rbp
         :          {
    0.00 :   29c6:       mov    %rsi,%r13
         :          conj_grad(colidx, rowstr, x, z, a, p, q, r, &rnorm);
    0.00 :   29c9:       lea    0x20f570(%rip),%rsi        # 211f40 <rowstr>
         :          {
    0.00 :   29d0:       sub    $0x28,%rsp
         :          conj_grad(colidx, rowstr, x, z, a, p, q, r, &rnorm);
    0.00 :   29d4:       lea    0x0(%rbp,%rbx,1),%rcx
    0.00 :   29d9:       lea    (%r12,%rbx,1),%rdx
         :          {
    0.00 :   29dd:       mov    %fs:0x28,%rax
    0.00 :   29e6:       mov    %rax,0x20(%rsp)
    0.00 :   29eb:       xor    %eax,%eax
         :          conj_grad(colidx, rowstr, x, z, a, p, q, r, &rnorm);
    0.00 :   29ed:       lea    0x18(%rsp),%rax
    0.00 :   29f2:       push   %rax
    0.00 :   29f3:       movabs $0x29588,%rax
    0.00 :   29fd:       add    %rbx,%rax
    0.00 :   2a00:       push   %rax
    0.00 :   2a01:       movabs $0x17a9008,%rax
    0.00 :   2a0b:       add    %rbx,%rax
    0.00 :   2a0e:       push   %rax
    0.00 :   2a0f:       movabs $0x44b28,%rax
    0.00 :   2a19:       lea    (%rbx,%rax,1),%r9
    0.00 :   2a1d:       movabs $0x847808,%rax
    0.00 :   2a27:       lea    (%rbx,%rax,1),%r8
    0.00 :   2a2b:       movabs $0x96c08,%rax
    0.00 :   2a35:       lea    (%rbx,%rax,1),%rdi
    0.00 :   2a39:       callq  bf0 <conj_grad>
         :          // Also, find norm of z
         :          // So, first: (z.z)
         :          //---------------------------------------------------------------------
         :          norm_temp1 = 0.0;
         :          norm_temp2 = 0.0;
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   2a3e:       mov    0x21cfd4(%rip),%eax        # 21fa18 <lastcol>
    0.00 :   2a44:       add    $0x20,%rsp
    0.00 :   2a48:       sub    0x20f4d2(%rip),%eax        # 211f20 <firstcol>
    0.00 :   2a4e:       js     2bb8 <iterate+0x218>
         :          norm_temp2 = 0.0;
    0.00 :   2a54:       pxor   %xmm4,%xmm4
    0.00 :   2a58:       cltq
         :          {
         :          norm_temp1 = norm_temp1 + x[j] * z[j];
    0.00 :   2a5a:       lea    0x0(%rbp,%rbx,1),%rcx
         :          norm_temp2 = 0.0;
    0.00 :   2a5f:       pxor   %xmm0,%xmm0
         :          norm_temp1 = norm_temp1 + x[j] * z[j];
    0.00 :   2a63:       lea    (%r12,%rbx,1),%rdx
         :          norm_temp1 = 0.0;
    0.00 :   2a67:       pxor   %xmm3,%xmm3
    0.00 :   2a6b:       lea    0x8(,%rax,8),%rsi
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   2a73:       xor    %eax,%eax
    0.00 :   2a75:       nopl   (%rax)
         :          norm_temp1 = norm_temp1 + x[j] * z[j];
    0.00 :   2a78:       movsd  (%rax,%rcx,1),%xmm1
   27.06 :   2a7d:       add    $0x8,%rax
    0.00 :   2a81:       movsd  -0x8(%rax,%rdx,1),%xmm2
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   2a87:       cmp    %rsi,%rax
         :          norm_temp1 = norm_temp1 + x[j] * z[j];
    0.00 :   2a8a:       mulsd  %xmm1,%xmm2
         :          norm_temp2 = norm_temp2 + z[j] * z[j];
   21.12 :   2a8e:       mulsd  %xmm1,%xmm1
         :          norm_temp1 = norm_temp1 + x[j] * z[j];
    0.00 :   2a92:       addsd  %xmm2,%xmm3
         :          norm_temp2 = norm_temp2 + z[j] * z[j];
    0.00 :   2a96:       addsd  %xmm1,%xmm0
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   2a9a:       jne    2a78 <iterate+0xd8>
    0.00 :   2a9c:       ucomisd %xmm0,%xmm4
         :          }
         :
         :          norm_temp2 = 1.0 / sqrt(norm_temp2);
    0.00 :   2aa0:       sqrtsd %xmm0,%xmm2
    0.00 :   2aa4:       ja     2bc5 <iterate+0x225>
    0.00 :   2aaa:       movsd  0x626(%rip),%xmm1        # 30d8 <_IO_stdin_used+0x148>
         :
         :          *zeta = SHIFT + 1.0 / norm_temp1;
         :          if (*it == 1)
    0.00 :   2ab2:       mov    0x0(%r13),%edx
         :          norm_temp2 = 1.0 / sqrt(norm_temp2);
    0.00 :   2ab6:       movapd %xmm1,%xmm5
         :          *zeta = SHIFT + 1.0 / norm_temp1;
    0.00 :   2aba:       divsd  %xmm3,%xmm1
         :          if (*it == 1)
    0.00 :   2abe:       cmp    $0x1,%edx
         :          norm_temp2 = 1.0 / sqrt(norm_temp2);
    0.00 :   2ac1:       divsd  %xmm2,%xmm5
         :          *zeta = SHIFT + 1.0 / norm_temp1;
    0.00 :   2ac5:       addsd  0x70b(%rip),%xmm1        # 31d8 <_IO_stdin_used+0x248>
    0.00 :   2acd:       movsd  %xmm1,(%r14)
         :          norm_temp2 = 1.0 / sqrt(norm_temp2);
    0.00 :   2ad2:       movapd %xmm5,%xmm2
         :          if (*it == 1)
    0.00 :   2ad6:       je     2b90 <iterate+0x1f0>
         :          printf():
         :          }
         :
         :          __fortify_function int
         :          printf (const char *__restrict __fmt, ...)
         :          {
         :          return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   2adc:       movsd  0x10(%rsp),%xmm0
    0.00 :   2ae2:       lea    0x6c4(%rip),%rsi        # 31ad <_IO_stdin_used+0x21d>
    0.00 :   2ae9:       mov    $0x1,%edi
    0.00 :   2aee:       mov    $0x2,%eax
    0.00 :   2af3:       movsd  %xmm2,(%rsp)
    0.00 :   2af8:       callq  7c0 <__printf_chk@plt>
         :          iterate():
         :          printf("    %5d       %20.14E%20.13f\n", *it, rnorm, *zeta);
         :
         :          //---------------------------------------------------------------------
         :          // Normalize z to obtain x
         :          //---------------------------------------------------------------------
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   2afd:       mov    0x21cf15(%rip),%eax        # 21fa18 <lastcol>
    0.00 :   2b03:       sub    0x20f417(%rip),%eax        # 211f20 <firstcol>
    0.00 :   2b09:       js     2b6f <iterate+0x1cf>
    0.00 :   2b0b:       test   %eax,%eax
    0.00 :   2b0d:       lea    0x1(%rax),%r8d
    0.00 :   2b11:       movsd  (%rsp),%xmm2
    0.00 :   2b16:       je     2b5c <iterate+0x1bc>
    0.00 :   2b18:       movapd %xmm2,%xmm1
    0.00 :   2b1c:       mov    %r8d,%edi
         :          {
         :          x[j] = norm_temp2 * z[j];
    0.00 :   2b1f:       lea    (%r12,%rbx,1),%rsi
    0.00 :   2b23:       lea    0x0(%rbp,%rbx,1),%rcx
    0.00 :   2b28:       shr    %edi
         :          for (j = 0; j < lastcol - firstcol + 1; j++)
    0.00 :   2b2a:       xor    %eax,%eax
    0.00 :   2b2c:       unpcklpd %xmm1,%xmm1
    0.00 :   2b30:       xor    %edx,%edx
    0.00 :   2b32:       nopw   0x0(%rax,%rax,1)
         :          x[j] = norm_temp2 * z[j];
    0.00 :   2b38:       movapd (%rax,%rcx,1),%xmm0
    0.00 :   2b3d:       add    $0x1,%edx
    0.00 :   2b40:       add    $0x10,%rax
    0.00 :   2b44:       mulpd  %xmm1,%xmm0
   51.82 :   2b48:       movaps %xmm0,-0x10(%rax,%rsi,1)
    0.00 :   2b4d:       cmp    %edx,%edi
    0.00 :   2b4f:       ja     2b38 <iterate+0x198>
    0.00 :   2b51:       mov    %r8d,%eax
    0.00 :   2b54:       and    $0xfffffffe,%eax
    0.00 :   2b57:       cmp    %r8d,%eax
    0.00 :   2b5a:       je     2b6f <iterate+0x1cf>
    0.00 :   2b5c:       cltq
    0.00 :   2b5e:       lea    (%r12,%rbx,1),%rdx
    0.00 :   2b62:       add    %rbp,%rbx
    0.00 :   2b65:       mulsd  (%rbx,%rax,8),%xmm2
    0.00 :   2b6a:       movsd  %xmm2,(%rdx,%rax,8)
         :          }
    0.00 :   2b6f:       mov    0x18(%rsp),%rax
    0.00 :   2b74:       xor    %fs:0x28,%rax
    0.00 :   2b7d:       jne    2be5 <iterate+0x245>
    0.00 :   2b7f:       add    $0x20,%rsp
    0.00 :   2b83:       pop    %rbx
    0.00 :   2b84:       pop    %rbp
    0.00 :   2b85:       pop    %r12
    0.00 :   2b87:       pop    %r13
    0.00 :   2b89:       pop    %r14
    0.00 :   2b8b:       retq
    0.00 :   2b8c:       nopl   0x0(%rax)
         :          printf():
    0.00 :   2b90:       lea    0x5c9(%rip),%rdi        # 3160 <_IO_stdin_used+0x1d0>
    0.00 :   2b97:       movsd  %xmm5,(%rsp)
    0.00 :   2b9c:       callq  770 <puts@plt>
    0.00 :   2ba1:       movsd  (%r14),%xmm1
    0.00 :   2ba6:       mov    0x0(%r13),%edx
    0.00 :   2baa:       movsd  (%rsp),%xmm2
    0.00 :   2baf:       jmpq   2adc <iterate+0x13c>
    0.00 :   2bb4:       nopl   0x0(%rax)
         :          iterate():
         :          norm_temp1 = 0.0;
    0.00 :   2bb8:       pxor   %xmm3,%xmm3
         :          norm_temp2 = 1.0 / sqrt(norm_temp2);
    0.00 :   2bbc:       pxor   %xmm2,%xmm2
    0.00 :   2bc0:       jmpq   2aaa <iterate+0x10a>
    0.00 :   2bc5:       movsd  %xmm3,0x8(%rsp)
    0.00 :   2bcb:       movsd  %xmm2,(%rsp)
    0.00 :   2bd0:       callq  7e0 <sqrt@plt>
    0.00 :   2bd5:       movsd  (%rsp),%xmm2
    0.00 :   2bda:       movsd  0x8(%rsp),%xmm3
    0.00 :   2be0:       jmpq   2aaa <iterate+0x10a>
    0.00 :   2be5:       callq  780 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of i915.ko for cycles (2 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000005b70 <gen8_irq_handler>:
         :          gen8_irq_handler():
    0.00 :   5b70:       callq  5b75 <gen8_irq_handler+0x5>
    0.00 :   5b75:       push   %rbp
    0.00 :   5b76:       mov    %rsp,%rbp
    0.00 :   5b79:       push   %r14
    0.00 :   5b7b:       push   %r13
    0.00 :   5b7d:       push   %r12
    0.00 :   5b7f:       push   %rbx
    0.00 :   5b80:       sub    $0x18,%rsp
    0.00 :   5b84:       mov    %gs:0x28,%rax
    0.00 :   5b8d:       mov    %rax,-0x28(%rbp)
    0.00 :   5b91:       xor    %eax,%eax
    0.00 :   5b93:       cmpb   $0x0,0x7582(%rsi)
    0.00 :   5b9a:       je     5bc8 <gen8_irq_handler+0x58>
    0.00 :   5b9c:       mov    %rsi,%rbx
    0.00 :   5b9f:       mov    0x778(%rsi),%r12
    0.00 :   5ba6:       mov    %eax,0x44200(%r12)
   44.88 :   5bae:       mov    0x44200(%r12),%r13d
    0.00 :   5bb6:       test   %r13d,%r13d
    0.00 :   5bb9:       jne    5be4 <gen8_irq_handler+0x74>
    0.00 :   5bbb:       mov    $0x80000000,%edx
    0.00 :   5bc0:       mov    %edx,0x44200(%r12)
    0.00 :   5bc8:       mov    -0x28(%rbp),%rcx
    0.00 :   5bcc:       xor    %gs:0x28,%rcx
    0.00 :   5bd5:       jne    5c49 <gen8_irq_handler+0xd9>
    0.00 :   5bd7:       add    $0x18,%rsp
    0.00 :   5bdb:       pop    %rbx
    0.00 :   5bdc:       pop    %r12
    0.00 :   5bde:       pop    %r13
    0.00 :   5be0:       pop    %r14
    0.00 :   5be2:       pop    %rbp
    0.00 :   5be3:       retq
    0.00 :   5be4:       lea    0x7758(%rsi),%r14
    0.00 :   5beb:       lea    -0x38(%rbp),%rdx
    0.00 :   5bef:       mov    %r13d,%esi
    0.00 :   5bf2:       mov    %r14,%rdi
    0.00 :   5bf5:       callq  5bfa <gen8_irq_handler+0x8a>
    0.00 :   5bfa:       test   $0xffffff80,%r13d
    0.00 :   5c01:       jne    5c26 <gen8_irq_handler+0xb6>
    0.00 :   5c03:       mov    $0x80000000,%eax
    0.00 :   5c08:       mov    %eax,0x44200(%r12)
    0.00 :   5c10:       lea    -0x38(%rbp),%rdx
    0.00 :   5c14:       mov    %r13d,%esi
    0.00 :   5c17:       mov    %r14,%rdi
    0.00 :   5c1a:       callq  5c1f <gen8_irq_handler+0xaf>
    0.00 :   5c1f:       mov    $0x1,%eax
    0.00 :   5c24:       jmp    5bc8 <gen8_irq_handler+0x58>
   55.12 :   5c26:       lock addl $0x10001,0x7570(%rbx)
    0.00 :   5c31:       mov    %r13d,%esi
    0.00 :   5c34:       mov    %rbx,%rdi
    0.00 :   5c37:       callq  5170 <gen8_de_irq_handler>
    0.00 :   5c3c:       lock subl $0x10001,0x7570(%rbx)
    0.00 :   5c47:       jmp    5c03 <gen8_irq_handler+0x93>
    0.00 :   5c49:       callq  5c4e <gen8_irq_handler+0xde>
 Percent |	Source code & Disassembly of i915.ko for cycles (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000093c60 <do_rps_boost>:
         :           do_rps_boost():
    0.00 :   93c60:       callq  93c65 <do_rps_boost+0x5>
    0.00 :   93c65:       push   %rbp
    0.00 :   93c66:       mov    %rsp,%rbp
    0.00 :   93c69:       push   %r12
    0.00 :   93c6b:       push   %rbx
    0.00 :   93c6c:       mov    0x30(%rdi),%r12
    0.00 :   93c70:       mov    %rdi,%rbx
  100.00 :   93c73:       mov    0x30(%r12),%rax
    0.00 :   93c78:       test   $0x1,%al
    0.00 :   93c7a:       jne    93c92 <do_rps_boost+0x32>
    0.00 :   93c7c:       mov    0x28(%r12),%rdx
    0.00 :   93c81:       mov    0x1c0(%r12),%rax
    0.00 :   93c89:       mov    (%rax),%eax
    0.00 :   93c8b:       add    $0x1,%eax
    0.00 :   93c8e:       cmp    %edx,%eax
    0.00 :   93c90:       js     93cef <do_rps_boost+0x8f>
    0.00 :   93c92:       test   %r12,%r12
    0.00 :   93c95:       je     93caf <do_rps_boost+0x4f>
    0.00 :   93c97:       lea    0x38(%r12),%rdi
    0.00 :   93c9c:       lock decl 0x38(%r12)
    0.00 :   93ca2:       js     93ca8 <do_rps_boost+0x48>
    0.00 :   93ca8:       jne    93caf <do_rps_boost+0x4f>
    0.00 :   93caa:       callq  93caf <do_rps_boost+0x4f>
    0.00 :   93caf:       mov    0x28(%rbx),%rdi
    0.00 :   93cb3:       callq  93cb8 <do_rps_boost+0x58>
    0.00 :   93cb8:       mov    0x20(%rbx),%rax
    0.00 :   93cbc:       mov    0x18(%rbx),%rdx
    0.00 :   93cc0:       mov    %rbx,%rdi
    0.00 :   93cc3:       mov    %rax,0x8(%rdx)
    0.00 :   93cc7:       mov    %rdx,(%rax)
    0.00 :   93cca:       movabs $0xdead000000000100,%rax
    0.00 :   93cd4:       mov    %rax,0x18(%rbx)
    0.00 :   93cd8:       add    $0x22,%rax
    0.00 :   93cdc:       mov    %rax,0x20(%rbx)
    0.00 :   93ce0:       callq  93ce5 <do_rps_boost+0x85>
    0.00 :   93ce5:       mov    $0x1,%eax
    0.00 :   93cea:       pop    %rbx
    0.00 :   93ceb:       pop    %r12
    0.00 :   93ced:       pop    %rbp
    0.00 :   93cee:       retq
    0.00 :   93cef:       mov    %r12,%rdi
    0.00 :   93cf2:       callq  93cf7 <do_rps_boost+0x97>
    0.00 :   93cf7:       jmp    93c92 <do_rps_boost+0x32>
 Percent |	Source code & Disassembly of libc-2.27.so for cycles (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         :            Disassembly of section .text:
         :
         :            000000000018f190 <__nss_group_lookup@GLIBC_2.2.5+0x251e0>:
    0.00 :   18f190:       vzeroupper
    0.00 :   18f193:       mov    %rdx,%rcx
    0.00 :   18f196:       movzbl %sil,%eax
    0.00 :   18f19a:       mov    %rdi,%rdx
  100.00 :   18f19d:       rep stos %al,%es:(%rdi)
    0.00 :   18f19f:       mov    %rdx,%rax
    0.00 :   18f1a2:       retq
 Percent |	Source code & Disassembly of i915.ko for cycles (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           000000000002b470 <i915_sw_fence_complete>:
         :           i915_sw_fence_complete():
    0.00 :   2b470:       callq  2b475 <i915_sw_fence_complete+0x5>
  100.00 :   2b475:       mov    0x20(%rdi),%eax
    0.00 :   2b478:       push   %rbp
    0.00 :   2b479:       mov    %rsp,%rbp
    0.00 :   2b47c:       test   %eax,%eax
    0.00 :   2b47e:       js     2b489 <i915_sw_fence_complete+0x19>
    0.00 :   2b480:       xor    %esi,%esi
    0.00 :   2b482:       callq  2b210 <__i915_sw_fence_complete>
    0.00 :   2b487:       pop    %rbp
    0.00 :   2b488:       retq
    0.00 :   2b489:       ud2
    0.00 :   2b48b:       pop    %rbp
    0.00 :   2b48c:       retq
 Percent |	Source code & Disassembly of i915.ko for cycles (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000005170 <gen8_de_irq_handler>:
         :          gen8_de_irq_handler():
    0.00 :   5170:       callq  5175 <gen8_de_irq_handler+0x5>
    0.00 :   5175:       push   %rbp
    0.00 :   5176:       mov    %esi,%eax
    0.00 :   5178:       mov    %rsp,%rbp
    0.00 :   517b:       push   %r15
    0.00 :   517d:       push   %r14
    0.00 :   517f:       push   %r13
    0.00 :   5181:       push   %r12
    0.00 :   5183:       mov    %rdi,%r15
    0.00 :   5186:       push   %rbx
    0.00 :   5187:       sub    $0x38,%rsp
    0.00 :   518b:       mov    %esi,-0x3c(%rbp)
    0.00 :   518e:       mov    %gs:0x28,%rdi
    0.00 :   5197:       mov    %rdi,-0x30(%rbp)
    0.00 :   519b:       xor    %edi,%edi
    0.00 :   519d:       test   $0x400000,%eax
    0.00 :   51a2:       je     59fb <gen8_de_irq_handler+0x88b>
    0.00 :   51a8:       lea    0x778(%r15),%r13
    0.00 :   51af:       mov    0x7f0(%r15),%rax
    0.00 :   51b6:       mov    $0x1,%edx
    0.00 :   51bb:       mov    $0x44468,%esi
    0.00 :   51c0:       mov    %r13,%rdi
    0.00 :   51c3:       callq  51c8 <gen8_de_irq_handler+0x58>
    0.00 :   51c8:       test   %eax,%eax
    0.00 :   51ca:       mov    %eax,%r12d
    0.00 :   51cd:       je     5a35 <gen8_de_irq_handler+0x8c5>
    0.00 :   51d3:       mov    %r12d,%r14d
    0.00 :   51d6:       mov    %r12d,%edx
    0.00 :   51d9:       mov    0x810(%r15),%rax
    0.00 :   51e0:       mov    $0x1,%ecx
    0.00 :   51e5:       mov    $0x44468,%esi
    0.00 :   51ea:       mov    %r13,%rdi
    0.00 :   51ed:       and    $0x80000,%r14d
    0.00 :   51f4:       callq  51f9 <gen8_de_irq_handler+0x89>
    0.00 :   51f9:       and    $0x8000000,%r12d
    0.00 :   5200:       jne    587d <gen8_de_irq_handler+0x70d>
    0.00 :   5206:       test   %r14d,%r14d
    0.00 :   5209:       je     5a7a <gen8_de_irq_handler+0x90a>
    0.00 :   520f:       mov    $0x1,%edx
    0.00 :   5214:       mov    $0x64838,%esi
    0.00 :   5219:       mov    %r13,%rdi
    0.00 :   521c:       mov    0x7f0(%r15),%rax
    0.00 :   5223:       callq  5228 <gen8_de_irq_handler+0xb8>
    0.00 :   5228:       mov    %r15,%rdi
    0.00 :   522b:       mov    %eax,%r12d
    0.00 :   522e:       mov    %eax,%esi
    0.00 :   5230:       callq  5235 <gen8_de_irq_handler+0xc5>
    0.00 :   5235:       mov    0x810(%r15),%rax
    0.00 :   523c:       mov    $0x1,%ecx
    0.00 :   5241:       mov    %r12d,%edx
    0.00 :   5244:       mov    $0x64838,%esi
    0.00 :   5249:       mov    %r13,%rdi
    0.00 :   524c:       callq  5251 <gen8_de_irq_handler+0xe1>
    0.00 :   5251:       movl   $0x1,-0x48(%rbp)
    0.00 :   5258:       cmpb   $0xa,0x60a(%r15)
    0.00 :   5260:       jbe    53f0 <gen8_de_irq_handler+0x280>
    0.00 :   5266:       testl  $0x200000,-0x3c(%rbp)
    0.00 :   526d:       je     53f0 <gen8_de_irq_handler+0x280>
    0.00 :   5273:       lea    0x778(%r15),%r13
    0.00 :   527a:       mov    0x7f0(%r15),%rax
    0.00 :   5281:       mov    $0x1,%edx
    0.00 :   5286:       mov    $0x44478,%esi
    0.00 :   528b:       mov    %r13,%rdi
    0.00 :   528e:       callq  5293 <gen8_de_irq_handler+0x123>
    0.00 :   5293:       test   %eax,%eax
    0.00 :   5295:       mov    %eax,%r12d
    0.00 :   5298:       je     5b1e <gen8_de_irq_handler+0x9ae>
    0.00 :   529e:       mov    0x810(%r15),%rax
    0.00 :   52a5:       mov    %r12d,%edx
    0.00 :   52a8:       mov    $0x44478,%esi
    0.00 :   52ad:       mov    %r13,%rdi
    0.00 :   52b0:       mov    $0x1,%ecx
    0.00 :   52b5:       mov    %r12d,%ebx
    0.00 :   52b8:       callq  52bd <gen8_de_irq_handler+0x14d>
    0.00 :   52bd:       mov    %r12d,%eax
    0.00 :   52c0:       mov    $0x0,%rdx
    0.00 :   52c7:       movl   $0x0,-0x38(%rbp)
    0.00 :   52ce:       and    $0x3f,%eax
    0.00 :   52d1:       cmpb   $0xc,0x60a(%r15)
    0.00 :   52d9:       movl   $0x0,-0x34(%rbp)
    0.00 :   52e0:       mov    %eax,-0x40(%rbp)
    0.00 :   52e3:       mov    $0x0,%rax
    0.00 :   52ea:       mov    %rax,%rdi
    0.00 :   52ed:       mov    $0x0,%rax
    0.00 :   52f4:       mov    %rax,%rsi
    0.00 :   52f7:       cmovb  %rdx,%rdi
    0.00 :   52fb:       mov    $0x0,%rdx
    0.00 :   5302:       cmovb  %rdx,%rsi
    0.00 :   5306:       and    $0x3f0000,%ebx
    0.00 :   530c:       mov    %rdi,-0x50(%rbp)
    0.00 :   5310:       mov    %rsi,-0x58(%rbp)
    0.00 :   5314:       je     5a5e <gen8_de_irq_handler+0x8ee>
    0.00 :   531a:       mov    $0x1,%edx
    0.00 :   531f:       mov    $0x44038,%esi
    0.00 :   5324:       mov    %r13,%rdi
    0.00 :   5327:       mov    0x7f0(%r15),%rax
    0.00 :   532e:       lea    -0x34(%rbp),%r14
    0.00 :   5332:       callq  5337 <gen8_de_irq_handler+0x1c7>
    0.00 :   5337:       mov    0x810(%r15),%r8
    0.00 :   533e:       mov    %eax,%edx
    0.00 :   5340:       mov    $0x1,%ecx
    0.00 :   5345:       mov    %eax,-0x5c(%rbp)
    0.00 :   5348:       mov    $0x44038,%esi
    0.00 :   534d:       mov    %r13,%rdi
    0.00 :   5350:       callq  5355 <gen8_de_irq_handler+0x1e5>
    0.00 :   5355:       mov    -0x5c(%rbp),%eax
    0.00 :   5358:       lea    -0x38(%rbp),%r10
    0.00 :   535c:       mov    -0x50(%rbp),%r8
    0.00 :   5360:       mov    -0x58(%rbp),%r9
    0.00 :   5364:       mov    %ebx,%edx
    0.00 :   5366:       mov    %r14,%rsi
    0.00 :   5369:       mov    %r10,%rdi
    0.00 :   536c:       mov    %r10,-0x48(%rbp)
    0.00 :   5370:       mov    %eax,%ecx
    0.00 :   5372:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   5377:       mov    -0x40(%rbp),%r8d
    0.00 :   537b:       test   %r8d,%r8d
    0.00 :   537e:       je     53cf <gen8_de_irq_handler+0x25f>
    0.00 :   5380:       mov    $0x1,%edx
    0.00 :   5385:       mov    $0x44030,%esi
    0.00 :   538a:       mov    %r13,%rdi
    0.00 :   538d:       mov    0x7f0(%r15),%rax
    0.00 :   5394:       callq  5399 <gen8_de_irq_handler+0x229>
    0.00 :   5399:       mov    0x810(%r15),%r8
    0.00 :   53a0:       mov    %eax,%ebx
    0.00 :   53a2:       mov    $0x1,%ecx
    0.00 :   53a7:       mov    %eax,%edx
    0.00 :   53a9:       mov    $0x44030,%esi
    0.00 :   53ae:       mov    %r13,%rdi
    0.00 :   53b1:       callq  53b6 <gen8_de_irq_handler+0x246>
    0.00 :   53b6:       mov    -0x58(%rbp),%r9
    0.00 :   53ba:       mov    -0x50(%rbp),%r8
    0.00 :   53be:       mov    %ebx,%ecx
    0.00 :   53c0:       mov    -0x40(%rbp),%edx
    0.00 :   53c3:       mov    -0x48(%rbp),%rdi
    0.00 :   53c7:       mov    %r14,%rsi
    0.00 :   53ca:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   53cf:       mov    -0x38(%rbp),%esi
    0.00 :   53d2:       test   %esi,%esi
    0.00 :   53d4:       jne    59eb <gen8_de_irq_handler+0x87b>
    0.00 :   53da:       mov    %r12d,%esi
    0.00 :   53dd:       mov    $0x0,%rdi
    0.00 :   53e4:       callq  53e9 <gen8_de_irq_handler+0x279>
    0.00 :   53e9:       movl   $0x1,-0x48(%rbp)
    0.00 :   53f0:       testl  $0x100000,-0x3c(%rbp)
    0.00 :   53f7:       je     548b <gen8_de_irq_handler+0x31b>
    0.00 :   53fd:       lea    0x778(%r15),%r13
    0.00 :   5404:       mov    0x7f0(%r15),%rax
    0.00 :   540b:       mov    $0x1,%edx
    0.00 :   5410:       mov    $0x44448,%esi
    0.00 :   5415:       mov    %r13,%rdi
    0.00 :   5418:       callq  541d <gen8_de_irq_handler+0x2ad>
    0.00 :   541d:       test   %eax,%eax
    0.00 :   541f:       mov    %eax,%r12d
    0.00 :   5422:       je     5a4d <gen8_de_irq_handler+0x8dd>
    0.00 :   5428:       mov    0x810(%r15),%rax
    0.00 :   542f:       mov    %r12d,%edx
    0.00 :   5432:       mov    $0x1,%ecx
    0.00 :   5437:       mov    $0x44448,%esi
    0.00 :   543c:       mov    %r13,%rdi
    0.00 :   543f:       callq  5444 <gen8_de_irq_handler+0x2d4>
    0.00 :   5444:       movzbl 0x60a(%r15),%edx
    0.00 :   544c:       mov    $0x7,%eax
    0.00 :   5451:       cmp    $0xb,%dl
    0.00 :   5454:       jbe    5765 <gen8_de_irq_handler+0x5f5>
    0.00 :   545a:       xor    %ecx,%ecx
    0.00 :   545c:       test   %eax,%r12d
    0.00 :   545f:       jne    57ac <gen8_de_irq_handler+0x63c>
    0.00 :   5465:       cmp    $0x9,%dl
    0.00 :   5468:       je     57d7 <gen8_de_irq_handler+0x667>
    0.00 :   546e:       testb  $0x80,0x686(%r15)
    0.00 :   5476:       jne    5837 <gen8_de_irq_handler+0x6c7>
    0.00 :   547c:       test   %cl,%cl
    0.00 :   547e:       je     5818 <gen8_de_irq_handler+0x6a8>
    0.00 :   5484:       movl   $0x1,-0x48(%rbp)
    0.00 :   548b:       xor    %r13d,%r13d
    0.00 :   548e:       cmpb   $0x0,0x624(%r15)
    0.00 :   5496:       jne    54eb <gen8_de_irq_handler+0x37b>
    0.00 :   5498:       jmpq   55a2 <gen8_de_irq_handler+0x432>
    0.00 :   549d:       test   $0x10000000,%ebx
    0.00 :   54a3:       jne    556a <gen8_de_irq_handler+0x3fa>
    0.00 :   54a9:       test   %ebx,%ebx
    0.00 :   54ab:       js     557d <gen8_de_irq_handler+0x40d>
    0.00 :   54b1:       cmpb   $0x9,0x60a(%r15)
    0.00 :   54b9:       movl   $0x1,-0x48(%rbp)
    0.00 :   54c0:       sbb    %edx,%edx
    0.00 :   54c2:       and    $0xfffff780,%edx
    0.00 :   54c8:       add    $0xf80,%edx
    0.00 :   54ce:       and    %ebx,%edx
    0.00 :   54d0:       jne    558d <gen8_de_irq_handler+0x41d>
    0.00 :   54d6:       movzbl 0x624(%r15),%eax
    0.00 :   54de:       add    $0x1,%r13d
    0.00 :   54e2:       cmp    %r13d,%eax
    0.00 :   54e5:       jle    55a2 <gen8_de_irq_handler+0x432>
    0.00 :   54eb:       lea    0x10(%r13),%ecx
    0.00 :   54ef:       mov    $0x1,%eax
    0.00 :   54f4:       shl    %cl,%eax
    0.00 :   54f6:       test   %eax,-0x3c(%rbp)
    0.00 :   54f9:       je     54d6 <gen8_de_irq_handler+0x366>
    0.00 :   54fb:       mov    %r13d,%r8d
    0.00 :   54fe:       lea    0x778(%r15),%r12
    0.00 :   5505:       mov    0x7f0(%r15),%rax
    0.00 :   550c:       shl    $0x4,%r8d
    0.00 :   5510:       mov    $0x1,%edx
    0.00 :   5515:       lea    0x44408(%r8),%r14d
    0.00 :   551c:       mov    %r12,%rdi
    0.00 :   551f:       mov    %r14d,%esi
    0.00 :   5522:       callq  5527 <gen8_de_irq_handler+0x3b7>
    0.00 :   5527:       test   %eax,%eax
    0.00 :   5529:       mov    %eax,%ebx
    0.00 :   552b:       je     59da <gen8_de_irq_handler+0x86a>
    0.00 :   5531:       mov    0x810(%r15),%rax
    0.00 :   5538:       mov    $0x1,%ecx
    0.00 :   553d:       mov    %ebx,%edx
    0.00 :   553f:       mov    %r14d,%esi
    0.00 :   5542:       mov    %r12,%rdi
    0.00 :   5545:       callq  554a <gen8_de_irq_handler+0x3da>
    0.00 :   554a:       test   $0x1,%bl
    0.00 :   554d:       je     549d <gen8_de_irq_handler+0x32d>
    0.00 :   5553:       mov    %r13d,%esi
    0.00 :   5556:       mov    %r15,%rdi
    0.00 :   5559:       callq  555e <gen8_de_irq_handler+0x3ee>
    0.00 :   555e:       test   $0x10000000,%ebx
    0.00 :   5564:       je     54a9 <gen8_de_irq_handler+0x339>
    0.00 :   556a:       mov    %r13d,%esi
    0.00 :   556d:       mov    %r15,%rdi
    0.00 :   5570:       callq  4660 <hsw_pipe_crc_irq_handler>
    0.00 :   5575:       test   %ebx,%ebx
    0.00 :   5577:       jns    54b1 <gen8_de_irq_handler+0x341>
    0.00 :   557d:       mov    %r13d,%esi
    0.00 :   5580:       mov    %r15,%rdi
    0.00 :   5583:       callq  5588 <gen8_de_irq_handler+0x418>
    0.00 :   5588:       jmpq   54b1 <gen8_de_irq_handler+0x341>
    0.00 :   558d:       lea    0x41(%r13),%esi
    0.00 :   5591:       mov    $0x0,%rdi
    0.00 :   5598:       callq  559d <gen8_de_irq_handler+0x42d>
    0.00 :   559d:       jmpq   54d6 <gen8_de_irq_handler+0x366>
  100.00 :   55a2:       mov    0x5470(%r15),%eax
    0.00 :   55a9:       add    $0x1,%eax
    0.00 :   55ac:       cmp    $0x1,%eax
    0.00 :   55af:       jbe    5740 <gen8_de_irq_handler+0x5d0>
    0.00 :   55b5:       testl  $0x800000,-0x3c(%rbp)
    0.00 :   55bc:       je     5740 <gen8_de_irq_handler+0x5d0>
    0.00 :   55c2:       lea    0x778(%r15),%rbx
    0.00 :   55c9:       mov    0x7f0(%r15),%rax
    0.00 :   55d0:       mov    $0x1,%edx
    0.00 :   55d5:       mov    $0xc4008,%esi
    0.00 :   55da:       mov    %rbx,%rdi
    0.00 :   55dd:       callq  55e2 <gen8_de_irq_handler+0x472>
    0.00 :   55e2:       test   %eax,%eax
    0.00 :   55e4:       mov    %eax,%r12d
    0.00 :   55e7:       je     5b08 <gen8_de_irq_handler+0x998>
    0.00 :   55ed:       mov    0x810(%r15),%rax
    0.00 :   55f4:       mov    $0x1,%ecx
    0.00 :   55f9:       mov    %r12d,%edx
    0.00 :   55fc:       mov    $0xc4008,%esi
    0.00 :   5601:       mov    %rbx,%rdi
    0.00 :   5604:       callq  5609 <gen8_de_irq_handler+0x499>
    0.00 :   5609:       mov    0x5470(%r15),%eax
    0.00 :   5610:       cmp    $0x7,%eax
    0.00 :   5613:       jg     589a <gen8_de_irq_handler+0x72a>
    0.00 :   5619:       je     5a07 <gen8_de_irq_handler+0x897>
    0.00 :   561f:       cmp    $0x6,%eax
    0.00 :   5622:       je     59bc <gen8_de_irq_handler+0x84c>
    0.00 :   5628:       cmp    $0x3,%eax
    0.00 :   562b:       jle    5a25 <gen8_de_irq_handler+0x8b5>
    0.00 :   5631:       mov    %r12d,%eax
    0.00 :   5634:       mov    %r12d,%r13d
    0.00 :   5637:       movl   $0x0,-0x38(%rbp)
    0.00 :   563e:       and    $0x2000000,%eax
    0.00 :   5643:       and    $0x1e00000,%r13d
    0.00 :   564a:       movl   $0x0,-0x34(%rbp)
    0.00 :   5651:       mov    %eax,-0x3c(%rbp)
    0.00 :   5654:       je     5b4b <gen8_de_irq_handler+0x9db>
    0.00 :   565a:       mov    $0x1,%edx
    0.00 :   565f:       mov    $0xc4030,%esi
    0.00 :   5664:       mov    %rbx,%rdi
    0.00 :   5667:       mov    0x7f0(%r15),%rax
    0.00 :   566e:       lea    -0x34(%rbp),%r14
    0.00 :   5672:       callq  5677 <gen8_de_irq_handler+0x507>
    0.00 :   5677:       mov    0x810(%r15),%r8
    0.00 :   567e:       mov    %eax,%edx
    0.00 :   5680:       mov    $0x1,%ecx
    0.00 :   5685:       mov    %eax,-0x40(%rbp)
    0.00 :   5688:       mov    $0xc4030,%esi
    0.00 :   568d:       mov    %rbx,%rdi
    0.00 :   5690:       callq  5695 <gen8_de_irq_handler+0x525>
    0.00 :   5695:       mov    -0x40(%rbp),%eax
    0.00 :   5698:       lea    -0x38(%rbp),%rdi
    0.00 :   569c:       mov    %r14,%rsi
    0.00 :   569f:       mov    $0x0,%r9
    0.00 :   56a6:       mov    $0x0,%r8
    0.00 :   56ad:       mov    %r13d,%edx
    0.00 :   56b0:       mov    %rdi,-0x48(%rbp)
    0.00 :   56b4:       mov    %eax,%ecx
    0.00 :   56b6:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   56bb:       mov    -0x3c(%rbp),%esi
    0.00 :   56be:       test   %esi,%esi
    0.00 :   56c0:       je     571a <gen8_de_irq_handler+0x5aa>
    0.00 :   56c2:       mov    $0x1,%edx
    0.00 :   56c7:       mov    $0xc403c,%esi
    0.00 :   56cc:       mov    %rbx,%rdi
    0.00 :   56cf:       mov    0x7f0(%r15),%rax
    0.00 :   56d6:       callq  56db <gen8_de_irq_handler+0x56b>
    0.00 :   56db:       mov    %eax,%r13d
    0.00 :   56de:       mov    $0x1,%ecx
    0.00 :   56e3:       mov    $0xc403c,%esi
    0.00 :   56e8:       mov    %r13d,%edx
    0.00 :   56eb:       mov    %rbx,%rdi
    0.00 :   56ee:       mov    0x810(%r15),%rax
    0.00 :   56f5:       callq  56fa <gen8_de_irq_handler+0x58a>
    0.00 :   56fa:       mov    -0x3c(%rbp),%edx
    0.00 :   56fd:       mov    -0x48(%rbp),%rdi
    0.00 :   5701:       mov    $0x0,%r9
    0.00 :   5708:       mov    $0x0,%r8
    0.00 :   570f:       mov    %r13d,%ecx
    0.00 :   5712:       mov    %r14,%rsi
    0.00 :   5715:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   571a:       mov    -0x38(%rbp),%esi
    0.00 :   571d:       test   %esi,%esi
    0.00 :   571f:       je     572c <gen8_de_irq_handler+0x5bc>
    0.00 :   5721:       mov    -0x34(%rbp),%edx
    0.00 :   5724:       mov    %r15,%rdi
    0.00 :   5727:       callq  572c <gen8_de_irq_handler+0x5bc>
    0.00 :   572c:       and    $0x20000,%r12d
    0.00 :   5733:       jne    59a2 <gen8_de_irq_handler+0x832>
    0.00 :   5739:       movl   $0x1,-0x48(%rbp)
    0.00 :   5740:       mov    -0x30(%rbp),%rdi
    0.00 :   5744:       xor    %gs:0x28,%rdi
    0.00 :   574d:       mov    -0x48(%rbp),%eax
    0.00 :   5750:       jne    5b67 <gen8_de_irq_handler+0x9f7>
    0.00 :   5756:       add    $0x38,%rsp
    0.00 :   575a:       pop    %rbx
    0.00 :   575b:       pop    %r12
    0.00 :   575d:       pop    %r13
    0.00 :   575f:       pop    %r14
    0.00 :   5761:       pop    %r15
    0.00 :   5763:       pop    %rbp
    0.00 :   5764:       retq
    0.00 :   5765:       mov    0x684(%r15),%ecx
    0.00 :   576c:       cmp    $0x9,%dl
    0.00 :   576f:       sbb    %eax,%eax
    0.00 :   5771:       and    $0xf2000000,%eax
    0.00 :   5776:       lea    (%rcx,%rcx,1),%esi
    0.00 :   5779:       shl    $0x1f,%ecx
    0.00 :   577c:       add    $0xe000001,%eax
    0.00 :   5781:       test   %ecx,%esi
    0.00 :   5783:       jne    578e <gen8_de_irq_handler+0x61e>
    0.00 :   5785:       cmp    $0xb,%dl
    0.00 :   5788:       jne    545a <gen8_de_irq_handler+0x2ea>
    0.00 :   578e:       mov    %eax,%ecx
    0.00 :   5790:       or     $0x30000000,%eax
    0.00 :   5795:       or     $0x10000000,%ecx
    0.00 :   579b:       cmp    $0xb,%dl
    0.00 :   579e:       cmovne %ecx,%eax
    0.00 :   57a1:       xor    %ecx,%ecx
    0.00 :   57a3:       test   %eax,%r12d
    0.00 :   57a6:       je     5465 <gen8_de_irq_handler+0x2f5>
    0.00 :   57ac:       lea    0x4a30(%r15),%rdi
    0.00 :   57b3:       xor    %ecx,%ecx
    0.00 :   57b5:       xor    %edx,%edx
    0.00 :   57b7:       mov    $0x3,%esi
    0.00 :   57bc:       callq  57c1 <gen8_de_irq_handler+0x651>
    0.00 :   57c1:       movzbl 0x60a(%r15),%edx
    0.00 :   57c9:       mov    $0x1,%ecx
    0.00 :   57ce:       cmp    $0x9,%dl
    0.00 :   57d1:       jne    546e <gen8_de_irq_handler+0x2fe>
    0.00 :   57d7:       testb  $0x2,0x625(%r15)
    0.00 :   57df:       je     5829 <gen8_de_irq_handler+0x6b9>
    0.00 :   57e1:       mov    %r12d,%ebx
    0.00 :   57e4:       and    $0x38,%ebx
    0.00 :   57e7:       jne    5a8b <gen8_de_irq_handler+0x91b>
    0.00 :   57ed:       and    $0x2,%r12d
    0.00 :   57f1:       je     547c <gen8_de_irq_handler+0x30c>
    0.00 :   57f7:       lea    0x4a30(%r15),%rdi
    0.00 :   57fe:       xor    %ecx,%ecx
    0.00 :   5800:       xor    %edx,%edx
    0.00 :   5802:       mov    $0x3,%esi
    0.00 :   5807:       callq  580c <gen8_de_irq_handler+0x69c>
    0.00 :   580c:       movl   $0x1,-0x48(%rbp)
    0.00 :   5813:       jmpq   548b <gen8_de_irq_handler+0x31b>
    0.00 :   5818:       mov    $0x0,%rdi
    0.00 :   581f:       callq  5824 <gen8_de_irq_handler+0x6b4>
    0.00 :   5824:       jmpq   5484 <gen8_de_irq_handler+0x314>
    0.00 :   5829:       testb  $0x80,0x686(%r15)
    0.00 :   5831:       je     547c <gen8_de_irq_handler+0x30c>
    0.00 :   5837:       mov    %r12d,%esi
    0.00 :   583a:       and    $0x8,%esi
    0.00 :   583d:       je     547c <gen8_de_irq_handler+0x30c>
    0.00 :   5843:       mov    $0x0,%rdx
    0.00 :   584a:       mov    %r15,%rdi
    0.00 :   584d:       callq  4960 <ilk_hpd_irq_handler>
    0.00 :   5852:       cmpb   $0x9,0x60a(%r15)
    0.00 :   585a:       jne    5484 <gen8_de_irq_handler+0x314>
    0.00 :   5860:       testb  $0x2,0x625(%r15)
    0.00 :   5868:       je     5484 <gen8_de_irq_handler+0x314>
    0.00 :   586e:       and    $0x2,%r12d
    0.00 :   5872:       je     5484 <gen8_de_irq_handler+0x314>
    0.00 :   5878:       jmpq   57f7 <gen8_de_irq_handler+0x687>
    0.00 :   587d:       mov    %r15,%rdi
    0.00 :   5880:       callq  5885 <gen8_de_irq_handler+0x715>
    0.00 :   5885:       test   %r14d,%r14d
    0.00 :   5888:       jne    520f <gen8_de_irq_handler+0x9f>
    0.00 :   588e:       movl   $0x1,-0x48(%rbp)
    0.00 :   5895:       jmpq   5258 <gen8_de_irq_handler+0xe8>
    0.00 :   589a:       mov    %r12d,%eax
    0.00 :   589d:       mov    %r12d,%r13d
    0.00 :   58a0:       movl   $0x0,-0x38(%rbp)
    0.00 :   58a7:       and    $0x3f000000,%eax
    0.00 :   58ac:       and    $0x70000,%r13d
    0.00 :   58b3:       movl   $0x0,-0x34(%rbp)
    0.00 :   58ba:       mov    %eax,-0x3c(%rbp)
    0.00 :   58bd:       je     5b2f <gen8_de_irq_handler+0x9bf>
    0.00 :   58c3:       mov    $0x1,%edx
    0.00 :   58c8:       mov    $0xc4030,%esi
    0.00 :   58cd:       mov    %rbx,%rdi
    0.00 :   58d0:       mov    0x7f0(%r15),%rax
    0.00 :   58d7:       lea    -0x34(%rbp),%r14
    0.00 :   58db:       callq  58e0 <gen8_de_irq_handler+0x770>
    0.00 :   58e0:       mov    0x810(%r15),%r8
    0.00 :   58e7:       mov    %eax,%edx
    0.00 :   58e9:       mov    $0x1,%ecx
    0.00 :   58ee:       mov    %eax,-0x40(%rbp)
    0.00 :   58f1:       mov    $0xc4030,%esi
    0.00 :   58f6:       mov    %rbx,%rdi
    0.00 :   58f9:       callq  58fe <gen8_de_irq_handler+0x78e>
    0.00 :   58fe:       mov    -0x40(%rbp),%eax
    0.00 :   5901:       lea    -0x38(%rbp),%rdi
    0.00 :   5905:       mov    $0x0,%r9
    0.00 :   590c:       mov    $0x0,%r8
    0.00 :   5913:       mov    %r13d,%edx
    0.00 :   5916:       mov    %r14,%rsi
    0.00 :   5919:       mov    %rdi,-0x48(%rbp)
    0.00 :   591d:       mov    %eax,%ecx
    0.00 :   591f:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   5924:       mov    -0x3c(%rbp),%edi
    0.00 :   5927:       test   %edi,%edi
    0.00 :   5929:       je     5983 <gen8_de_irq_handler+0x813>
    0.00 :   592b:       mov    $0x1,%edx
    0.00 :   5930:       mov    $0xc4034,%esi
    0.00 :   5935:       mov    %rbx,%rdi
    0.00 :   5938:       mov    0x7f0(%r15),%rax
    0.00 :   593f:       callq  5944 <gen8_de_irq_handler+0x7d4>
    0.00 :   5944:       mov    %eax,%r13d
    0.00 :   5947:       mov    $0x1,%ecx
    0.00 :   594c:       mov    $0xc4034,%esi
    0.00 :   5951:       mov    %r13d,%edx
    0.00 :   5954:       mov    %rbx,%rdi
    0.00 :   5957:       mov    0x810(%r15),%rax
    0.00 :   595e:       callq  5963 <gen8_de_irq_handler+0x7f3>
    0.00 :   5963:       mov    -0x3c(%rbp),%edx
    0.00 :   5966:       mov    -0x48(%rbp),%rdi
    0.00 :   596a:       mov    $0x0,%r9
    0.00 :   5971:       mov    $0x0,%r8
    0.00 :   5978:       mov    %r13d,%ecx
    0.00 :   597b:       mov    %r14,%rsi
    0.00 :   597e:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   5983:       mov    -0x38(%rbp),%esi
    0.00 :   5986:       test   %esi,%esi
    0.00 :   5988:       je     5995 <gen8_de_irq_handler+0x825>
    0.00 :   598a:       mov    -0x34(%rbp),%edx
    0.00 :   598d:       mov    %r15,%rdi
    0.00 :   5990:       callq  5995 <gen8_de_irq_handler+0x825>
    0.00 :   5995:       and    $0x800000,%r12d
    0.00 :   599c:       je     5739 <gen8_de_irq_handler+0x5c9>
    0.00 :   59a2:       lea    0x4a30(%r15),%rdi
    0.00 :   59a9:       xor    %ecx,%ecx
    0.00 :   59ab:       xor    %edx,%edx
    0.00 :   59ad:       mov    $0x3,%esi
    0.00 :   59b2:       callq  59b7 <gen8_de_irq_handler+0x847>
    0.00 :   59b7:       jmpq   5739 <gen8_de_irq_handler+0x5c9>
    0.00 :   59bc:       mov    $0x0,%rdx
    0.00 :   59c3:       mov    %r12d,%esi
    0.00 :   59c6:       mov    %r15,%rdi
    0.00 :   59c9:       callq  4e70 <icp_irq_handler>
    0.00 :   59ce:       movl   $0x1,-0x48(%rbp)
    0.00 :   59d5:       jmpq   5740 <gen8_de_irq_handler+0x5d0>
    0.00 :   59da:       mov    $0x0,%rdi
    0.00 :   59e1:       callq  59e6 <gen8_de_irq_handler+0x876>
    0.00 :   59e6:       jmpq   54d6 <gen8_de_irq_handler+0x366>
    0.00 :   59eb:       mov    -0x34(%rbp),%edx
    0.00 :   59ee:       mov    %r15,%rdi
    0.00 :   59f1:       callq  59f6 <gen8_de_irq_handler+0x886>
    0.00 :   59f6:       jmpq   53e9 <gen8_de_irq_handler+0x279>
    0.00 :   59fb:       movl   $0x0,-0x48(%rbp)
    0.00 :   5a02:       jmpq   5258 <gen8_de_irq_handler+0xe8>
    0.00 :   5a07:       mov    $0x0,%rdx
    0.00 :   5a0e:       mov    %r12d,%esi
    0.00 :   5a11:       mov    %r15,%rdi
    0.00 :   5a14:       callq  4e70 <icp_irq_handler>
    0.00 :   5a19:       movl   $0x1,-0x48(%rbp)
    0.00 :   5a20:       jmpq   5740 <gen8_de_irq_handler+0x5d0>
    0.00 :   5a25:       mov    %r12d,%esi
    0.00 :   5a28:       mov    %r15,%rdi
    0.00 :   5a2b:       callq  4b30 <cpt_irq_handler>
    0.00 :   5a30:       jmpq   5739 <gen8_de_irq_handler+0x5c9>
    0.00 :   5a35:       mov    $0x0,%rdi
    0.00 :   5a3c:       callq  5a41 <gen8_de_irq_handler+0x8d1>
    0.00 :   5a41:       movl   $0x0,-0x48(%rbp)
    0.00 :   5a48:       jmpq   5258 <gen8_de_irq_handler+0xe8>
    0.00 :   5a4d:       mov    $0x0,%rdi
    0.00 :   5a54:       callq  5a59 <gen8_de_irq_handler+0x8e9>
    0.00 :   5a59:       jmpq   548b <gen8_de_irq_handler+0x31b>
    0.00 :   5a5e:       mov    -0x40(%rbp),%ecx
    0.00 :   5a61:       test   %ecx,%ecx
    0.00 :   5a63:       je     53da <gen8_de_irq_handler+0x26a>
    0.00 :   5a69:       lea    -0x38(%rbp),%rax
    0.00 :   5a6d:       lea    -0x34(%rbp),%r14
    0.00 :   5a71:       mov    %rax,-0x48(%rbp)
    0.00 :   5a75:       jmpq   5380 <gen8_de_irq_handler+0x210>
    0.00 :   5a7a:       mov    $0x0,%rdi
    0.00 :   5a81:       callq  5a86 <gen8_de_irq_handler+0x916>
    0.00 :   5a86:       jmpq   588e <gen8_de_irq_handler+0x71e>
    0.00 :   5a8b:       mov    %r13,%rdi
    0.00 :   5a8e:       movl   $0x0,-0x38(%rbp)
    0.00 :   5a95:       movl   $0x0,-0x34(%rbp)
    0.00 :   5a9c:       mov    0x7f0(%r15),%rax
    0.00 :   5aa3:       mov    $0x1,%edx
    0.00 :   5aa8:       mov    $0xc4030,%esi
    0.00 :   5aad:       callq  5ab2 <gen8_de_irq_handler+0x942>
    0.00 :   5ab2:       mov    0x810(%r15),%r8
    0.00 :   5ab9:       mov    %eax,%edx
    0.00 :   5abb:       mov    %eax,-0x48(%rbp)
    0.00 :   5abe:       mov    %r13,%rdi
    0.00 :   5ac1:       mov    $0x1,%ecx
    0.00 :   5ac6:       mov    $0xc4030,%esi
    0.00 :   5acb:       callq  5ad0 <gen8_de_irq_handler+0x960>
    0.00 :   5ad0:       mov    -0x48(%rbp),%eax
    0.00 :   5ad3:       lea    -0x34(%rbp),%r14
    0.00 :   5ad7:       lea    -0x38(%rbp),%rdi
    0.00 :   5adb:       mov    %ebx,%edx
    0.00 :   5add:       mov    $0x0,%r9
    0.00 :   5ae4:       mov    $0x0,%r8
    0.00 :   5aeb:       mov    %r14,%rsi
    0.00 :   5aee:       mov    %eax,%ecx
    0.00 :   5af0:       callq  48c0 <intel_get_hpd_pins.isra.10>
    0.00 :   5af5:       mov    -0x34(%rbp),%edx
    0.00 :   5af8:       mov    -0x38(%rbp),%esi
    0.00 :   5afb:       mov    %r15,%rdi
    0.00 :   5afe:       callq  5b03 <gen8_de_irq_handler+0x993>
    0.00 :   5b03:       jmpq   5852 <gen8_de_irq_handler+0x6e2>
    0.00 :   5b08:       mov    $0x0,%rsi
    0.00 :   5b0f:       mov    $0x2,%edi
    0.00 :   5b14:       callq  5b19 <gen8_de_irq_handler+0x9a9>
    0.00 :   5b19:       jmpq   5740 <gen8_de_irq_handler+0x5d0>
    0.00 :   5b1e:       mov    $0x0,%rdi
    0.00 :   5b25:       callq  5b2a <gen8_de_irq_handler+0x9ba>
    0.00 :   5b2a:       jmpq   53f0 <gen8_de_irq_handler+0x280>
    0.00 :   5b2f:       mov    -0x3c(%rbp),%edx
    0.00 :   5b32:       test   %edx,%edx
    0.00 :   5b34:       je     5995 <gen8_de_irq_handler+0x825>
    0.00 :   5b3a:       lea    -0x38(%rbp),%rax
    0.00 :   5b3e:       lea    -0x34(%rbp),%r14
    0.00 :   5b42:       mov    %rax,-0x48(%rbp)
    0.00 :   5b46:       jmpq   592b <gen8_de_irq_handler+0x7bb>
    0.00 :   5b4b:       mov    -0x3c(%rbp),%eax
    0.00 :   5b4e:       test   %eax,%eax
    0.00 :   5b50:       je     572c <gen8_de_irq_handler+0x5bc>
    0.00 :   5b56:       lea    -0x38(%rbp),%rax
    0.00 :   5b5a:       lea    -0x34(%rbp),%r14
    0.00 :   5b5e:       mov    %rax,-0x48(%rbp)
    0.00 :   5b62:       jmpq   56c2 <gen8_de_irq_handler+0x552>
    0.00 :   5b67:       callq  5b6c <gen8_de_irq_handler+0x9fc>
 Percent |	Source code & Disassembly of libc-2.27.so for cycles (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           000000000008b9a0 <_IO_file_xsputn@@GLIBC_2.2.5>:
    0.00 :   8b9a0:       push   %r15
    0.00 :   8b9a2:       push   %r14
    0.00 :   8b9a4:       push   %r13
    0.00 :   8b9a6:       push   %r12
    0.00 :   8b9a8:       xor    %r12d,%r12d
    0.00 :   8b9ab:       push   %rbp
    0.00 :   8b9ac:       push   %rbx
    0.00 :   8b9ad:       sub    $0x18,%rsp
    0.00 :   8b9b1:       test   %rdx,%rdx
    0.00 :   8b9b4:       je     8ba13 <_IO_file_xsputn@@GLIBC_2.2.5+0x73>
    0.00 :   8b9b6:       mov    %rdi,%rbx
    0.00 :   8b9b9:       mov    %rsi,%r13
    0.00 :   8b9bc:       mov    %rdx,%rbp
    0.00 :   8b9bf:       mov    (%rbx),%eax
    0.00 :   8b9c1:       mov    0x28(%rdi),%rdi
    0.00 :   8b9c5:       and    $0xa00,%eax
    0.00 :   8b9ca:       cmp    $0xa00,%eax
    0.00 :   8b9cf:       je     8bab0 <_IO_file_xsputn@@GLIBC_2.2.5+0x110>
    0.00 :   8b9d5:       mov    0x30(%rbx),%rdx
    0.00 :   8b9d9:       cmp    %rdi,%rdx
    0.00 :   8b9dc:       jbe    8ba28 <_IO_file_xsputn@@GLIBC_2.2.5+0x88>
    0.00 :   8b9de:       sub    %rdi,%rdx
    0.00 :   8b9e1:       test   %rdx,%rdx
    0.00 :   8b9e4:       je     8ba28 <_IO_file_xsputn@@GLIBC_2.2.5+0x88>
    0.00 :   8b9e6:       xor    %r14d,%r14d
    0.00 :   8b9e9:       cmp    %rdx,%rbp
    0.00 :   8b9ec:       mov    %r13,%rsi
    0.00 :   8b9ef:       mov    %rbp,%r15
    0.00 :   8b9f2:       cmovbe %rbp,%rdx
    0.00 :   8b9f6:       mov    %rdx,%r12
    0.00 :   8b9f9:       add    %r12,%r13
    0.00 :   8b9fc:       sub    %r12,%r15
    0.00 :   8b9ff:       callq  21230 <*ABS*+0x9ee50@plt>
    0.00 :   8ba04:       mov    %rax,0x28(%rbx)
    0.00 :   8ba08:       add    %r15,%r14
    0.00 :   8ba0b:       jne    8ba2b <_IO_file_xsputn@@GLIBC_2.2.5+0x8b>
    0.00 :   8ba0d:       sub    %r15,%rbp
    0.00 :   8ba10:       mov    %rbp,%r12
    0.00 :   8ba13:       add    $0x18,%rsp
    0.00 :   8ba17:       mov    %r12,%rax
    0.00 :   8ba1a:       pop    %rbx
    0.00 :   8ba1b:       pop    %rbp
    0.00 :   8ba1c:       pop    %r12
    0.00 :   8ba1e:       pop    %r13
    0.00 :   8ba20:       pop    %r14
    0.00 :   8ba22:       pop    %r15
    0.00 :   8ba24:       retq
    0.00 :   8ba25:       nopl   (%rax)
    0.00 :   8ba28:       mov    %rbp,%r15
    0.00 :   8ba2b:       mov    0xd8(%rbx),%rax
    0.00 :   8ba32:       lea    0x35bd27(%rip),%r14        # 3e7760 <h_nerr@@GLIBC_2.2.5+0x22a9f0>
    0.00 :   8ba39:       lea    0x35ca88(%rip),%r12        # 3e84c8 <_IO_file_jumps@@GLIBC_2.2.5+0x228>
    0.00 :   8ba40:       sub    %r14,%r12
    0.00 :   8ba43:       mov    %rax,%rdx
    0.00 :   8ba46:       sub    %r14,%rdx
    0.00 :   8ba49:       cmp    %rdx,%r12
    0.00 :   8ba4c:       jbe    8bc30 <_IO_file_xsputn@@GLIBC_2.2.5+0x290>
    0.00 :   8ba52:       mov    $0xffffffff,%esi
    0.00 :   8ba57:       mov    %rbx,%rdi
    0.00 :   8ba5a:       callq  *0x18(%rax)
    0.00 :   8ba5d:       cmp    $0xffffffff,%eax
    0.00 :   8ba60:       je     8bb00 <_IO_file_xsputn@@GLIBC_2.2.5+0x160>
    0.00 :   8ba66:       mov    0x40(%rbx),%rcx
    0.00 :   8ba6a:       sub    0x38(%rbx),%rcx
    0.00 :   8ba6e:       mov    %r15,%r8
    0.00 :   8ba71:       cmp    $0x7f,%rcx
    0.00 :   8ba75:       jbe    8ba82 <_IO_file_xsputn@@GLIBC_2.2.5+0xe2>
    0.00 :   8ba77:       mov    %r15,%rax
    0.00 :   8ba7a:       xor    %edx,%edx
    0.00 :   8ba7c:       div    %rcx
    0.00 :   8ba7f:       sub    %rdx,%r8
    0.00 :   8ba82:       test   %r8,%r8
    0.00 :   8ba85:       jne    8bb20 <_IO_file_xsputn@@GLIBC_2.2.5+0x180>
    0.00 :   8ba8b:       test   %r15,%r15
    0.00 :   8ba8e:       mov    %rbp,%r12
    0.00 :   8ba91:       je     8ba13 <_IO_file_xsputn@@GLIBC_2.2.5+0x73>
    0.00 :   8ba93:       lea    0x0(%r13,%r8,1),%rsi
    0.00 :   8ba98:       mov    %r15,%rdx
    0.00 :   8ba9b:       mov    %rbx,%rdi
    0.00 :   8ba9e:       callq  8e490 <_IO_default_xsputn@@GLIBC_2.2.5>
    0.00 :   8baa3:       sub    %rax,%r15
    0.00 :   8baa6:       sub    %r15,%r12
    0.00 :   8baa9:       jmpq   8ba13 <_IO_file_xsputn@@GLIBC_2.2.5+0x73>
    0.00 :   8baae:       xchg   %ax,%ax
    0.00 :   8bab0:       mov    0x40(%rbx),%rdx
    0.00 :   8bab4:       sub    %rdi,%rdx
    0.00 :   8bab7:       cmp    %rdx,%rbp
    0.00 :   8baba:       ja     8b9e1 <_IO_file_xsputn@@GLIBC_2.2.5+0x41>
    0.00 :   8bac0:       lea    (%rsi,%rbp,1),%rcx
    0.00 :   8bac4:       cmp    %rcx,%rsi
    0.00 :   8bac7:       jae    8b9e6 <_IO_file_xsputn@@GLIBC_2.2.5+0x46>
  100.00 :   8bacd:       cmpb   $0xa,-0x1(%rcx)
    0.00 :   8bad1:       lea    -0x1(%rcx),%rax
    0.00 :   8bad5:       jne    8baed <_IO_file_xsputn@@GLIBC_2.2.5+0x14d>
    0.00 :   8bad7:       jmpq   8bc10 <_IO_file_xsputn@@GLIBC_2.2.5+0x270>
    0.00 :   8badc:       nopl   0x0(%rax)
    0.00 :   8bae0:       sub    $0x1,%rax
    0.00 :   8bae4:       cmpb   $0xa,(%rax)
    0.00 :   8bae7:       je     8bc10 <_IO_file_xsputn@@GLIBC_2.2.5+0x270>
    0.00 :   8baed:       cmp    %rax,%r13
    0.00 :   8baf0:       jne    8bae0 <_IO_file_xsputn@@GLIBC_2.2.5+0x140>
    0.00 :   8baf2:       jmpq   8b9e6 <_IO_file_xsputn@@GLIBC_2.2.5+0x46>
    0.00 :   8baf7:       nopw   0x0(%rax,%rax,1)
    0.00 :   8bb00:       sub    %r15,%rbp
    0.00 :   8bb03:       mov    $0xffffffffffffffff,%r12
    0.00 :   8bb0a:       test   %r15,%r15
    0.00 :   8bb0d:       cmovne %rbp,%r12
    0.00 :   8bb11:       jmpq   8ba13 <_IO_file_xsputn@@GLIBC_2.2.5+0x73>
    0.00 :   8bb16:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   8bb20:       mov    0xd8(%rbx),%rax
    0.00 :   8bb27:       mov    %rax,%rdx
    0.00 :   8bb2a:       sub    %r14,%rdx
    0.00 :   8bb2d:       testl  $0x1000,(%rbx)
    0.00 :   8bb33:       jne    8bc00 <_IO_file_xsputn@@GLIBC_2.2.5+0x260>
    0.00 :   8bb39:       mov    0x10(%rbx),%rcx
    0.00 :   8bb3d:       mov    0x20(%rbx),%rsi
    0.00 :   8bb41:       cmp    %rsi,%rcx
    0.00 :   8bb44:       je     8bb86 <_IO_file_xsputn@@GLIBC_2.2.5+0x1e6>
    0.00 :   8bb46:       cmp    %rdx,%r12
    0.00 :   8bb49:       jbe    8bca0 <_IO_file_xsputn@@GLIBC_2.2.5+0x300>
    0.00 :   8bb4f:       sub    %rcx,%rsi
    0.00 :   8bb52:       mov    %r8,(%rsp)
    0.00 :   8bb56:       mov    $0x1,%edx
    0.00 :   8bb5b:       mov    %rbx,%rdi
    0.00 :   8bb5e:       callq  *0x80(%rax)
    0.00 :   8bb64:       cmp    $0xffffffffffffffff,%rax
    0.00 :   8bb68:       je     8ba0d <_IO_file_xsputn@@GLIBC_2.2.5+0x6d>
    0.00 :   8bb6e:       mov    %rax,0x90(%rbx)
    0.00 :   8bb75:       mov    0xd8(%rbx),%rax
    0.00 :   8bb7c:       mov    (%rsp),%r8
    0.00 :   8bb80:       mov    %rax,%rdx
    0.00 :   8bb83:       sub    %r14,%rdx
    0.00 :   8bb86:       cmp    %rdx,%r12
    0.00 :   8bb89:       jbe    8bc84 <_IO_file_xsputn@@GLIBC_2.2.5+0x2e4>
    0.00 :   8bb8f:       mov    %r8,%rdx
    0.00 :   8bb92:       mov    %r8,(%rsp)
    0.00 :   8bb96:       mov    %r13,%rsi
    0.00 :   8bb99:       mov    %rbx,%rdi
    0.00 :   8bb9c:       callq  *0x78(%rax)
    0.00 :   8bb9f:       mov    %rax,%r12
    0.00 :   8bba2:       mov    (%rsp),%r8
    0.00 :   8bba6:       movzwl 0x80(%rbx),%eax
    0.00 :   8bbad:       test   %r12,%r12
    0.00 :   8bbb0:       je     8bbbb <_IO_file_xsputn@@GLIBC_2.2.5+0x21b>
    0.00 :   8bbb2:       test   %ax,%ax
    0.00 :   8bbb5:       jne    8bc63 <_IO_file_xsputn@@GLIBC_2.2.5+0x2c3>
    0.00 :   8bbbb:       mov    0xc0(%rbx),%edx
    0.00 :   8bbc1:       mov    0x38(%rbx),%rax
    0.00 :   8bbc5:       test   %edx,%edx
    0.00 :   8bbc7:       mov    %rax,0x18(%rbx)
    0.00 :   8bbcb:       mov    %rax,0x8(%rbx)
    0.00 :   8bbcf:       mov    %rax,0x10(%rbx)
    0.00 :   8bbd3:       mov    %rax,0x28(%rbx)
    0.00 :   8bbd7:       mov    %rax,0x20(%rbx)
    0.00 :   8bbdb:       jle    8bc48 <_IO_file_xsputn@@GLIBC_2.2.5+0x2a8>
    0.00 :   8bbdd:       mov    0x40(%rbx),%rax
    0.00 :   8bbe1:       sub    %r12,%r15
    0.00 :   8bbe4:       cmp    %r8,%r12
    0.00 :   8bbe7:       mov    %rax,0x30(%rbx)
    0.00 :   8bbeb:       jae    8ba8b <_IO_file_xsputn@@GLIBC_2.2.5+0xeb>
    0.00 :   8bbf1:       jmpq   8ba0d <_IO_file_xsputn@@GLIBC_2.2.5+0x6d>
    0.00 :   8bbf6:       nopw   %cs:0x0(%rax,%rax,1)
    0.00 :   8bc00:       movq   $0xffffffffffffffff,0x90(%rbx)
    0.00 :   8bc0b:       jmpq   8bb86 <_IO_file_xsputn@@GLIBC_2.2.5+0x1e6>
    0.00 :   8bc10:       sub    %r13,%rax
    0.00 :   8bc13:       add    $0x1,%rax
    0.00 :   8bc17:       mov    %rax,%rdx
    0.00 :   8bc1a:       jne    8bc58 <_IO_file_xsputn@@GLIBC_2.2.5+0x2b8>
    0.00 :   8bc1c:       mov    %rbp,%r15
    0.00 :   8bc1f:       mov    $0x1,%r14d
    0.00 :   8bc25:       jmpq   8ba08 <_IO_file_xsputn@@GLIBC_2.2.5+0x68>
    0.00 :   8bc2a:       nopw   0x0(%rax,%rax,1)
    0.00 :   8bc30:       mov    %rax,(%rsp)
    0.00 :   8bc34:       callq  8a1c0 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8bc39:       mov    (%rsp),%rax
    0.00 :   8bc3d:       jmpq   8ba52 <_IO_file_xsputn@@GLIBC_2.2.5+0xb2>
    0.00 :   8bc42:       nopw   0x0(%rax,%rax,1)
    0.00 :   8bc48:       testl  $0x202,(%rbx)
    0.00 :   8bc4e:       jne    8bbe1 <_IO_file_xsputn@@GLIBC_2.2.5+0x241>
    0.00 :   8bc50:       jmp    8bbdd <_IO_file_xsputn@@GLIBC_2.2.5+0x23d>
    0.00 :   8bc52:       nopw   0x0(%rax,%rax,1)
    0.00 :   8bc58:       mov    $0x1,%r14d
    0.00 :   8bc5e:       jmpq   8b9e9 <_IO_file_xsputn@@GLIBC_2.2.5+0x49>
    0.00 :   8bc63:       lea    -0x1(%rax),%edi
    0.00 :   8bc66:       mov    %r12d,%edx
    0.00 :   8bc69:       mov    %r13,%rsi
    0.00 :   8bc6c:       callq  8f110 <_IO_adjust_column@@GLIBC_2.2.5>
    0.00 :   8bc71:       add    $0x1,%eax
    0.00 :   8bc74:       mov    (%rsp),%r8
    0.00 :   8bc78:       mov    %ax,0x80(%rbx)
    0.00 :   8bc7f:       jmpq   8bbbb <_IO_file_xsputn@@GLIBC_2.2.5+0x21b>
    0.00 :   8bc84:       mov    %rax,0x8(%rsp)
    0.00 :   8bc89:       mov    %r8,(%rsp)
    0.00 :   8bc8d:       callq  8a1c0 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8bc92:       mov    0x8(%rsp),%rax
    0.00 :   8bc97:       mov    (%rsp),%r8
    0.00 :   8bc9b:       jmpq   8bb8f <_IO_file_xsputn@@GLIBC_2.2.5+0x1ef>
    0.00 :   8bca0:       mov    %rax,0x8(%rsp)
    0.00 :   8bca5:       mov    %r8,(%rsp)
    0.00 :   8bca9:       callq  8a1c0 <fmemopen@GLIBC_2.2.5+0x230>
    0.00 :   8bcae:       mov    0x20(%rbx),%rsi
    0.00 :   8bcb2:       mov    0x10(%rbx),%rcx
    0.00 :   8bcb6:       mov    0x8(%rsp),%rax
    0.00 :   8bcbb:       mov    (%rsp),%r8
    0.00 :   8bcbf:       jmpq   8bb4f <_IO_file_xsputn@@GLIBC_2.2.5+0x1af>
 Percent |	Source code & Disassembly of kvm.ko for cycles (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000015580 <pvclock_gtod_notify>:
         :           pvclock_gtod_notify():
  100.00 :   15580:       callq  15585 <pvclock_gtod_notify+0x5>
    0.00 :   15585:       push   %rbp
    0.00 :   15586:       addl   $0x1,0x0(%rip)        # 1558d <pvclock_gtod_notify+0xd>
    0.00 :   1558d:       mov    0x98(%rdx),%rax
    0.00 :   15594:       add    0x28(%rdx),%rax
    0.00 :   15598:       mov    %rsp,%rbp
    0.00 :   1559b:       mov    (%rdx),%rcx
    0.00 :   1559e:       mov    %rax,0x0(%rip)        # 155a5 <pvclock_gtod_notify+0x25>
    0.00 :   155a5:       mov    0x20(%rdx),%rax
    0.00 :   155a9:       mov    0x24(%rcx),%ecx
    0.00 :   155ac:       mov    %rax,0x0(%rip)        # 155b3 <pvclock_gtod_notify+0x33>
    0.00 :   155b3:       mov    0x70(%rdx),%rax
    0.00 :   155b7:       mov    %ecx,0x0(%rip)        # 155bd <pvclock_gtod_notify+0x3d>
    0.00 :   155bd:       mov    0x10(%rdx),%rcx
    0.00 :   155c1:       mov    %rax,0x0(%rip)        # 155c8 <pvclock_gtod_notify+0x48>
    0.00 :   155c8:       mov    %rcx,0x0(%rip)        # 155cf <pvclock_gtod_notify+0x4f>
    0.00 :   155cf:       mov    0x8(%rdx),%rcx
    0.00 :   155d3:       mov    %rcx,0x0(%rip)        # 155da <pvclock_gtod_notify+0x5a>
    0.00 :   155da:       mov    0x18(%rdx),%ecx
    0.00 :   155dd:       mov    %ecx,0x0(%rip)        # 155e3 <pvclock_gtod_notify+0x63>
    0.00 :   155e3:       mov    0x1c(%rdx),%ecx
    0.00 :   155e6:       mov    %ecx,0x0(%rip)        # 155ec <pvclock_gtod_notify+0x6c>
    0.00 :   155ec:       mov    0x0(%rip),%eax        # 155f2 <pvclock_gtod_notify+0x72>
    0.00 :   155f2:       addl   $0x1,0x0(%rip)        # 155f9 <pvclock_gtod_notify+0x79>
    0.00 :   155f9:       and    $0xfffffffd,%eax
    0.00 :   155fc:       cmp    $0x1,%eax
    0.00 :   155ff:       je     1560b <pvclock_gtod_notify+0x8b>
    0.00 :   15601:       mov    0x0(%rip),%eax        # 15607 <pvclock_gtod_notify+0x87>
    0.00 :   15607:       test   %eax,%eax
    0.00 :   15609:       jne    1560f <pvclock_gtod_notify+0x8f>
    0.00 :   1560b:       xor    %eax,%eax
    0.00 :   1560d:       pop    %rbp
    0.00 :   1560e:       retq
    0.00 :   1560f:       mov    0x0(%rip),%rsi        # 15616 <pvclock_gtod_notify+0x96>
    0.00 :   15616:       mov    $0x0,%rdx
    0.00 :   1561d:       mov    $0x2000,%edi
    0.00 :   15622:       callq  15627 <pvclock_gtod_notify+0xa7>
    0.00 :   15627:       xor    %eax,%eax
    0.00 :   15629:       pop    %rbp
    0.00 :   1562a:       retq
 Percent |	Source code & Disassembly of i915.ko for cycles (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           0000000000040860 <process_csb>:
         :           process_csb():
    0.00 :   40860:       callq  40865 <process_csb+0x5>
    0.00 :   40865:       push   %rbp
    0.00 :   40866:       mov    %rsp,%rbp
    0.00 :   40869:       push   %r15
    0.00 :   4086b:       push   %r14
    0.00 :   4086d:       push   %r13
    0.00 :   4086f:       push   %r12
    0.00 :   40871:       push   %rbx
    0.00 :   40872:       sub    $0x38,%rsp
    0.00 :   40876:       mov    0x448(%rdi),%rax
    0.00 :   4087d:       movzbl 0x451(%rdi),%ebx
    0.00 :   40884:       mov    %rax,-0x38(%rbp)
    0.00 :   40888:       movzbl 0x450(%rdi),%eax
    0.00 :   4088f:       mov    %al,-0x29(%rbp)
    0.00 :   40892:       mov    0x440(%rdi),%rax
    0.00 :   40899:       mov    (%rax),%eax
    0.00 :   4089b:       cmp    %al,%bl
    0.00 :   4089d:       mov    %al,-0x2a(%rbp)
    0.00 :   408a0:       je     40a18 <process_csb+0x1b8>
    0.00 :   408a6:       mov    %rdi,%r15
    0.00 :   408a9:       lfence
    0.00 :   408ac:       lea    0x3e0(%rdi),%rax
    0.00 :   408b3:       xor    %r12d,%r12d
    0.00 :   408b6:       mov    %rax,-0x40(%rbp)
    0.00 :   408ba:       jmpq   4094a <process_csb+0xea>
    0.00 :   408bf:       mov    0x4(%rax),%ecx
    0.00 :   408c2:       mov    %rsi,%rax
    0.00 :   408c5:       shl    $0x26,%rax
    0.00 :   408c9:       shr    $0x35,%rax
    0.00 :   408cd:       shr    $0xf,%rcx
    0.00 :   408d1:       and    $0x7ff,%ecx
    0.00 :   408d7:       cmp    $0x7ff,%rax
    0.00 :   408dd:       je     40b5b <process_csb+0x2fb>
    0.00 :   408e3:       cmp    $0x7ff,%rcx
    0.00 :   408ea:       jne    40b5b <process_csb+0x2fb>
  100.00 :   408f0:       mov    0x410(%r15),%eax
    0.00 :   408f7:       mov    -0x40(%rbp),%rdi
    0.00 :   408fb:       lea    0x3f8(%r15),%rsi
    0.00 :   40902:       lea    0x1(%rax),%edx
    0.00 :   40905:       shl    $0x3,%rdx
    0.00 :   40909:       callq  4090e <process_csb+0xae>
    0.00 :   4090e:       mov    %rax,0x3d8(%r15)
    0.00 :   40915:       mov    (%rax),%rax
    0.00 :   40918:       mov    0x30(%rax),%rdx
    0.00 :   4091c:       and    $0x1,%edx
    0.00 :   4091f:       je     40b7d <process_csb+0x31d>
    0.00 :   40925:       mov    0x1d8(%r15),%rax
    0.00 :   4092c:       movl   $0x0,0xc8(%rax)
    0.00 :   40936:       movq   $0x0,0x3f8(%r15)
    0.00 :   40941:       cmp    -0x2a(%rbp),%bl
    0.00 :   40944:       je     409fd <process_csb+0x19d>
    0.00 :   4094a:       add    $0x1,%ebx
    0.00 :   4094d:       cmp    %bl,-0x29(%rbp)
    0.00 :   40950:       je     40b50 <process_csb+0x2f0>
    0.00 :   40956:       mov    -0x38(%rbp),%rcx
    0.00 :   4095a:       movzbl %bl,%eax
    0.00 :   4095d:       lea    (%rcx,%rax,8),%rax
    0.00 :   40961:       mov    (%r15),%rdx
    0.00 :   40964:       mov    (%rax),%esi
    0.00 :   40966:       cmpb   $0xb,0x60a(%rdx)
    0.00 :   4096d:       ja     408bf <process_csb+0x5f>
    0.00 :   40973:       test   $0x1,%sil
    0.00 :   40977:       jne    408f0 <process_csb+0x90>
    0.00 :   4097d:       mov    0x3d8(%r15),%rax
    0.00 :   40984:       and    $0x2,%esi
    0.00 :   40987:       mov    (%rax),%rdx
    0.00 :   4098a:       jne    40b09 <process_csb+0x2a9>
    0.00 :   40990:       test   %rdx,%rdx
    0.00 :   40993:       je     40941 <process_csb+0xe1>
    0.00 :   40995:       lea    0x8(%rax),%rdx
    0.00 :   40999:       mov    %rdx,0x3d8(%r15)
    0.00 :   409a0:       mov    (%rax),%r9
    0.00 :   409a3:       mov    0x60(%r9),%rdx
    0.00 :   409a7:       mov    0x10(%rdx),%rcx
    0.00 :   409ab:       add    $0x10,%rdx
    0.00 :   409af:       lea    -0x1(%rcx),%rsi
    0.00 :   409b3:       test   $0x3,%cl
    0.00 :   409b6:       mov    %rcx,%rax
    0.00 :   409b9:       cmove  %r12,%rsi
    0.00 :   409bd:       lock cmpxchg %rsi,(%rdx)
    0.00 :   409c2:       jne    40dda <process_csb+0x57a>
    0.00 :   409c8:       test   %rsi,%rsi
    0.00 :   409cb:       je     40c86 <process_csb+0x426>
    0.00 :   409d1:       test   %r9,%r9
    0.00 :   409d4:       je     40941 <process_csb+0xe1>
    0.00 :   409da:       lea    0x38(%r9),%rdi
    0.00 :   409de:       lock decl 0x38(%r9)
    0.00 :   409e3:       js     409e9 <process_csb+0x189>
    0.00 :   409e9:       jne    40941 <process_csb+0xe1>
    0.00 :   409ef:       callq  409f4 <process_csb+0x194>
    0.00 :   409f4:       cmp    -0x2a(%rbp),%bl
    0.00 :   409f7:       jne    4094a <process_csb+0xea>
    0.00 :   409fd:       movzbl -0x29(%rbp),%r13d
    0.00 :   40a02:       mov    %bl,0x451(%r15)
    0.00 :   40a09:       mov    -0x38(%rbp),%rbx
    0.00 :   40a0d:       lea    -0x4(%rbx,%r13,4),%rax
    0.00 :   40a12:       clflush (%rbx)
    0.00 :   40a15:       clflush (%rax)
    0.00 :   40a18:       add    $0x38,%rsp
    0.00 :   40a1c:       pop    %rbx
    0.00 :   40a1d:       pop    %r12
    0.00 :   40a1f:       pop    %r13
    0.00 :   40a21:       pop    %r14
    0.00 :   40a23:       pop    %r15
    0.00 :   40a25:       pop    %rbp
    0.00 :   40a26:       retq
    0.00 :   40a27:       mov    0x60(%r14),%r10
    0.00 :   40a2b:       mov    0x58(%r10),%rsi
    0.00 :   40a2f:       lea    0x60(%rsi),%rax
    0.00 :   40a33:       cmp    %rax,0x218(%r14)
    0.00 :   40a3a:       je     40c65 <process_csb+0x405>
    0.00 :   40a40:       mov    0x1598(%r13),%eax
    0.00 :   40a47:       test   %eax,%eax
    0.00 :   40a49:       jne    40bf5 <process_csb+0x395>
    0.00 :   40a4f:       mov    0x58(%r14),%rax
    0.00 :   40a53:       mov    %r14,%rdx
    0.00 :   40a56:       mov    $0x1,%esi
    0.00 :   40a5b:       mov    %r10,-0x48(%rbp)
    0.00 :   40a5f:       lea    0x480(%rax),%rdi
    0.00 :   40a66:       callq  40a6b <process_csb+0x20b>
    0.00 :   40a6b:       mov    0x8(%r13),%rdx
    0.00 :   40a6f:       mov    -0x48(%rbp),%r10
    0.00 :   40a73:       mov    0x308(%rdx),%eax
    0.00 :   40a79:       lea    0x308(%rdx),%rdi
    0.00 :   40a80:       cmp    $0x1,%eax
    0.00 :   40a83:       je     40de2 <process_csb+0x582>
    0.00 :   40a89:       lea    -0x1(%rax),%esi
    0.00 :   40a8c:       lock cmpxchg %esi,0x308(%rdx)
    0.00 :   40a94:       jne    40d9d <process_csb+0x53d>
    0.00 :   40a9a:       cmp    0x8(%r10),%r13
    0.00 :   40a9e:       je     40ac5 <process_csb+0x265>
    0.00 :   40aa0:       mov    0x110(%r10),%rax
    0.00 :   40aa7:       test   %rax,%rax
    0.00 :   40aaa:       je     40ac5 <process_csb+0x265>
    0.00 :   40aac:       movzbl 0x1b8(%r14),%edx
    0.00 :   40ab4:       movzbl 0x1b8(%rax),%eax
    0.00 :   40abb:       not    %edx
    0.00 :   40abd:       test   %eax,%edx
    0.00 :   40abf:       jne    40db1 <process_csb+0x551>
    0.00 :   40ac5:       mov    0x100(%r10),%rax
    0.00 :   40acc:       mov    0x30(%rax),%rax
    0.00 :   40ad0:       lock decl (%r10)
    0.00 :   40ad4:       js     40ada <process_csb+0x27a>
    0.00 :   40ada:       jne    40ae4 <process_csb+0x284>
    0.00 :   40adc:       mov    %r10,%rdi
    0.00 :   40adf:       callq  40ae4 <process_csb+0x284>
    0.00 :   40ae4:       test   %r14,%r14
    0.00 :   40ae7:       je     40aff <process_csb+0x29f>
    0.00 :   40ae9:       lea    0x38(%r14),%rdi
    0.00 :   40aed:       lock decl 0x38(%r14)
    0.00 :   40af2:       js     40af8 <process_csb+0x298>
    0.00 :   40af8:       jne    40aff <process_csb+0x29f>
    0.00 :   40afa:       callq  40aff <process_csb+0x29f>
    0.00 :   40aff:       mov    0x3d8(%r15),%rax
    0.00 :   40b06:       mov    (%rax),%rdx
    0.00 :   40b09:       test   %rdx,%rdx
    0.00 :   40b0c:       je     408f0 <process_csb+0x90>
    0.00 :   40b12:       lea    0x8(%rax),%rdx
    0.00 :   40b16:       mov    %rdx,0x3d8(%r15)
    0.00 :   40b1d:       mov    (%rax),%r14
    0.00 :   40b20:       mov    0x60(%r14),%rdx
    0.00 :   40b24:       mov    0x10(%rdx),%r13
    0.00 :   40b28:       add    $0x10,%rdx
    0.00 :   40b2c:       lea    -0x1(%r13),%rsi
    0.00 :   40b30:       test   $0x3,%r13b
    0.00 :   40b34:       mov    %r13,%rax
    0.00 :   40b37:       cmove  %r12,%rsi
    0.00 :   40b3b:       lock cmpxchg %rsi,(%rdx)
    0.00 :   40b40:       jne    40bed <process_csb+0x38d>
    0.00 :   40b46:       test   %rsi,%rsi
    0.00 :   40b49:       jne    40ae4 <process_csb+0x284>
    0.00 :   40b4b:       jmpq   40a27 <process_csb+0x1c7>
    0.00 :   40b50:       mov    -0x38(%rbp),%rax
    0.00 :   40b54:       xor    %ebx,%ebx
    0.00 :   40b56:       jmpq   40961 <process_csb+0x101>
    0.00 :   40b5b:       mov    0x3d8(%r15),%rax
    0.00 :   40b62:       cmp    $0x7ff,%rcx
    0.00 :   40b69:       mov    (%rax),%rdx
    0.00 :   40b6c:       je     40990 <process_csb+0x130>
    0.00 :   40b72:       and    $0x1,%esi
    0.00 :   40b75:       je     40990 <process_csb+0x130>
    0.00 :   40b7b:       jmp    40b09 <process_csb+0x2a9>
    0.00 :   40b7d:       mov    0x28(%rax),%rdx
    0.00 :   40b81:       mov    0x1c0(%rax),%rcx
    0.00 :   40b88:       mov    (%rcx),%ecx
    0.00 :   40b8a:       cmp    %edx,%ecx
    0.00 :   40b8c:       jns    40925 <process_csb+0xc5>
    0.00 :   40b92:       testb  $0x2,0x210(%rax)
    0.00 :   40b99:       mov    0x414(%r15),%ecx
    0.00 :   40ba0:       mov    $0x7fffffff,%edx
    0.00 :   40ba5:       mov    0x28(%rax),%rdi
    0.00 :   40ba9:       cmove  0x160(%rax),%edx
    0.00 :   40bb0:       mov    0x1c0(%rax),%rax
    0.00 :   40bb7:       mov    (%rax),%eax
    0.00 :   40bb9:       mov    %edx,%esi
    0.00 :   40bbb:       add    $0x1,%eax
    0.00 :   40bbe:       or     $0x2,%esi
    0.00 :   40bc1:       cmp    %edi,%eax
    0.00 :   40bc3:       cmovns %esi,%edx
    0.00 :   40bc6:       or     $0x1,%edx
    0.00 :   40bc9:       cmp    %edx,%ecx
    0.00 :   40bcb:       jl     40925 <process_csb+0xc5>
    0.00 :   40bd1:       mov    0x0(%rip),%rsi        # 40bd8 <process_csb+0x378>
    0.00 :   40bd8:       lea    0x330(%r15),%rdi
    0.00 :   40bdf:       add    $0x1,%rsi
    0.00 :   40be3:       callq  40be8 <process_csb+0x388>
    0.00 :   40be8:       jmpq   40925 <process_csb+0xc5>
    0.00 :   40bed:       mov    %rax,%r13
    0.00 :   40bf0:       jmpq   40b2c <process_csb+0x2cc>
    0.00 :   40bf5:       lea    0x1594(%r13),%rax
    0.00 :   40bfc:       mov    %r10,-0x50(%rbp)
    0.00 :   40c00:       mov    %rax,%rdi
    0.00 :   40c03:       mov    %rax,-0x48(%rbp)
    0.00 :   40c07:       callq  40c0c <process_csb+0x3ac>
    0.00 :   40c0c:       addl   $0x1,0x1590(%r13)
    0.00 :   40c14:       mov    %rax,%rsi
    0.00 :   40c17:       mov    0x1598(%r13),%edx
    0.00 :   40c1e:       mov    -0x50(%rbp),%r10
    0.00 :   40c22:       test   %edx,%edx
    0.00 :   40c24:       je     40c47 <process_csb+0x3e7>
    0.00 :   40c26:       mov    0x159c(%r13),%eax
    0.00 :   40c2d:       test   %eax,%eax
    0.00 :   40c2f:       je     40df4 <process_csb+0x594>
    0.00 :   40c35:       sub    $0x1,%eax
    0.00 :   40c38:       test   %eax,%eax
    0.00 :   40c3a:       mov    %eax,0x159c(%r13)
    0.00 :   40c41:       je     40f24 <process_csb+0x6c4>
    0.00 :   40c47:       mov    %r10,-0x50(%rbp)
    0.00 :   40c4b:       addl   $0x1,0x1590(%r13)
    0.00 :   40c53:       mov    -0x48(%rbp),%rdi
    0.00 :   40c57:       callq  40c5c <process_csb+0x3fc>
    0.00 :   40c5c:       mov    -0x50(%rbp),%r10
    0.00 :   40c60:       jmpq   40a4f <process_csb+0x1ef>
    0.00 :   40c65:       mov    0x30(%r14),%rax
    0.00 :   40c69:       test   $0x1,%al
    0.00 :   40c6b:       je     40d6f <process_csb+0x50f>
    0.00 :   40c71:       mov    %r13,%rdi
    0.00 :   40c74:       mov    %r10,-0x48(%rbp)
    0.00 :   40c78:       callq  40c7d <process_csb+0x41d>
    0.00 :   40c7d:       mov    -0x48(%rbp),%r10
    0.00 :   40c81:       jmpq   40a40 <process_csb+0x1e0>
    0.00 :   40c86:       mov    0x60(%r9),%r10
    0.00 :   40c8a:       mov    0x58(%r10),%rsi
    0.00 :   40c8e:       lea    0x60(%rsi),%rax
    0.00 :   40c92:       cmp    %rax,0x218(%r9)
    0.00 :   40c99:       je     40ed0 <process_csb+0x670>
    0.00 :   40c9f:       mov    0x1598(%rcx),%eax
    0.00 :   40ca5:       test   %eax,%eax
    0.00 :   40ca7:       jne    40e1c <process_csb+0x5bc>
    0.00 :   40cad:       mov    0x58(%r9),%rax
    0.00 :   40cb1:       mov    %r9,%rdx
    0.00 :   40cb4:       mov    $0x1,%esi
    0.00 :   40cb9:       mov    %r10,-0x58(%rbp)
    0.00 :   40cbd:       mov    %rcx,-0x50(%rbp)
    0.00 :   40cc1:       mov    %r9,-0x48(%rbp)
    0.00 :   40cc5:       lea    0x480(%rax),%rdi
    0.00 :   40ccc:       callq  40cd1 <process_csb+0x471>
    0.00 :   40cd1:       mov    -0x50(%rbp),%rcx
    0.00 :   40cd5:       mov    -0x48(%rbp),%r9
    0.00 :   40cd9:       mov    -0x58(%rbp),%r10
    0.00 :   40cdd:       mov    0x8(%rcx),%rdx
    0.00 :   40ce1:       mov    0x308(%rdx),%eax
    0.00 :   40ce7:       lea    0x308(%rdx),%rdi
    0.00 :   40cee:       cmp    $0x1,%eax
    0.00 :   40cf1:       je     40f5a <process_csb+0x6fa>
    0.00 :   40cf7:       lea    -0x1(%rax),%esi
    0.00 :   40cfa:       lock cmpxchg %esi,0x308(%rdx)
    0.00 :   40d02:       jne    40f55 <process_csb+0x6f5>
    0.00 :   40d08:       cmp    0x8(%r10),%rcx
    0.00 :   40d0c:       je     40d3f <process_csb+0x4df>
    0.00 :   40d0e:       mov    0x110(%r10),%rax
    0.00 :   40d15:       test   %rax,%rax
    0.00 :   40d18:       je     40d3f <process_csb+0x4df>
    0.00 :   40d1a:       movzbl 0x1b8(%r9),%edx
    0.00 :   40d22:       movzbl 0x1b8(%rax),%eax
    0.00 :   40d29:       not    %edx
    0.00 :   40d2b:       test   %eax,%edx
    0.00 :   40d2d:       je     40d3f <process_csb+0x4df>
    0.00 :   40d2f:       lock btsq $0x0,-0x12a8(%r10)
    0.00 :   40d39:       jae    40fb4 <process_csb+0x754>
    0.00 :   40d3f:       mov    0x100(%r10),%rax
    0.00 :   40d46:       mov    0x30(%rax),%rax
    0.00 :   40d4a:       lock decl (%r10)
    0.00 :   40d4e:       js     40d54 <process_csb+0x4f4>
    0.00 :   40d54:       jne    409d1 <process_csb+0x171>
    0.00 :   40d5a:       mov    %r9,-0x48(%rbp)
    0.00 :   40d5e:       mov    %r10,%rdi
    0.00 :   40d61:       callq  40d66 <process_csb+0x506>
    0.00 :   40d66:       mov    -0x48(%rbp),%r9
    0.00 :   40d6a:       jmpq   409d1 <process_csb+0x171>
    0.00 :   40d6f:       mov    0x28(%r14),%rax
    0.00 :   40d73:       mov    0x1c0(%r14),%rdx
    0.00 :   40d7a:       mov    (%rdx),%edx
    0.00 :   40d7c:       cmp    %eax,%edx
    0.00 :   40d7e:       js     40a40 <process_csb+0x1e0>
    0.00 :   40d84:       mov    0x58(%r10),%rsi
    0.00 :   40d88:       mov    %r13,%rdi
    0.00 :   40d8b:       mov    %r10,-0x48(%rbp)
    0.00 :   40d8f:       callq  40d94 <process_csb+0x534>
    0.00 :   40d94:       mov    -0x48(%rbp),%r10
    0.00 :   40d98:       jmpq   40a40 <process_csb+0x1e0>
    0.00 :   40d9d:       cmp    $0x1,%eax
    0.00 :   40da0:       je     40de2 <process_csb+0x582>
    0.00 :   40da2:       lea    -0x1(%rax),%edx
    0.00 :   40da5:       lock cmpxchg %edx,(%rdi)
    0.00 :   40da9:       je     40a9a <process_csb+0x23a>
    0.00 :   40daf:       jmp    40d9d <process_csb+0x53d>
    0.00 :   40db1:       lock btsq $0x0,-0x12a8(%r10)
    0.00 :   40dbb:       jb     40ac5 <process_csb+0x265>
    0.00 :   40dc1:       lea    -0x12b0(%r10),%rdi
    0.00 :   40dc8:       mov    %r10,-0x48(%rbp)
    0.00 :   40dcc:       callq  40dd1 <process_csb+0x571>
    0.00 :   40dd1:       mov    -0x48(%rbp),%r10
    0.00 :   40dd5:       jmpq   40ac5 <process_csb+0x265>
    0.00 :   40dda:       mov    %rax,%rcx
    0.00 :   40ddd:       jmpq   409af <process_csb+0x14f>
    0.00 :   40de2:       mov    %r10,-0x48(%rbp)
    0.00 :   40de6:       callq  40deb <process_csb+0x58b>
    0.00 :   40deb:       mov    -0x48(%rbp),%r10
    0.00 :   40def:       jmpq   40a9a <process_csb+0x23a>
    0.00 :   40df4:       mov    %rsi,-0x58(%rbp)
    0.00 :   40df8:       mov    %r10,-0x50(%rbp)
    0.00 :   40dfc:       callq  40e01 <process_csb+0x5a1>
    0.00 :   40e01:       sub    0x15a0(%r13),%rax
    0.00 :   40e08:       mov    -0x50(%rbp),%r10
    0.00 :   40e0c:       add    %rax,0x15b0(%r13)
    0.00 :   40e13:       mov    -0x58(%rbp),%rsi
    0.00 :   40e17:       jmpq   40c47 <process_csb+0x3e7>
    0.00 :   40e1c:       lea    0x1594(%rcx),%rax
    0.00 :   40e23:       mov    %rcx,-0x48(%rbp)
    0.00 :   40e27:       mov    %r10,-0x58(%rbp)
    0.00 :   40e2b:       mov    %r9,-0x50(%rbp)
    0.00 :   40e2f:       mov    %rax,%rdi
    0.00 :   40e32:       mov    %rax,%r14
    0.00 :   40e35:       callq  40e3a <process_csb+0x5da>
    0.00 :   40e3a:       mov    -0x48(%rbp),%rcx
    0.00 :   40e3e:       mov    %rax,%rsi
    0.00 :   40e41:       addl   $0x1,0x1590(%rcx)
    0.00 :   40e48:       mov    0x1598(%rcx),%eax
    0.00 :   40e4e:       mov    -0x50(%rbp),%r9
    0.00 :   40e52:       mov    -0x58(%rbp),%r10
    0.00 :   40e56:       test   %eax,%eax
    0.00 :   40e58:       je     40ea4 <process_csb+0x644>
    0.00 :   40e5a:       mov    0x159c(%rcx),%eax
    0.00 :   40e60:       test   %eax,%eax
    0.00 :   40e62:       je     40f7c <process_csb+0x71c>
    0.00 :   40e68:       sub    $0x1,%eax
    0.00 :   40e6b:       test   %eax,%eax
    0.00 :   40e6d:       mov    %eax,0x159c(%rcx)
    0.00 :   40e73:       jne    40ea4 <process_csb+0x644>
    0.00 :   40e75:       mov    %rsi,-0x60(%rbp)
    0.00 :   40e79:       mov    %rcx,-0x50(%rbp)
    0.00 :   40e7d:       mov    %r9,-0x48(%rbp)
    0.00 :   40e81:       callq  40e86 <process_csb+0x626>
    0.00 :   40e86:       mov    -0x50(%rbp),%rcx
    0.00 :   40e8a:       mov    -0x60(%rbp),%rsi
    0.00 :   40e8e:       mov    -0x58(%rbp),%r10
    0.00 :   40e92:       mov    -0x48(%rbp),%r9
    0.00 :   40e96:       sub    0x15a8(%rcx),%rax
    0.00 :   40e9d:       add    %rax,0x15b0(%rcx)
    0.00 :   40ea4:       mov    %r10,-0x58(%rbp)
    0.00 :   40ea8:       mov    %r9,-0x50(%rbp)
    0.00 :   40eac:       addl   $0x1,0x1590(%rcx)
    0.00 :   40eb3:       mov    %r14,%rdi
    0.00 :   40eb6:       mov    %rcx,-0x48(%rbp)
    0.00 :   40eba:       callq  40ebf <process_csb+0x65f>
    0.00 :   40ebf:       mov    -0x58(%rbp),%r10
    0.00 :   40ec3:       mov    -0x50(%rbp),%r9
    0.00 :   40ec7:       mov    -0x48(%rbp),%rcx
    0.00 :   40ecb:       jmpq   40cad <process_csb+0x44d>
    0.00 :   40ed0:       mov    0x30(%r9),%rax
    0.00 :   40ed4:       test   $0x1,%al
    0.00 :   40ed6:       jne    40ef1 <process_csb+0x691>
    0.00 :   40ed8:       mov    0x28(%r9),%rax
    0.00 :   40edc:       mov    0x1c0(%r9),%rdx
    0.00 :   40ee3:       mov    (%rdx),%edx
    0.00 :   40ee5:       cmp    %eax,%edx
    0.00 :   40ee7:       js     40c9f <process_csb+0x43f>
    0.00 :   40eed:       mov    0x58(%r10),%rsi
    0.00 :   40ef1:       mov    %rcx,%rdi
    0.00 :   40ef4:       mov    %r10,-0x58(%rbp)
    0.00 :   40ef8:       mov    %r9,-0x50(%rbp)
    0.00 :   40efc:       mov    %rcx,-0x48(%rbp)
    0.00 :   40f00:       callq  40f05 <process_csb+0x6a5>
    0.00 :   40f05:       mov    -0x48(%rbp),%rcx
    0.00 :   40f09:       mov    -0x58(%rbp),%r10
    0.00 :   40f0d:       mov    -0x50(%rbp),%r9
    0.00 :   40f11:       mov    0x1598(%rcx),%eax
    0.00 :   40f17:       test   %eax,%eax
    0.00 :   40f19:       je     40cad <process_csb+0x44d>
    0.00 :   40f1f:       jmpq   40e1c <process_csb+0x5bc>
    0.00 :   40f24:       mov    %rsi,-0x58(%rbp)
    0.00 :   40f28:       callq  40f2d <process_csb+0x6cd>
    0.00 :   40f2d:       sub    0x15a8(%r13),%rax
    0.00 :   40f34:       mov    -0x58(%rbp),%rsi
    0.00 :   40f38:       add    %rax,0x15b0(%r13)
    0.00 :   40f3f:       mov    -0x50(%rbp),%r10
    0.00 :   40f43:       jmpq   40c47 <process_csb+0x3e7>
    0.00 :   40f48:       lea    -0x1(%rax),%edx
    0.00 :   40f4b:       lock cmpxchg %edx,(%rdi)
    0.00 :   40f4f:       je     40d08 <process_csb+0x4a8>
    0.00 :   40f55:       cmp    $0x1,%eax
    0.00 :   40f58:       jne    40f48 <process_csb+0x6e8>
    0.00 :   40f5a:       mov    %r10,-0x58(%rbp)
    0.00 :   40f5e:       mov    %rcx,-0x50(%rbp)
    0.00 :   40f62:       mov    %r9,-0x48(%rbp)
    0.00 :   40f66:       callq  40f6b <process_csb+0x70b>
    0.00 :   40f6b:       mov    -0x48(%rbp),%r9
    0.00 :   40f6f:       mov    -0x50(%rbp),%rcx
    0.00 :   40f73:       mov    -0x58(%rbp),%r10
    0.00 :   40f77:       jmpq   40d08 <process_csb+0x4a8>
    0.00 :   40f7c:       mov    %rsi,-0x60(%rbp)
    0.00 :   40f80:       mov    %r10,-0x58(%rbp)
    0.00 :   40f84:       mov    %rcx,-0x50(%rbp)
    0.00 :   40f88:       mov    %r9,-0x48(%rbp)
    0.00 :   40f8c:       callq  40f91 <process_csb+0x731>
    0.00 :   40f91:       mov    -0x50(%rbp),%rcx
    0.00 :   40f95:       mov    -0x48(%rbp),%r9
    0.00 :   40f99:       mov    -0x58(%rbp),%r10
    0.00 :   40f9d:       mov    -0x60(%rbp),%rsi
    0.00 :   40fa1:       sub    0x15a0(%rcx),%rax
    0.00 :   40fa8:       add    %rax,0x15b0(%rcx)
    0.00 :   40faf:       jmpq   40ea4 <process_csb+0x644>
    0.00 :   40fb4:       lea    -0x12b0(%r10),%rdi
    0.00 :   40fbb:       mov    %r9,-0x50(%rbp)
    0.00 :   40fbf:       mov    %r10,-0x48(%rbp)
    0.00 :   40fc3:       callq  40fc8 <process_csb+0x768>
    0.00 :   40fc8:       mov    -0x50(%rbp),%r9
    0.00 :   40fcc:       mov    -0x48(%rbp),%r10
    0.00 :   40fd0:       jmpq   40d3f <process_csb+0x4df>
 Percent |	Source code & Disassembly of i915.ko for cycles (1 samples, percent: local period)
--------------------------------------------------------------------------------------------------
         :
         :
         :
         :           Disassembly of section .text:
         :
         :           00000000000276b0 <fwtable_read32>:
         :           fwtable_read32():
    0.00 :   276b0:       callq  276b5 <fwtable_read32+0x5>
    0.00 :   276b5:       push   %rbp
    0.00 :   276b6:       mov    %rsp,%rbp
    0.00 :   276b9:       push   %r15
    0.00 :   276bb:       push   %r14
    0.00 :   276bd:       push   %r13
    0.00 :   276bf:       push   %r12
    0.00 :   276c1:       mov    %esi,%r13d
    0.00 :   276c4:       push   %rbx
    0.00 :   276c5:       mov    %edx,%r14d
    0.00 :   276c8:       mov    %rdi,%rbx
    0.00 :   276cb:       sub    $0x8,%rsp
    0.00 :   276cf:       mov    0x10(%rdi),%rax
    0.00 :   276d3:       cmpb   $0x0,0x11(%rax)
    0.00 :   276d7:       mov    (%rax),%r12d
    0.00 :   276da:       jne    277f6 <fwtable_read32+0x146>
    0.00 :   276e0:       test   %r12w,%r12w
    0.00 :   276e4:       je     2781d <fwtable_read32+0x16d>
    0.00 :   276ea:       sar    $0x10,%r12d
    0.00 :   276ee:       test   %r12d,%r12d
    0.00 :   276f1:       je     27844 <fwtable_read32+0x194>
    0.00 :   276f7:       lea    0x18(%rbx),%r12
    0.00 :   276fb:       mov    %r12,%rdi
    0.00 :   276fe:       callq  27703 <fwtable_read32+0x53>
    0.00 :   27703:       mov    0x0(%rip),%edx        # 27709 <fwtable_read32+0x59>
    0.00 :   27709:       mov    %rax,%r8
    0.00 :   2770c:       test   %edx,%edx
    0.00 :   2770e:       jne    2786b <fwtable_read32+0x1bb>
    0.00 :   27714:       cmp    $0x3ffff,%r13d
    0.00 :   2771b:       jbe    277b4 <fwtable_read32+0x104>
    0.00 :   27721:       mov    %r13d,%eax
    0.00 :   27724:       add    (%rbx),%rax
  100.00 :   27727:       mov    (%rax),%r15d
    0.00 :   2772a:       mov    0x0(%rip),%eax        # 27730 <fwtable_read32+0x80>
    0.00 :   27730:       test   %eax,%eax
    0.00 :   27732:       jne    27899 <fwtable_read32+0x1e9>
    0.00 :   27738:       mov    %r8,%rsi
    0.00 :   2773b:       mov    %r12,%rdi
    0.00 :   2773e:       callq  27743 <fwtable_read32+0x93>
    0.00 :   27743:       nopl   0x0(%rax,%rax,1)
    0.00 :   27748:       add    $0x8,%rsp
    0.00 :   2774c:       mov    %r15d,%eax
    0.00 :   2774f:       pop    %rbx
    0.00 :   27750:       pop    %r12
    0.00 :   27752:       pop    %r13
    0.00 :   27754:       pop    %r14
    0.00 :   27756:       pop    %r15
    0.00 :   27758:       pop    %rbp
    0.00 :   27759:       retq
    0.00 :   2775a:       mov    %gs:0x0(%rip),%eax        # 27761 <fwtable_read32+0xb1>
    0.00 :   27761:       mov    %eax,%eax
    0.00 :   27763:       bt     %rax,0x0(%rip)        # 2776b <fwtable_read32+0xbb>
    0.00 :   2776b:       setb   %al
    0.00 :   2776e:       test   %r14b,%r14b
    0.00 :   27771:       je     27748 <fwtable_read32+0x98>
    0.00 :   27773:       test   %al,%al
    0.00 :   27775:       je     27748 <fwtable_read32+0x98>
    0.00 :   27777:       mov    0x0(%rip),%rbx        # 2777e <fwtable_read32+0xce>
    0.00 :   2777e:       test   %rbx,%rbx
    0.00 :   27781:       je     277b2 <fwtable_read32+0x102>
    0.00 :   27783:       mov    (%rbx),%rax
    0.00 :   27786:       mov    %r15d,%r12d
    0.00 :   27789:       mov    0x8(%rbx),%rdi
    0.00 :   2778d:       add    $0x18,%rbx
    0.00 :   27791:       xor    %esi,%esi
    0.00 :   27793:       mov    $0x1,%r9d
    0.00 :   27799:       mov    $0x4,%r8d
    0.00 :   2779f:       mov    %r12,%rcx
    0.00 :   277a2:       mov    %r13d,%edx
    0.00 :   277a5:       callq  277aa <fwtable_read32+0xfa>
    0.00 :   277aa:       mov    (%rbx),%rax
    0.00 :   277ad:       test   %rax,%rax
    0.00 :   277b0:       jne    27789 <fwtable_read32+0xd9>
    0.00 :   277b2:       jmp    27748 <fwtable_read32+0x98>
    0.00 :   277b4:       mov    %r13d,%esi
    0.00 :   277b7:       mov    %rbx,%rdi
    0.00 :   277ba:       mov    %r8,-0x30(%rbp)
    0.00 :   277be:       callq  23e70 <find_fw_domain>
    0.00 :   277c3:       test   %eax,%eax
    0.00 :   277c5:       mov    -0x30(%rbp),%r8
    0.00 :   277c9:       je     27721 <fwtable_read32+0x71>
    0.00 :   277cf:       mov    0xa8(%rbx),%esi
    0.00 :   277d5:       not    %esi
    0.00 :   277d7:       and    0xa4(%rbx),%esi
    0.00 :   277dd:       and    %eax,%esi
    0.00 :   277df:       je     27721 <fwtable_read32+0x71>
    0.00 :   277e5:       mov    %rbx,%rdi
    0.00 :   277e8:       callq  24670 <___force_wake_auto>
    0.00 :   277ed:       mov    -0x30(%rbp),%r8
    0.00 :   277f1:       jmpq   27721 <fwtable_read32+0x71>
    0.00 :   277f6:       cmpb   $0x0,0x0(%rip)        # 277fd <fwtable_read32+0x14d>
    0.00 :   277fd:       jne    276e0 <fwtable_read32+0x30>
    0.00 :   27803:       mov    $0x0,%rdi
    0.00 :   2780a:       movb   $0x1,0x0(%rip)        # 27811 <fwtable_read32+0x161>
    0.00 :   27811:       callq  27816 <fwtable_read32+0x166>
    0.00 :   27816:       ud2
    0.00 :   27818:       jmpq   276e0 <fwtable_read32+0x30>
    0.00 :   2781d:       cmpb   $0x0,0x0(%rip)        # 27824 <fwtable_read32+0x174>
    0.00 :   27824:       jne    276ea <fwtable_read32+0x3a>
    0.00 :   2782a:       mov    $0x0,%rdi
    0.00 :   27831:       movb   $0x1,0x0(%rip)        # 27838 <fwtable_read32+0x188>
    0.00 :   27838:       callq  2783d <fwtable_read32+0x18d>
    0.00 :   2783d:       ud2
    0.00 :   2783f:       jmpq   276ea <fwtable_read32+0x3a>
    0.00 :   27844:       cmpb   $0x0,0x0(%rip)        # 2784b <fwtable_read32+0x19b>
    0.00 :   2784b:       jne    276f7 <fwtable_read32+0x47>
    0.00 :   27851:       mov    $0x0,%rdi
    0.00 :   27858:       movb   $0x1,0x0(%rip)        # 2785f <fwtable_read32+0x1af>
    0.00 :   2785f:       callq  27864 <fwtable_read32+0x1b4>
    0.00 :   27864:       ud2
    0.00 :   27866:       jmpq   276f7 <fwtable_read32+0x47>
    0.00 :   2786b:       mov    0x108(%rbx),%rdi
    0.00 :   27872:       mov    %rax,-0x30(%rbp)
    0.00 :   27876:       callq  2787b <fwtable_read32+0x1cb>
    0.00 :   2787b:       mov    $0x1,%ecx
    0.00 :   27880:       mov    $0x1,%edx
    0.00 :   27885:       mov    %r13d,%esi
    0.00 :   27888:       mov    %rbx,%rdi
    0.00 :   2788b:       callq  245d0 <__unclaimed_reg_debug>
    0.00 :   27890:       mov    -0x30(%rbp),%r8
    0.00 :   27894:       jmpq   27714 <fwtable_read32+0x64>
    0.00 :   27899:       mov    %rbx,%rdi
    0.00 :   2789c:       xor    %ecx,%ecx
    0.00 :   2789e:       mov    $0x1,%edx
    0.00 :   278a3:       mov    %r13d,%esi
    0.00 :   278a6:       mov    %r8,-0x30(%rbp)
    0.00 :   278aa:       callq  245d0 <__unclaimed_reg_debug>
    0.00 :   278af:       mov    0x108(%rbx),%rdi
    0.00 :   278b6:       callq  *0x0
    0.00 :   278bd:       mov    -0x30(%rbp),%r8
    0.00 :   278c1:       jmpq   27738 <fwtable_read32+0x88>
 Percent |	Source code & Disassembly of ld-2.27.so for cycles (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         :          Disassembly of section .text:
         :
         :          0000000000001090 <_dl_rtld_di_serinfo@@GLIBC_PRIVATE-0x8b50>:
  100.00 :   1090:       mov    %rsp,%rdi
    0.00 :   1093:       callq  1ea0 <free@plt+0xfa0>
